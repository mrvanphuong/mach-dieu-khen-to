
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b04  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003bc4  08003bc4  00013bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c1c  08003c1c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c1c  08003c1c  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c1c  08003c1c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c1c  08003c1c  00013c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c20  08003c20  00013c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08003c24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200000a0  08003cc0  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08003cc0  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008c49  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001950  00000000  00000000  00028d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000aa8  00000000  00000000  0002a660  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009d0  00000000  00000000  0002b108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000be94  00000000  00000000  0002bad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000804e  00000000  00000000  0003796c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000451ca  00000000  00000000  0003f9ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00084b84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025b8  00000000  00000000  00084c00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a0 	.word	0x200000a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003bac 	.word	0x08003bac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a4 	.word	0x200000a4
 8000104:	08003bac 	.word	0x08003bac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <time_to_array>:
uint8_t end_display_flag;
uint8_t PP_Out_Time_Flag,OCB_Out_Time_Flag,CTO_Out_Time_Flag,RO_Out_Time_Flag;



void time_to_array(uint32_t time, uint8_t* tim_p){
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
 80003fc:	6039      	str	r1, [r7, #0]
	int hour = time/60;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	213c      	movs	r1, #60	; 0x3c
 8000402:	0018      	movs	r0, r3
 8000404:	f7ff fe80 	bl	8000108 <__udivsi3>
 8000408:	0003      	movs	r3, r0
 800040a:	60fb      	str	r3, [r7, #12]
	*tim_p= to_mess(hour/100);
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	2164      	movs	r1, #100	; 0x64
 8000410:	0018      	movs	r0, r3
 8000412:	f7ff ff03 	bl	800021c <__divsi3>
 8000416:	0003      	movs	r3, r0
 8000418:	0018      	movs	r0, r3
 800041a:	f000 f829 	bl	8000470 <to_mess>
 800041e:	0003      	movs	r3, r0
 8000420:	001a      	movs	r2, r3
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	701a      	strb	r2, [r3, #0]
	*(tim_p + 1)=to_mess((hour%100)/10);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	2164      	movs	r1, #100	; 0x64
 800042a:	0018      	movs	r0, r3
 800042c:	f7ff ffdc 	bl	80003e8 <__aeabi_idivmod>
 8000430:	000b      	movs	r3, r1
 8000432:	210a      	movs	r1, #10
 8000434:	0018      	movs	r0, r3
 8000436:	f7ff fef1 	bl	800021c <__divsi3>
 800043a:	0003      	movs	r3, r0
 800043c:	001a      	movs	r2, r3
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	1c5c      	adds	r4, r3, #1
 8000442:	0010      	movs	r0, r2
 8000444:	f000 f814 	bl	8000470 <to_mess>
 8000448:	0003      	movs	r3, r0
 800044a:	7023      	strb	r3, [r4, #0]
	*(tim_p + 2)=to_mess(hour%10);
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	210a      	movs	r1, #10
 8000450:	0018      	movs	r0, r3
 8000452:	f7ff ffc9 	bl	80003e8 <__aeabi_idivmod>
 8000456:	000b      	movs	r3, r1
 8000458:	001a      	movs	r2, r3
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	1c9c      	adds	r4, r3, #2
 800045e:	0010      	movs	r0, r2
 8000460:	f000 f806 	bl	8000470 <to_mess>
 8000464:	0003      	movs	r3, r0
 8000466:	7023      	strb	r3, [r4, #0]
}
 8000468:	46c0      	nop			; (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	b005      	add	sp, #20
 800046e:	bd90      	pop	{r4, r7, pc}

08000470 <to_mess>:

uint8_t to_mess(int value){
 8000470:	b580      	push	{r7, lr}
 8000472:	b084      	sub	sp, #16
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
		uint8_t result;
		switch (value) {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2b09      	cmp	r3, #9
 800047c:	d837      	bhi.n	80004ee <to_mess+0x7e>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	009a      	lsls	r2, r3, #2
 8000482:	4b1e      	ldr	r3, [pc, #120]	; (80004fc <to_mess+0x8c>)
 8000484:	18d3      	adds	r3, r2, r3
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	469f      	mov	pc, r3
			case 1:
				(result)=L_ONE;
 800048a:	230f      	movs	r3, #15
 800048c:	18fb      	adds	r3, r7, r3
 800048e:	2230      	movs	r2, #48	; 0x30
 8000490:	701a      	strb	r2, [r3, #0]
				break;
 8000492:	e02c      	b.n	80004ee <to_mess+0x7e>
			case 2:
				(result)=L_TWO;
 8000494:	230f      	movs	r3, #15
 8000496:	18fb      	adds	r3, r7, r3
 8000498:	226d      	movs	r2, #109	; 0x6d
 800049a:	701a      	strb	r2, [r3, #0]
				break;
 800049c:	e027      	b.n	80004ee <to_mess+0x7e>
			case 3:
				(result)=L_THREE;
 800049e:	230f      	movs	r3, #15
 80004a0:	18fb      	adds	r3, r7, r3
 80004a2:	2279      	movs	r2, #121	; 0x79
 80004a4:	701a      	strb	r2, [r3, #0]
				break;
 80004a6:	e022      	b.n	80004ee <to_mess+0x7e>
			case 4:
				(result)=L_FOUR;
 80004a8:	230f      	movs	r3, #15
 80004aa:	18fb      	adds	r3, r7, r3
 80004ac:	2233      	movs	r2, #51	; 0x33
 80004ae:	701a      	strb	r2, [r3, #0]
				break;
 80004b0:	e01d      	b.n	80004ee <to_mess+0x7e>
			case 5:
				(result)=L_FIVE;
 80004b2:	230f      	movs	r3, #15
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	225b      	movs	r2, #91	; 0x5b
 80004b8:	701a      	strb	r2, [r3, #0]
				break;
 80004ba:	e018      	b.n	80004ee <to_mess+0x7e>
			case 6:
				(result)=L_SIX;
 80004bc:	230f      	movs	r3, #15
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	225f      	movs	r2, #95	; 0x5f
 80004c2:	701a      	strb	r2, [r3, #0]
				break;
 80004c4:	e013      	b.n	80004ee <to_mess+0x7e>
			case 7:
				(result)=L_SEVEN;
 80004c6:	230f      	movs	r3, #15
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	2270      	movs	r2, #112	; 0x70
 80004cc:	701a      	strb	r2, [r3, #0]
				break;
 80004ce:	e00e      	b.n	80004ee <to_mess+0x7e>
			case 8:
				(result)=L_EIGHT;
 80004d0:	230f      	movs	r3, #15
 80004d2:	18fb      	adds	r3, r7, r3
 80004d4:	227f      	movs	r2, #127	; 0x7f
 80004d6:	701a      	strb	r2, [r3, #0]
				break;
 80004d8:	e009      	b.n	80004ee <to_mess+0x7e>
			case 9:
				(result)=L_NINE;
 80004da:	230f      	movs	r3, #15
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	227b      	movs	r2, #123	; 0x7b
 80004e0:	701a      	strb	r2, [r3, #0]
				break;
 80004e2:	e004      	b.n	80004ee <to_mess+0x7e>
			case 0:
				(result)=L_ZERO;
 80004e4:	230f      	movs	r3, #15
 80004e6:	18fb      	adds	r3, r7, r3
 80004e8:	227e      	movs	r2, #126	; 0x7e
 80004ea:	701a      	strb	r2, [r3, #0]
				break;
 80004ec:	46c0      	nop			; (mov r8, r8)
		}
		return result;
 80004ee:	230f      	movs	r3, #15
 80004f0:	18fb      	adds	r3, r7, r3
 80004f2:	781b      	ldrb	r3, [r3, #0]
}
 80004f4:	0018      	movs	r0, r3
 80004f6:	46bd      	mov	sp, r7
 80004f8:	b004      	add	sp, #16
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	08003be4 	.word	0x08003be4

08000500 <increase_time>:

void increase_time(uint8_t* flag){
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	if (*flag) {
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d039      	beq.n	8000584 <increase_time+0x84>
		 //san xuat
			(RO_time++);
 8000510:	4b1e      	ldr	r3, [pc, #120]	; (800058c <increase_time+0x8c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	1c5a      	adds	r2, r3, #1
 8000516:	4b1d      	ldr	r3, [pc, #116]	; (800058c <increase_time+0x8c>)
 8000518:	601a      	str	r2, [r3, #0]
			(CTO_time++);
 800051a:	4b1d      	ldr	r3, [pc, #116]	; (8000590 <increase_time+0x90>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <increase_time+0x90>)
 8000522:	601a      	str	r2, [r3, #0]
			(OCB_time++);
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <increase_time+0x94>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	1c5a      	adds	r2, r3, #1
 800052a:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <increase_time+0x94>)
 800052c:	601a      	str	r2, [r3, #0]
			(PP1_time++);
 800052e:	4b1a      	ldr	r3, [pc, #104]	; (8000598 <increase_time+0x98>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	1c5a      	adds	r2, r3, #1
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <increase_time+0x98>)
 8000536:	601a      	str	r2, [r3, #0]
//			(RO_time+=60);
//			(CTO_time+=60);
//			(OCB_time+=60);
//			(PP1_time+=60);

		*flag = 0;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
		time_to_array(PP1_time,PP1_time_p);
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <increase_time+0x98>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a16      	ldr	r2, [pc, #88]	; (800059c <increase_time+0x9c>)
 8000544:	0011      	movs	r1, r2
 8000546:	0018      	movs	r0, r3
 8000548:	f7ff ff54 	bl	80003f4 <time_to_array>
		time_to_array(OCB_time,OCB_time_p);
 800054c:	4b11      	ldr	r3, [pc, #68]	; (8000594 <increase_time+0x94>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a13      	ldr	r2, [pc, #76]	; (80005a0 <increase_time+0xa0>)
 8000552:	0011      	movs	r1, r2
 8000554:	0018      	movs	r0, r3
 8000556:	f7ff ff4d 	bl	80003f4 <time_to_array>
		time_to_array(CTO_time,CTO_time_p);
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <increase_time+0x90>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a11      	ldr	r2, [pc, #68]	; (80005a4 <increase_time+0xa4>)
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f7ff ff46 	bl	80003f4 <time_to_array>
		time_to_array(RO_time,RO_time_p);
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <increase_time+0x8c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <increase_time+0xa8>)
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f7ff ff3f 	bl	80003f4 <time_to_array>

		if(end_display_flag){
 8000576:	4b0d      	ldr	r3, [pc, #52]	; (80005ac <increase_time+0xac>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d002      	beq.n	8000584 <increase_time+0x84>

			end_display_flag =0;
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <increase_time+0xac>)
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8000584:	46c0      	nop			; (mov r8, r8)
 8000586:	46bd      	mov	sp, r7
 8000588:	b002      	add	sp, #8
 800058a:	bd80      	pop	{r7, pc}
 800058c:	2000012c 	.word	0x2000012c
 8000590:	200001c0 	.word	0x200001c0
 8000594:	20000120 	.word	0x20000120
 8000598:	20000178 	.word	0x20000178
 800059c:	20000128 	.word	0x20000128
 80005a0:	200001c8 	.word	0x200001c8
 80005a4:	20000130 	.word	0x20000130
 80005a8:	200001bc 	.word	0x200001bc
 80005ac:	2000011c 	.word	0x2000011c

080005b0 <Ghi_data>:


void Ghi_data(uint32_t start_Adress, uint32_t End_Adress){
 80005b0:	b5b0      	push	{r4, r5, r7, lr}
 80005b2:	b08e      	sub	sp, #56	; 0x38
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6278      	str	r0, [r7, #36]	; 0x24
 80005b8:	6239      	str	r1, [r7, #32]
	HAL_FLASH_Unlock();
 80005ba:	f001 ff7f 	bl	80024bc <HAL_FLASH_Unlock>
			FLASH_EraseInitTypeDef EraseInitStruct;
			EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80005be:	210c      	movs	r1, #12
 80005c0:	2020      	movs	r0, #32
 80005c2:	183b      	adds	r3, r7, r0
 80005c4:	185b      	adds	r3, r3, r1
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
			EraseInitStruct.PageAddress = start_Adress;
 80005ca:	183b      	adds	r3, r7, r0
 80005cc:	185b      	adds	r3, r3, r1
 80005ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005d0:	605a      	str	r2, [r3, #4]
			EraseInitStruct.NbPages = (End_Adress - start_Adress) / FLASH_PAGE_SIZE;
 80005d2:	6a3a      	ldr	r2, [r7, #32]
 80005d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	0a9a      	lsrs	r2, r3, #10
 80005da:	183b      	adds	r3, r7, r0
 80005dc:	185b      	adds	r3, r3, r1
 80005de:	609a      	str	r2, [r3, #8]
			uint32_t PAGEError = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 80005e4:	2308      	movs	r3, #8
 80005e6:	183a      	adds	r2, r7, r0
 80005e8:	18d2      	adds	r2, r2, r3
 80005ea:	183b      	adds	r3, r7, r0
 80005ec:	185b      	adds	r3, r3, r1
 80005ee:	0011      	movs	r1, r2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f002 f823 	bl	800263c <HAL_FLASHEx_Erase>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_Adress, PP1_time);
 80005f6:	4b22      	ldr	r3, [pc, #136]	; (8000680 <Ghi_data+0xd0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	001c      	movs	r4, r3
 80005fc:	2300      	movs	r3, #0
 80005fe:	001d      	movs	r5, r3
 8000600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000602:	0022      	movs	r2, r4
 8000604:	002b      	movs	r3, r5
 8000606:	2002      	movs	r0, #2
 8000608:	f001 fec2 	bl	8002390 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_Adress + 4, OCB_time);
 800060c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060e:	1d19      	adds	r1, r3, #4
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <Ghi_data+0xd4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	61bb      	str	r3, [r7, #24]
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
 800061a:	69ba      	ldr	r2, [r7, #24]
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	2002      	movs	r0, #2
 8000620:	f001 feb6 	bl	8002390 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_Adress + 8, CTO_time);
 8000624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000626:	3308      	adds	r3, #8
 8000628:	0019      	movs	r1, r3
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <Ghi_data+0xd8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	613b      	str	r3, [r7, #16]
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	693a      	ldr	r2, [r7, #16]
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	2002      	movs	r0, #2
 800063a:	f001 fea9 	bl	8002390 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_Adress + 12, RO_time);
 800063e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000640:	330c      	adds	r3, #12
 8000642:	0019      	movs	r1, r3
 8000644:	4b11      	ldr	r3, [pc, #68]	; (800068c <Ghi_data+0xdc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2002      	movs	r0, #2
 8000654:	f001 fe9c 	bl	8002390 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_Adress + 16, Machine_time_run);
 8000658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065a:	3310      	adds	r3, #16
 800065c:	0019      	movs	r1, r3
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <Ghi_data+0xe0>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	683a      	ldr	r2, [r7, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2002      	movs	r0, #2
 800066e:	f001 fe8f 	bl	8002390 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 8000672:	f001 ff49 	bl	8002508 <HAL_FLASH_Lock>
}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b00e      	add	sp, #56	; 0x38
 800067c:	bdb0      	pop	{r4, r5, r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000178 	.word	0x20000178
 8000684:	20000120 	.word	0x20000120
 8000688:	200001c0 	.word	0x200001c0
 800068c:	2000012c 	.word	0x2000012c
 8000690:	200001c4 	.word	0x200001c4

08000694 <read_Flash>:

uint32_t read_Flash(uint32_t addr){
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
			uint32_t Flash_data;
			Flash_data = *(uint32_t*) addr;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	60fb      	str	r3, [r7, #12]
			return Flash_data;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	0018      	movs	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b004      	add	sp, #16
 80006aa:	bd80      	pop	{r7, pc}

080006ac <Controller_Display_Mess>:
static void Activate_Segment_E(int value);
static void Activate_Segment_F(int value);
static void Activate_Segment_G(int value);


void Controller_Display_Mess(uint8_t *mess,uint8_t* seven_segment_switch_flag,uint8_t* end_display_flag){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b088      	sub	sp, #32
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
	int i=0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]
	*seven_segment_switch_flag=0;
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
	while ( i < 3 && !(*end_display_flag)) {
 80006c2:	e02a      	b.n	800071a <Controller_Display_Mess+0x6e>
		if(*seven_segment_switch_flag){
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d026      	beq.n	800071a <Controller_Display_Mess+0x6e>
			Activate_LED7[i]();
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <Controller_Display_Mess+0x84>)
 80006ce:	69fa      	ldr	r2, [r7, #28]
 80006d0:	0092      	lsls	r2, r2, #2
 80006d2:	58d3      	ldr	r3, [r2, r3]
 80006d4:	4798      	blx	r3
		    for (int j = 6;  j >= 0 ;  j--){
 80006d6:	2306      	movs	r3, #6
 80006d8:	61bb      	str	r3, [r7, #24]
 80006da:	e012      	b.n	8000702 <Controller_Display_Mess+0x56>
		    	int value = (*mess & (1 << j));
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	0019      	movs	r1, r3
 80006e2:	2201      	movs	r2, #1
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	409a      	lsls	r2, r3
 80006e8:	0013      	movs	r3, r2
 80006ea:	400b      	ands	r3, r1
 80006ec:	617b      	str	r3, [r7, #20]
		    	Activate_Segment[j](value);
 80006ee:	4b11      	ldr	r3, [pc, #68]	; (8000734 <Controller_Display_Mess+0x88>)
 80006f0:	69ba      	ldr	r2, [r7, #24]
 80006f2:	0092      	lsls	r2, r2, #2
 80006f4:	58d3      	ldr	r3, [r2, r3]
 80006f6:	697a      	ldr	r2, [r7, #20]
 80006f8:	0010      	movs	r0, r2
 80006fa:	4798      	blx	r3
		    for (int j = 6;  j >= 0 ;  j--){
 80006fc:	69bb      	ldr	r3, [r7, #24]
 80006fe:	3b01      	subs	r3, #1
 8000700:	61bb      	str	r3, [r7, #24]
 8000702:	69bb      	ldr	r3, [r7, #24]
 8000704:	2b00      	cmp	r3, #0
 8000706:	dae9      	bge.n	80006dc <Controller_Display_Mess+0x30>
		    }
			*seven_segment_switch_flag=0;
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
			++mess;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3301      	adds	r3, #1
 8000712:	60fb      	str	r3, [r7, #12]
	    	i++;
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	3301      	adds	r3, #1
 8000718:	61fb      	str	r3, [r7, #28]
	while ( i < 3 && !(*end_display_flag)) {
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	2b02      	cmp	r3, #2
 800071e:	dc03      	bgt.n	8000728 <Controller_Display_Mess+0x7c>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d0cd      	beq.n	80006c4 <Controller_Display_Mess+0x18>
	    }
	}
}
 8000728:	46c0      	nop			; (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	b008      	add	sp, #32
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000000 	.word	0x20000000
 8000734:	2000000c 	.word	0x2000000c

08000738 <Activate_LED7_1>:
		Activate_Segment_C,
		Activate_Segment_B,
		Activate_Segment_A
};

void Activate_LED7_1(){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED7_1_PORT, LED7_1_PIN, GPIO_PIN_SET);
 800073c:	2380      	movs	r3, #128	; 0x80
 800073e:	019b      	lsls	r3, r3, #6
 8000740:	480a      	ldr	r0, [pc, #40]	; (800076c <Activate_LED7_1+0x34>)
 8000742:	2201      	movs	r2, #1
 8000744:	0019      	movs	r1, r3
 8000746:	f002 f9b2 	bl	8002aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_2_PORT, LED7_2_PIN, GPIO_PIN_RESET);
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	015b      	lsls	r3, r3, #5
 800074e:	4807      	ldr	r0, [pc, #28]	; (800076c <Activate_LED7_1+0x34>)
 8000750:	2200      	movs	r2, #0
 8000752:	0019      	movs	r1, r3
 8000754:	f002 f9ab 	bl	8002aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_3_PORT, LED7_3_PIN, GPIO_PIN_RESET);
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	011b      	lsls	r3, r3, #4
 800075c:	4803      	ldr	r0, [pc, #12]	; (800076c <Activate_LED7_1+0x34>)
 800075e:	2200      	movs	r2, #0
 8000760:	0019      	movs	r1, r3
 8000762:	f002 f9a4 	bl	8002aae <HAL_GPIO_WritePin>
}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	48000400 	.word	0x48000400

08000770 <Activate_LED7_2>:
void Activate_LED7_2(){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED7_1_PORT, LED7_1_PIN, GPIO_PIN_RESET);
 8000774:	2380      	movs	r3, #128	; 0x80
 8000776:	019b      	lsls	r3, r3, #6
 8000778:	480a      	ldr	r0, [pc, #40]	; (80007a4 <Activate_LED7_2+0x34>)
 800077a:	2200      	movs	r2, #0
 800077c:	0019      	movs	r1, r3
 800077e:	f002 f996 	bl	8002aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_2_PORT, LED7_2_PIN, GPIO_PIN_SET);
 8000782:	2380      	movs	r3, #128	; 0x80
 8000784:	015b      	lsls	r3, r3, #5
 8000786:	4807      	ldr	r0, [pc, #28]	; (80007a4 <Activate_LED7_2+0x34>)
 8000788:	2201      	movs	r2, #1
 800078a:	0019      	movs	r1, r3
 800078c:	f002 f98f 	bl	8002aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_3_PORT, LED7_3_PIN, GPIO_PIN_RESET);
 8000790:	2380      	movs	r3, #128	; 0x80
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	4803      	ldr	r0, [pc, #12]	; (80007a4 <Activate_LED7_2+0x34>)
 8000796:	2200      	movs	r2, #0
 8000798:	0019      	movs	r1, r3
 800079a:	f002 f988 	bl	8002aae <HAL_GPIO_WritePin>
}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	48000400 	.word	0x48000400

080007a8 <Activate_LED7_3>:

void Activate_LED7_3(){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED7_1_PORT, LED7_1_PIN, GPIO_PIN_RESET);
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	019b      	lsls	r3, r3, #6
 80007b0:	480a      	ldr	r0, [pc, #40]	; (80007dc <Activate_LED7_3+0x34>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	0019      	movs	r1, r3
 80007b6:	f002 f97a 	bl	8002aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_2_PORT, LED7_2_PIN, GPIO_PIN_RESET);
 80007ba:	2380      	movs	r3, #128	; 0x80
 80007bc:	015b      	lsls	r3, r3, #5
 80007be:	4807      	ldr	r0, [pc, #28]	; (80007dc <Activate_LED7_3+0x34>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	0019      	movs	r1, r3
 80007c4:	f002 f973 	bl	8002aae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_3_PORT, LED7_3_PIN, GPIO_PIN_SET);
 80007c8:	2380      	movs	r3, #128	; 0x80
 80007ca:	011b      	lsls	r3, r3, #4
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <Activate_LED7_3+0x34>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	0019      	movs	r1, r3
 80007d2:	f002 f96c 	bl	8002aae <HAL_GPIO_WritePin>
}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	48000400 	.word	0x48000400

080007e0 <Activate_Segment_A>:

void Activate_Segment_A(int value){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED7_A_PORT, LED7_A_PIN, value);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	01db      	lsls	r3, r3, #7
 80007f0:	4803      	ldr	r0, [pc, #12]	; (8000800 <Activate_Segment_A+0x20>)
 80007f2:	0019      	movs	r1, r3
 80007f4:	f002 f95b 	bl	8002aae <HAL_GPIO_WritePin>
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b002      	add	sp, #8
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	48000400 	.word	0x48000400

08000804 <Activate_Segment_B>:
void Activate_Segment_B(int value){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED7_B_PORT, LED7_B_PIN, value);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	021b      	lsls	r3, r3, #8
 8000814:	4803      	ldr	r0, [pc, #12]	; (8000824 <Activate_Segment_B+0x20>)
 8000816:	0019      	movs	r1, r3
 8000818:	f002 f949 	bl	8002aae <HAL_GPIO_WritePin>
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b002      	add	sp, #8
 8000822:	bd80      	pop	{r7, pc}
 8000824:	48000400 	.word	0x48000400

08000828 <Activate_Segment_C>:
void Activate_Segment_C(int value){
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED7_C_PORT, LED7_C_PIN, value);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	b2da      	uxtb	r2, r3
 8000834:	2380      	movs	r3, #128	; 0x80
 8000836:	00d9      	lsls	r1, r3, #3
 8000838:	2390      	movs	r3, #144	; 0x90
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	0018      	movs	r0, r3
 800083e:	f002 f936 	bl	8002aae <HAL_GPIO_WritePin>
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b002      	add	sp, #8
 8000848:	bd80      	pop	{r7, pc}

0800084a <Activate_Segment_D>:
void Activate_Segment_D(int value){
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED7_D_PORT, LED7_D_PIN, value);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	b2da      	uxtb	r2, r3
 8000856:	2380      	movs	r3, #128	; 0x80
 8000858:	0119      	lsls	r1, r3, #4
 800085a:	2390      	movs	r3, #144	; 0x90
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	0018      	movs	r0, r3
 8000860:	f002 f925 	bl	8002aae <HAL_GPIO_WritePin>
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b002      	add	sp, #8
 800086a:	bd80      	pop	{r7, pc}

0800086c <Activate_Segment_E>:
void Activate_Segment_E(int value){
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED7_E_PORT, LED7_E_PIN, value);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	0159      	lsls	r1, r3, #5
 800087c:	2390      	movs	r3, #144	; 0x90
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	0018      	movs	r0, r3
 8000882:	f002 f914 	bl	8002aae <HAL_GPIO_WritePin>
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}

0800088e <Activate_Segment_F>:
void Activate_Segment_F(int value){
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED7_F_PORT, LED7_F_PIN, value);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	0059      	lsls	r1, r3, #1
 800089e:	2390      	movs	r3, #144	; 0x90
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	0018      	movs	r0, r3
 80008a4:	f002 f903 	bl	8002aae <HAL_GPIO_WritePin>
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <Activate_Segment_G>:
void Activate_Segment_G(int value){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED7_G_PORT, LED7_G_PIN, value);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	b2da      	uxtb	r2, r3
 80008bc:	2380      	movs	r3, #128	; 0x80
 80008be:	0099      	lsls	r1, r3, #2
 80008c0:	2390      	movs	r3, #144	; 0x90
 80008c2:	05db      	lsls	r3, r3, #23
 80008c4:	0018      	movs	r0, r3
 80008c6:	f002 f8f2 	bl	8002aae <HAL_GPIO_WritePin>
}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b002      	add	sp, #8
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <check_out_time_machine>:
uint8_t out_time_ocb[3] = {L_U, L_D, L_F};
uint8_t out_time_cto[3] = {L_P, L_P, L_TWO};
uint8_t out_time_ro[3] = {L_R, L_O, L_BLANK};
uint8_t	blank_time[3] = {L_BLANK, L_BLANK, L_BLANK};

void check_out_time_machine(){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	if((out_time_machine_trigger)&&(HAL_GPIO_ReadPin(PUMP_STATUS_PORT, PUMP_STATUS_PIN))){
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <check_out_time_machine+0x5c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d015      	beq.n	800090c <check_out_time_machine+0x38>
 80008e0:	2390      	movs	r3, #144	; 0x90
 80008e2:	05db      	lsls	r3, r3, #23
 80008e4:	2102      	movs	r1, #2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f002 f8c4 	bl	8002a74 <HAL_GPIO_ReadPin>
 80008ec:	1e03      	subs	r3, r0, #0
 80008ee:	d00d      	beq.n	800090c <check_out_time_machine+0x38>
			Machine_time_run ++;
 80008f0:	4b10      	ldr	r3, [pc, #64]	; (8000934 <check_out_time_machine+0x60>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <check_out_time_machine+0x60>)
 80008f8:	601a      	str	r2, [r3, #0]
			out_time_machine_trigger = 0 ;
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <check_out_time_machine+0x5c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
			write_data ++;
 8000900:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <check_out_time_machine+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	1c5a      	adds	r2, r3, #1
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <check_out_time_machine+0x64>)
 8000908:	601a      	str	r2, [r3, #0]
		}else
		if((!HAL_GPIO_ReadPin(PUMP_STATUS_PORT, PUMP_STATUS_PIN))){
			(Machine_time_run = 0);
			out_time_machine_trigger =0;
	}
}
 800090a:	e00d      	b.n	8000928 <check_out_time_machine+0x54>
		if((!HAL_GPIO_ReadPin(PUMP_STATUS_PORT, PUMP_STATUS_PIN))){
 800090c:	2390      	movs	r3, #144	; 0x90
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	2102      	movs	r1, #2
 8000912:	0018      	movs	r0, r3
 8000914:	f002 f8ae 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d105      	bne.n	8000928 <check_out_time_machine+0x54>
			(Machine_time_run = 0);
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <check_out_time_machine+0x60>)
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
			out_time_machine_trigger =0;
 8000922:	4b03      	ldr	r3, [pc, #12]	; (8000930 <check_out_time_machine+0x5c>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
}
 8000928:	46c0      	nop			; (mov r8, r8)
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	200001d9 	.word	0x200001d9
 8000934:	200001c4 	.word	0x200001c4
 8000938:	20000174 	.word	0x20000174

0800093c <write_Flash_Timer>:
// write da sua phai lai xem co lưu khong !!!
void write_Flash_Timer(){
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	if (Write_Flash_flag&&((!HAL_GPIO_ReadPin(PUMP_STATUS_PORT, PUMP_STATUS_PIN)||(write_data==30)))){
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <write_Flash_Timer+0x44>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d017      	beq.n	8000978 <write_Flash_Timer+0x3c>
 8000948:	2390      	movs	r3, #144	; 0x90
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	2102      	movs	r1, #2
 800094e:	0018      	movs	r0, r3
 8000950:	f002 f890 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d003      	beq.n	8000960 <write_Flash_Timer+0x24>
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <write_Flash_Timer+0x48>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b1e      	cmp	r3, #30
 800095e:	d10b      	bne.n	8000978 <write_Flash_Timer+0x3c>

		Write_Flash_flag = 0;
 8000960:	4b07      	ldr	r3, [pc, #28]	; (8000980 <write_Flash_Timer+0x44>)
 8000962:	2200      	movs	r2, #0
 8000964:	701a      	strb	r2, [r3, #0]
		write_data =0;
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <write_Flash_Timer+0x48>)
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
		Ghi_data(0x08007000, 0x08007FFF);
 800096c:	4a06      	ldr	r2, [pc, #24]	; (8000988 <write_Flash_Timer+0x4c>)
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <write_Flash_Timer+0x50>)
 8000970:	0011      	movs	r1, r2
 8000972:	0018      	movs	r0, r3
 8000974:	f7ff fe1c 	bl	80005b0 <Ghi_data>


	}

}
 8000978:	46c0      	nop			; (mov r8, r8)
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	200001d0 	.word	0x200001d0
 8000984:	20000174 	.word	0x20000174
 8000988:	08007fff 	.word	0x08007fff
 800098c:	08007000 	.word	0x08007000

08000990 <display>:
void display (){
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	if (cto_button_flag) {
 8000994:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <display+0x78>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d009      	beq.n	80009b0 <display+0x20>
		erro_dislay_trigger = 0;
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <display+0x7c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
//		CTO_time_p = time_to_array(CTO_time);
		Controller_Display_Mess(CTO_time_p,&seven_segment_switch_flag,&end_display_flag);
 80009a2:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <display+0x80>)
 80009a4:	491b      	ldr	r1, [pc, #108]	; (8000a14 <display+0x84>)
 80009a6:	4b1c      	ldr	r3, [pc, #112]	; (8000a18 <display+0x88>)
 80009a8:	0018      	movs	r0, r3
 80009aa:	f7ff fe7f 	bl	80006ac <Controller_Display_Mess>

//		PP1_time_p = time_to_array(PP1_time);
		erro_dislay_trigger = 0;
		Controller_Display_Mess(PP1_time_p, &seven_segment_switch_flag,&end_display_flag);
	}
}
 80009ae:	e028      	b.n	8000a02 <display+0x72>
	}else if(ro_button_flag){
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <display+0x8c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d009      	beq.n	80009cc <display+0x3c>
		erro_dislay_trigger = 0;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <display+0x7c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
		Controller_Display_Mess(RO_time_p,&seven_segment_switch_flag,&end_display_flag);
 80009be:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <display+0x80>)
 80009c0:	4914      	ldr	r1, [pc, #80]	; (8000a14 <display+0x84>)
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <display+0x90>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff fe71 	bl	80006ac <Controller_Display_Mess>
}
 80009ca:	e01a      	b.n	8000a02 <display+0x72>
	}else if (ocb_button_flag) {
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <display+0x94>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d009      	beq.n	80009e8 <display+0x58>
		erro_dislay_trigger = 0;
 80009d4:	4b0d      	ldr	r3, [pc, #52]	; (8000a0c <display+0x7c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	701a      	strb	r2, [r3, #0]
		Controller_Display_Mess(OCB_time_p,&seven_segment_switch_flag,&end_display_flag);
 80009da:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <display+0x80>)
 80009dc:	490d      	ldr	r1, [pc, #52]	; (8000a14 <display+0x84>)
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <display+0x98>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f7ff fe63 	bl	80006ac <Controller_Display_Mess>
}
 80009e6:	e00c      	b.n	8000a02 <display+0x72>
	}else if (pp1_button_flag) {
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <display+0x9c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d008      	beq.n	8000a02 <display+0x72>
		erro_dislay_trigger = 0;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <display+0x7c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
		Controller_Display_Mess(PP1_time_p, &seven_segment_switch_flag,&end_display_flag);
 80009f6:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <display+0x80>)
 80009f8:	4906      	ldr	r1, [pc, #24]	; (8000a14 <display+0x84>)
 80009fa:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <display+0xa0>)
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff fe55 	bl	80006ac <Controller_Display_Mess>
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200001e9 	.word	0x200001e9
 8000a0c:	200001d6 	.word	0x200001d6
 8000a10:	2000011c 	.word	0x2000011c
 8000a14:	200001dc 	.word	0x200001dc
 8000a18:	20000130 	.word	0x20000130
 8000a1c:	200001d4 	.word	0x200001d4
 8000a20:	200001bc 	.word	0x200001bc
 8000a24:	200001cc 	.word	0x200001cc
 8000a28:	200001c8 	.word	0x200001c8
 8000a2c:	200001ea 	.word	0x200001ea
 8000a30:	20000128 	.word	0x20000128

08000a34 <clear_timer_fillter>:

void clear_timer_fillter(){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	if(clr_button_flag&&pp1_button_flag) {
 8000a38:	4b5d      	ldr	r3, [pc, #372]	; (8000bb0 <clear_timer_fillter+0x17c>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d029      	beq.n	8000a94 <clear_timer_fillter+0x60>
 8000a40:	4b5c      	ldr	r3, [pc, #368]	; (8000bb4 <clear_timer_fillter+0x180>)
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d025      	beq.n	8000a94 <clear_timer_fillter+0x60>
			if((HAL_GPIO_ReadPin(PP1_BUTTON_PORT, PP1_BUTTON_PIN))&& (HAL_GPIO_ReadPin(CLR_BUTTON_PORT, CLR_BUTTON_PIN))){
 8000a48:	2390      	movs	r3, #144	; 0x90
 8000a4a:	05db      	lsls	r3, r3, #23
 8000a4c:	2140      	movs	r1, #64	; 0x40
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f002 f810 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d01d      	beq.n	8000a94 <clear_timer_fillter+0x60>
 8000a58:	2390      	movs	r3, #144	; 0x90
 8000a5a:	05db      	lsls	r3, r3, #23
 8000a5c:	2104      	movs	r1, #4
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f002 f808 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d015      	beq.n	8000a94 <clear_timer_fillter+0x60>
				PP1_time = 0;
 8000a68:	4b53      	ldr	r3, [pc, #332]	; (8000bb8 <clear_timer_fillter+0x184>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
				clr_button_flag =0;
 8000a6e:	4b50      	ldr	r3, [pc, #320]	; (8000bb0 <clear_timer_fillter+0x17c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
				pp1_button_flag =0;
 8000a74:	4b4f      	ldr	r3, [pc, #316]	; (8000bb4 <clear_timer_fillter+0x180>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
				time_to_array(PP1_time,PP1_time_p);
 8000a7a:	4b4f      	ldr	r3, [pc, #316]	; (8000bb8 <clear_timer_fillter+0x184>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a4f      	ldr	r2, [pc, #316]	; (8000bbc <clear_timer_fillter+0x188>)
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f7ff fcb6 	bl	80003f4 <time_to_array>
				Ghi_data(0x08007000, 0x08007FFF);
 8000a88:	4a4d      	ldr	r2, [pc, #308]	; (8000bc0 <clear_timer_fillter+0x18c>)
 8000a8a:	4b4e      	ldr	r3, [pc, #312]	; (8000bc4 <clear_timer_fillter+0x190>)
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f7ff fd8e 	bl	80005b0 <Ghi_data>

			}
		}
	if(clr_button_flag&&ocb_button_flag) {
 8000a94:	4b46      	ldr	r3, [pc, #280]	; (8000bb0 <clear_timer_fillter+0x17c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d029      	beq.n	8000af0 <clear_timer_fillter+0xbc>
 8000a9c:	4b4a      	ldr	r3, [pc, #296]	; (8000bc8 <clear_timer_fillter+0x194>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d025      	beq.n	8000af0 <clear_timer_fillter+0xbc>
				if((HAL_GPIO_ReadPin(OCB_BUTTON_PORT, OCB_BUTTON_PIN))&& (HAL_GPIO_ReadPin(CLR_BUTTON_PORT, CLR_BUTTON_PIN))){
 8000aa4:	2390      	movs	r3, #144	; 0x90
 8000aa6:	05db      	lsls	r3, r3, #23
 8000aa8:	2120      	movs	r1, #32
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f001 ffe2 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d01d      	beq.n	8000af0 <clear_timer_fillter+0xbc>
 8000ab4:	2390      	movs	r3, #144	; 0x90
 8000ab6:	05db      	lsls	r3, r3, #23
 8000ab8:	2104      	movs	r1, #4
 8000aba:	0018      	movs	r0, r3
 8000abc:	f001 ffda 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d015      	beq.n	8000af0 <clear_timer_fillter+0xbc>
					OCB_time = 0;
 8000ac4:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <clear_timer_fillter+0x198>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
					clr_button_flag = 0;
 8000aca:	4b39      	ldr	r3, [pc, #228]	; (8000bb0 <clear_timer_fillter+0x17c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	701a      	strb	r2, [r3, #0]
					ocb_button_flag = 0;
 8000ad0:	4b3d      	ldr	r3, [pc, #244]	; (8000bc8 <clear_timer_fillter+0x194>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
					time_to_array(OCB_time,OCB_time_p);
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <clear_timer_fillter+0x198>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a3d      	ldr	r2, [pc, #244]	; (8000bd0 <clear_timer_fillter+0x19c>)
 8000adc:	0011      	movs	r1, r2
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f7ff fc88 	bl	80003f4 <time_to_array>
					Ghi_data(0x08007000, 0x08007FFF);
 8000ae4:	4a36      	ldr	r2, [pc, #216]	; (8000bc0 <clear_timer_fillter+0x18c>)
 8000ae6:	4b37      	ldr	r3, [pc, #220]	; (8000bc4 <clear_timer_fillter+0x190>)
 8000ae8:	0011      	movs	r1, r2
 8000aea:	0018      	movs	r0, r3
 8000aec:	f7ff fd60 	bl	80005b0 <Ghi_data>

				}
		}
	if(clr_button_flag&&cto_button_flag) {
 8000af0:	4b2f      	ldr	r3, [pc, #188]	; (8000bb0 <clear_timer_fillter+0x17c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d029      	beq.n	8000b4c <clear_timer_fillter+0x118>
 8000af8:	4b36      	ldr	r3, [pc, #216]	; (8000bd4 <clear_timer_fillter+0x1a0>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d025      	beq.n	8000b4c <clear_timer_fillter+0x118>
				if((HAL_GPIO_ReadPin(CTO_BUTTON_PORT, CTO_BUTTON_PIN))&& (HAL_GPIO_ReadPin(CLR_BUTTON_PORT, CLR_BUTTON_PIN))){
 8000b00:	2390      	movs	r3, #144	; 0x90
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	2110      	movs	r1, #16
 8000b06:	0018      	movs	r0, r3
 8000b08:	f001 ffb4 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000b0c:	1e03      	subs	r3, r0, #0
 8000b0e:	d01d      	beq.n	8000b4c <clear_timer_fillter+0x118>
 8000b10:	2390      	movs	r3, #144	; 0x90
 8000b12:	05db      	lsls	r3, r3, #23
 8000b14:	2104      	movs	r1, #4
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 ffac 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d015      	beq.n	8000b4c <clear_timer_fillter+0x118>
					CTO_time = 0;
 8000b20:	4b2d      	ldr	r3, [pc, #180]	; (8000bd8 <clear_timer_fillter+0x1a4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
					cto_button_flag =0;
 8000b26:	4b2b      	ldr	r3, [pc, #172]	; (8000bd4 <clear_timer_fillter+0x1a0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
					clr_button_flag =0;
 8000b2c:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <clear_timer_fillter+0x17c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
					time_to_array(CTO_time,CTO_time_p);
 8000b32:	4b29      	ldr	r3, [pc, #164]	; (8000bd8 <clear_timer_fillter+0x1a4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a29      	ldr	r2, [pc, #164]	; (8000bdc <clear_timer_fillter+0x1a8>)
 8000b38:	0011      	movs	r1, r2
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f7ff fc5a 	bl	80003f4 <time_to_array>
					Ghi_data(0x08007000, 0x08007FFF);
 8000b40:	4a1f      	ldr	r2, [pc, #124]	; (8000bc0 <clear_timer_fillter+0x18c>)
 8000b42:	4b20      	ldr	r3, [pc, #128]	; (8000bc4 <clear_timer_fillter+0x190>)
 8000b44:	0011      	movs	r1, r2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fd32 	bl	80005b0 <Ghi_data>

				}
		}
	if(clr_button_flag&&ro_button_flag) {
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <clear_timer_fillter+0x17c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d029      	beq.n	8000ba8 <clear_timer_fillter+0x174>
 8000b54:	4b22      	ldr	r3, [pc, #136]	; (8000be0 <clear_timer_fillter+0x1ac>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d025      	beq.n	8000ba8 <clear_timer_fillter+0x174>
				if((HAL_GPIO_ReadPin(RO_BUTTON_PORT, RO_BUTTON_PIN))&& (HAL_GPIO_ReadPin(CLR_BUTTON_PORT, CLR_BUTTON_PIN))){
 8000b5c:	2390      	movs	r3, #144	; 0x90
 8000b5e:	05db      	lsls	r3, r3, #23
 8000b60:	2108      	movs	r1, #8
 8000b62:	0018      	movs	r0, r3
 8000b64:	f001 ff86 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000b68:	1e03      	subs	r3, r0, #0
 8000b6a:	d01d      	beq.n	8000ba8 <clear_timer_fillter+0x174>
 8000b6c:	2390      	movs	r3, #144	; 0x90
 8000b6e:	05db      	lsls	r3, r3, #23
 8000b70:	2104      	movs	r1, #4
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 ff7e 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d015      	beq.n	8000ba8 <clear_timer_fillter+0x174>
					RO_time = 0;
 8000b7c:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <clear_timer_fillter+0x1b0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
					ro_button_flag=0;
 8000b82:	4b17      	ldr	r3, [pc, #92]	; (8000be0 <clear_timer_fillter+0x1ac>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
					clr_button_flag = 0;
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <clear_timer_fillter+0x17c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
					time_to_array(RO_time,RO_time_p);
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <clear_timer_fillter+0x1b0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <clear_timer_fillter+0x1b4>)
 8000b94:	0011      	movs	r1, r2
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff fc2c 	bl	80003f4 <time_to_array>
					Ghi_data(0x08007000, 0x08007FFF);
 8000b9c:	4a08      	ldr	r2, [pc, #32]	; (8000bc0 <clear_timer_fillter+0x18c>)
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <clear_timer_fillter+0x190>)
 8000ba0:	0011      	movs	r1, r2
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f7ff fd04 	bl	80005b0 <Ghi_data>

				}
		}
}
 8000ba8:	46c0      	nop			; (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	200001da 	.word	0x200001da
 8000bb4:	200001ea 	.word	0x200001ea
 8000bb8:	20000178 	.word	0x20000178
 8000bbc:	20000128 	.word	0x20000128
 8000bc0:	08007fff 	.word	0x08007fff
 8000bc4:	08007000 	.word	0x08007000
 8000bc8:	200001cc 	.word	0x200001cc
 8000bcc:	20000120 	.word	0x20000120
 8000bd0:	200001c8 	.word	0x200001c8
 8000bd4:	200001e9 	.word	0x200001e9
 8000bd8:	200001c0 	.word	0x200001c0
 8000bdc:	20000130 	.word	0x20000130
 8000be0:	200001d4 	.word	0x200001d4
 8000be4:	2000012c 	.word	0x2000012c
 8000be8:	200001bc 	.word	0x200001bc

08000bec <display_erro>:

void display_erro (){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

	if  ((HAL_GPIO_ReadPin(WARTER_INPUT_PORT, WARTER_INPUT_PIN))) {
 8000bf0:	2390      	movs	r3, #144	; 0x90
 8000bf2:	05db      	lsls	r3, r3, #23
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f001 ff3c 	bl	8002a74 <HAL_GPIO_ReadPin>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d00b      	beq.n	8000c18 <display_erro+0x2c>
					water_input_flag=0;
 8000c00:	4bc2      	ldr	r3, [pc, #776]	; (8000f0c <display_erro+0x320>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
					water_input_flag =0;
 8000c06:	4bc1      	ldr	r3, [pc, #772]	; (8000f0c <display_erro+0x320>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
					Water_low_Flag_off =0;
 8000c0c:	4bc0      	ldr	r3, [pc, #768]	; (8000f10 <display_erro+0x324>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
					Water_low_trigger_off =0;
 8000c12:	4bc0      	ldr	r3, [pc, #768]	; (8000f14 <display_erro+0x328>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
				}


		if ((PP_Out_Time_Flag)&&!(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)){
 8000c18:	4bbf      	ldr	r3, [pc, #764]	; (8000f18 <display_erro+0x32c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d028      	beq.n	8000c72 <display_erro+0x86>
 8000c20:	4bbe      	ldr	r3, [pc, #760]	; (8000f1c <display_erro+0x330>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d124      	bne.n	8000c72 <display_erro+0x86>
 8000c28:	4bbd      	ldr	r3, [pc, #756]	; (8000f20 <display_erro+0x334>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d120      	bne.n	8000c72 <display_erro+0x86>
 8000c30:	4bbc      	ldr	r3, [pc, #752]	; (8000f24 <display_erro+0x338>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d11c      	bne.n	8000c72 <display_erro+0x86>
 8000c38:	4bbb      	ldr	r3, [pc, #748]	; (8000f28 <display_erro+0x33c>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d118      	bne.n	8000c72 <display_erro+0x86>
					PP_Out_Time_Trigger_off =1;
 8000c40:	4bba      	ldr	r3, [pc, #744]	; (8000f2c <display_erro+0x340>)
 8000c42:	2201      	movs	r2, #1
 8000c44:	701a      	strb	r2, [r3, #0]
					end_display_flag =0;
 8000c46:	4bba      	ldr	r3, [pc, #744]	; (8000f30 <display_erro+0x344>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
				Controller_Display_Mess(out_time_PP, &seven_segment_switch_flag,&end_display_flag);
 8000c4c:	4ab8      	ldr	r2, [pc, #736]	; (8000f30 <display_erro+0x344>)
 8000c4e:	49b9      	ldr	r1, [pc, #740]	; (8000f34 <display_erro+0x348>)
 8000c50:	4bb9      	ldr	r3, [pc, #740]	; (8000f38 <display_erro+0x34c>)
 8000c52:	0018      	movs	r0, r3
 8000c54:	f7ff fd2a 	bl	80006ac <Controller_Display_Mess>
				if (PP_Out_Time_Flag_off){
 8000c58:	4bb8      	ldr	r3, [pc, #736]	; (8000f3c <display_erro+0x350>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d008      	beq.n	8000c72 <display_erro+0x86>
					PP_Out_Time_Flag =0;
 8000c60:	4bad      	ldr	r3, [pc, #692]	; (8000f18 <display_erro+0x32c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
					PP_Out_Time_Trigger_off=0;
 8000c66:	4bb1      	ldr	r3, [pc, #708]	; (8000f2c <display_erro+0x340>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
					PP_Out_Time_Flag_off = 0;
 8000c6c:	4bb3      	ldr	r3, [pc, #716]	; (8000f3c <display_erro+0x350>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
				}
			}

		if ((!(PP_Out_Time_Flag))&&(OCB_Out_Time_Flag)&&!(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)){
 8000c72:	4ba9      	ldr	r3, [pc, #676]	; (8000f18 <display_erro+0x32c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d12c      	bne.n	8000cd4 <display_erro+0xe8>
 8000c7a:	4bb1      	ldr	r3, [pc, #708]	; (8000f40 <display_erro+0x354>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d028      	beq.n	8000cd4 <display_erro+0xe8>
 8000c82:	4ba6      	ldr	r3, [pc, #664]	; (8000f1c <display_erro+0x330>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d124      	bne.n	8000cd4 <display_erro+0xe8>
 8000c8a:	4ba5      	ldr	r3, [pc, #660]	; (8000f20 <display_erro+0x334>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d120      	bne.n	8000cd4 <display_erro+0xe8>
 8000c92:	4ba4      	ldr	r3, [pc, #656]	; (8000f24 <display_erro+0x338>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d11c      	bne.n	8000cd4 <display_erro+0xe8>
 8000c9a:	4ba3      	ldr	r3, [pc, #652]	; (8000f28 <display_erro+0x33c>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d118      	bne.n	8000cd4 <display_erro+0xe8>
					OCB_Out_Time_Trigger_off =1;
 8000ca2:	4ba8      	ldr	r3, [pc, #672]	; (8000f44 <display_erro+0x358>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
					end_display_flag =0;
 8000ca8:	4ba1      	ldr	r3, [pc, #644]	; (8000f30 <display_erro+0x344>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	701a      	strb	r2, [r3, #0]
				Controller_Display_Mess(out_time_ocb, &seven_segment_switch_flag,&end_display_flag);
 8000cae:	4aa0      	ldr	r2, [pc, #640]	; (8000f30 <display_erro+0x344>)
 8000cb0:	49a0      	ldr	r1, [pc, #640]	; (8000f34 <display_erro+0x348>)
 8000cb2:	4ba5      	ldr	r3, [pc, #660]	; (8000f48 <display_erro+0x35c>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff fcf9 	bl	80006ac <Controller_Display_Mess>
				if (OCB_Out_Time_Flag_off){
 8000cba:	4ba4      	ldr	r3, [pc, #656]	; (8000f4c <display_erro+0x360>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d008      	beq.n	8000cd4 <display_erro+0xe8>
					OCB_Out_Time_Flag =0;
 8000cc2:	4b9f      	ldr	r3, [pc, #636]	; (8000f40 <display_erro+0x354>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	701a      	strb	r2, [r3, #0]
					OCB_Out_Time_Trigger_off=0;
 8000cc8:	4b9e      	ldr	r3, [pc, #632]	; (8000f44 <display_erro+0x358>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
					OCB_Out_Time_Flag_off = 0;
 8000cce:	4b9f      	ldr	r3, [pc, #636]	; (8000f4c <display_erro+0x360>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
				}
			}

		if ((!OCB_Out_Time_Flag)&&(!PP_Out_Time_Flag)&&(CTO_Out_Time_Flag)&&!(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)){
 8000cd4:	4b9a      	ldr	r3, [pc, #616]	; (8000f40 <display_erro+0x354>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d130      	bne.n	8000d3e <display_erro+0x152>
 8000cdc:	4b8e      	ldr	r3, [pc, #568]	; (8000f18 <display_erro+0x32c>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d12c      	bne.n	8000d3e <display_erro+0x152>
 8000ce4:	4b9a      	ldr	r3, [pc, #616]	; (8000f50 <display_erro+0x364>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d028      	beq.n	8000d3e <display_erro+0x152>
 8000cec:	4b8b      	ldr	r3, [pc, #556]	; (8000f1c <display_erro+0x330>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d124      	bne.n	8000d3e <display_erro+0x152>
 8000cf4:	4b8a      	ldr	r3, [pc, #552]	; (8000f20 <display_erro+0x334>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d120      	bne.n	8000d3e <display_erro+0x152>
 8000cfc:	4b89      	ldr	r3, [pc, #548]	; (8000f24 <display_erro+0x338>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d11c      	bne.n	8000d3e <display_erro+0x152>
 8000d04:	4b88      	ldr	r3, [pc, #544]	; (8000f28 <display_erro+0x33c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d118      	bne.n	8000d3e <display_erro+0x152>
					end_display_flag =0;
 8000d0c:	4b88      	ldr	r3, [pc, #544]	; (8000f30 <display_erro+0x344>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
					CTO_Out_Time_Trigger_off =1;
 8000d12:	4b90      	ldr	r3, [pc, #576]	; (8000f54 <display_erro+0x368>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
				Controller_Display_Mess(out_time_cto, &seven_segment_switch_flag,&end_display_flag);
 8000d18:	4a85      	ldr	r2, [pc, #532]	; (8000f30 <display_erro+0x344>)
 8000d1a:	4986      	ldr	r1, [pc, #536]	; (8000f34 <display_erro+0x348>)
 8000d1c:	4b8e      	ldr	r3, [pc, #568]	; (8000f58 <display_erro+0x36c>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f7ff fcc4 	bl	80006ac <Controller_Display_Mess>
				if (CTO_Out_Time_Flag_off){
 8000d24:	4b8d      	ldr	r3, [pc, #564]	; (8000f5c <display_erro+0x370>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d008      	beq.n	8000d3e <display_erro+0x152>
					CTO_Out_Time_Flag =0;
 8000d2c:	4b88      	ldr	r3, [pc, #544]	; (8000f50 <display_erro+0x364>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	701a      	strb	r2, [r3, #0]
					CTO_Out_Time_Trigger_off=0;
 8000d32:	4b88      	ldr	r3, [pc, #544]	; (8000f54 <display_erro+0x368>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
					CTO_Out_Time_Flag_off = 0;
 8000d38:	4b88      	ldr	r3, [pc, #544]	; (8000f5c <display_erro+0x370>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
					}
				}

		if ((!OCB_Out_Time_Flag)&&(!PP_Out_Time_Flag)&&(!CTO_Out_Time_Flag)&&(RO_Out_Time_Flag)&&!(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)){
 8000d3e:	4b80      	ldr	r3, [pc, #512]	; (8000f40 <display_erro+0x354>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d134      	bne.n	8000db0 <display_erro+0x1c4>
 8000d46:	4b74      	ldr	r3, [pc, #464]	; (8000f18 <display_erro+0x32c>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d130      	bne.n	8000db0 <display_erro+0x1c4>
 8000d4e:	4b80      	ldr	r3, [pc, #512]	; (8000f50 <display_erro+0x364>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d12c      	bne.n	8000db0 <display_erro+0x1c4>
 8000d56:	4b82      	ldr	r3, [pc, #520]	; (8000f60 <display_erro+0x374>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d028      	beq.n	8000db0 <display_erro+0x1c4>
 8000d5e:	4b6f      	ldr	r3, [pc, #444]	; (8000f1c <display_erro+0x330>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d124      	bne.n	8000db0 <display_erro+0x1c4>
 8000d66:	4b6e      	ldr	r3, [pc, #440]	; (8000f20 <display_erro+0x334>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d120      	bne.n	8000db0 <display_erro+0x1c4>
 8000d6e:	4b6d      	ldr	r3, [pc, #436]	; (8000f24 <display_erro+0x338>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d11c      	bne.n	8000db0 <display_erro+0x1c4>
 8000d76:	4b6c      	ldr	r3, [pc, #432]	; (8000f28 <display_erro+0x33c>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d118      	bne.n	8000db0 <display_erro+0x1c4>
					RO_Out_Time_Trigger_off =1;
 8000d7e:	4b79      	ldr	r3, [pc, #484]	; (8000f64 <display_erro+0x378>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
					end_display_flag =0;
 8000d84:	4b6a      	ldr	r3, [pc, #424]	; (8000f30 <display_erro+0x344>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
				Controller_Display_Mess(out_time_ro, &seven_segment_switch_flag,&end_display_flag);
 8000d8a:	4a69      	ldr	r2, [pc, #420]	; (8000f30 <display_erro+0x344>)
 8000d8c:	4969      	ldr	r1, [pc, #420]	; (8000f34 <display_erro+0x348>)
 8000d8e:	4b76      	ldr	r3, [pc, #472]	; (8000f68 <display_erro+0x37c>)
 8000d90:	0018      	movs	r0, r3
 8000d92:	f7ff fc8b 	bl	80006ac <Controller_Display_Mess>
				if (RO_Out_Time_Flag_off){
 8000d96:	4b75      	ldr	r3, [pc, #468]	; (8000f6c <display_erro+0x380>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d008      	beq.n	8000db0 <display_erro+0x1c4>
					RO_Out_Time_Flag =0;
 8000d9e:	4b70      	ldr	r3, [pc, #448]	; (8000f60 <display_erro+0x374>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
					RO_Out_Time_Trigger_off=0;
 8000da4:	4b6f      	ldr	r3, [pc, #444]	; (8000f64 <display_erro+0x378>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
					RO_Out_Time_Flag_off = 0;
 8000daa:	4b70      	ldr	r3, [pc, #448]	; (8000f6c <display_erro+0x380>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
				}
			}

		if ((!OCB_Out_Time_Flag)&&(!PP_Out_Time_Flag)&&(!CTO_Out_Time_Flag)&&(!RO_Out_Time_Flag)&&water_input_flag&&!(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)) {
 8000db0:	4b63      	ldr	r3, [pc, #396]	; (8000f40 <display_erro+0x354>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d138      	bne.n	8000e2a <display_erro+0x23e>
 8000db8:	4b57      	ldr	r3, [pc, #348]	; (8000f18 <display_erro+0x32c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d134      	bne.n	8000e2a <display_erro+0x23e>
 8000dc0:	4b63      	ldr	r3, [pc, #396]	; (8000f50 <display_erro+0x364>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d130      	bne.n	8000e2a <display_erro+0x23e>
 8000dc8:	4b65      	ldr	r3, [pc, #404]	; (8000f60 <display_erro+0x374>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d12c      	bne.n	8000e2a <display_erro+0x23e>
 8000dd0:	4b4e      	ldr	r3, [pc, #312]	; (8000f0c <display_erro+0x320>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d028      	beq.n	8000e2a <display_erro+0x23e>
 8000dd8:	4b50      	ldr	r3, [pc, #320]	; (8000f1c <display_erro+0x330>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d124      	bne.n	8000e2a <display_erro+0x23e>
 8000de0:	4b4f      	ldr	r3, [pc, #316]	; (8000f20 <display_erro+0x334>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d120      	bne.n	8000e2a <display_erro+0x23e>
 8000de8:	4b4e      	ldr	r3, [pc, #312]	; (8000f24 <display_erro+0x338>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d11c      	bne.n	8000e2a <display_erro+0x23e>
 8000df0:	4b4d      	ldr	r3, [pc, #308]	; (8000f28 <display_erro+0x33c>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d118      	bne.n	8000e2a <display_erro+0x23e>
							Water_low_trigger_off = 1;
 8000df8:	4b46      	ldr	r3, [pc, #280]	; (8000f14 <display_erro+0x328>)
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	701a      	strb	r2, [r3, #0]
							end_display_flag = 0;
 8000dfe:	4b4c      	ldr	r3, [pc, #304]	; (8000f30 <display_erro+0x344>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
					Controller_Display_Mess(test,&seven_segment_switch_flag,&end_display_flag);
 8000e04:	4a4a      	ldr	r2, [pc, #296]	; (8000f30 <display_erro+0x344>)
 8000e06:	494b      	ldr	r1, [pc, #300]	; (8000f34 <display_erro+0x348>)
 8000e08:	4b59      	ldr	r3, [pc, #356]	; (8000f70 <display_erro+0x384>)
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f7ff fc4e 	bl	80006ac <Controller_Display_Mess>
						if (Water_low_Flag_off) {
 8000e10:	4b3f      	ldr	r3, [pc, #252]	; (8000f10 <display_erro+0x324>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d008      	beq.n	8000e2a <display_erro+0x23e>
							water_input_flag =0;
 8000e18:	4b3c      	ldr	r3, [pc, #240]	; (8000f0c <display_erro+0x320>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
							Water_low_Flag_off =0;
 8000e1e:	4b3c      	ldr	r3, [pc, #240]	; (8000f10 <display_erro+0x324>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
							Water_low_trigger_off =0;
 8000e24:	4b3b      	ldr	r3, [pc, #236]	; (8000f14 <display_erro+0x328>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
						}
					}

		if ((!OCB_Out_Time_Flag)&&(!water_input_flag)&&(!PP_Out_Time_Flag)&&(!CTO_Out_Time_Flag)&&(!RO_Out_Time_Flag)&&out_time_machine_flag&&!(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)) {
 8000e2a:	4b45      	ldr	r3, [pc, #276]	; (8000f40 <display_erro+0x354>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d13c      	bne.n	8000eac <display_erro+0x2c0>
 8000e32:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <display_erro+0x320>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d138      	bne.n	8000eac <display_erro+0x2c0>
 8000e3a:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <display_erro+0x32c>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d134      	bne.n	8000eac <display_erro+0x2c0>
 8000e42:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <display_erro+0x364>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d130      	bne.n	8000eac <display_erro+0x2c0>
 8000e4a:	4b45      	ldr	r3, [pc, #276]	; (8000f60 <display_erro+0x374>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d12c      	bne.n	8000eac <display_erro+0x2c0>
 8000e52:	4b48      	ldr	r3, [pc, #288]	; (8000f74 <display_erro+0x388>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d028      	beq.n	8000eac <display_erro+0x2c0>
 8000e5a:	4b30      	ldr	r3, [pc, #192]	; (8000f1c <display_erro+0x330>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d124      	bne.n	8000eac <display_erro+0x2c0>
 8000e62:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <display_erro+0x334>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d120      	bne.n	8000eac <display_erro+0x2c0>
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	; (8000f24 <display_erro+0x338>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d11c      	bne.n	8000eac <display_erro+0x2c0>
 8000e72:	4b2d      	ldr	r3, [pc, #180]	; (8000f28 <display_erro+0x33c>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d118      	bne.n	8000eac <display_erro+0x2c0>
						Machine_Time_Trigger_off = 1;
 8000e7a:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <display_erro+0x38c>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
						end_display_flag = 0;
 8000e80:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <display_erro+0x344>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]

				Controller_Display_Mess(out_time_Machine,&seven_segment_switch_flag,&end_display_flag);
 8000e86:	4a2a      	ldr	r2, [pc, #168]	; (8000f30 <display_erro+0x344>)
 8000e88:	492a      	ldr	r1, [pc, #168]	; (8000f34 <display_erro+0x348>)
 8000e8a:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <display_erro+0x390>)
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff fc0d 	bl	80006ac <Controller_Display_Mess>
				if (Machine_Time_Flag_off){
 8000e92:	4b3b      	ldr	r3, [pc, #236]	; (8000f80 <display_erro+0x394>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d008      	beq.n	8000eac <display_erro+0x2c0>
						out_time_machine_flag = 0;
 8000e9a:	4b36      	ldr	r3, [pc, #216]	; (8000f74 <display_erro+0x388>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
						Machine_Time_Trigger_off = 0;
 8000ea0:	4b35      	ldr	r3, [pc, #212]	; (8000f78 <display_erro+0x38c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
						Machine_Time_Flag_off = 0;
 8000ea6:	4b36      	ldr	r3, [pc, #216]	; (8000f80 <display_erro+0x394>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
				}
			}
		if ((!OCB_Out_Time_Flag)&&(!water_input_flag)&&(!PP_Out_Time_Flag)&&(!CTO_Out_Time_Flag)&&(!RO_Out_Time_Flag)&&(!out_time_machine_flag)&&!
 8000eac:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <display_erro+0x354>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d000      	beq.n	8000eb6 <display_erro+0x2ca>
 8000eb4:	e076      	b.n	8000fa4 <display_erro+0x3b8>
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <display_erro+0x320>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d000      	beq.n	8000ec0 <display_erro+0x2d4>
 8000ebe:	e071      	b.n	8000fa4 <display_erro+0x3b8>
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <display_erro+0x32c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d000      	beq.n	8000eca <display_erro+0x2de>
 8000ec8:	e06c      	b.n	8000fa4 <display_erro+0x3b8>
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <display_erro+0x364>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d168      	bne.n	8000fa4 <display_erro+0x3b8>
 8000ed2:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <display_erro+0x374>)
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d164      	bne.n	8000fa4 <display_erro+0x3b8>
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <display_erro+0x388>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d160      	bne.n	8000fa4 <display_erro+0x3b8>
								(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)){
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <display_erro+0x330>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
		if ((!OCB_Out_Time_Flag)&&(!water_input_flag)&&(!PP_Out_Time_Flag)&&(!CTO_Out_Time_Flag)&&(!RO_Out_Time_Flag)&&(!out_time_machine_flag)&&!
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d15c      	bne.n	8000fa4 <display_erro+0x3b8>
								(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)){
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <display_erro+0x334>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d158      	bne.n	8000fa4 <display_erro+0x3b8>
 8000ef2:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <display_erro+0x338>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d154      	bne.n	8000fa4 <display_erro+0x3b8>
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <display_erro+0x33c>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
		if ((!OCB_Out_Time_Flag)&&(!water_input_flag)&&(!PP_Out_Time_Flag)&&(!CTO_Out_Time_Flag)&&(!RO_Out_Time_Flag)&&(!out_time_machine_flag)&&!
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d150      	bne.n	8000fa4 <display_erro+0x3b8>
					erro_dislay_trigger = 1;
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <display_erro+0x398>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	701a      	strb	r2, [r3, #0]
 8000f08:	e03e      	b.n	8000f88 <display_erro+0x39c>
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	200001e3 	.word	0x200001e3
 8000f10:	200001e6 	.word	0x200001e6
 8000f14:	200001df 	.word	0x200001df
 8000f18:	2000011b 	.word	0x2000011b
 8000f1c:	200001ea 	.word	0x200001ea
 8000f20:	200001cc 	.word	0x200001cc
 8000f24:	200001e9 	.word	0x200001e9
 8000f28:	200001d4 	.word	0x200001d4
 8000f2c:	200001d7 	.word	0x200001d7
 8000f30:	2000011c 	.word	0x2000011c
 8000f34:	200001dc 	.word	0x200001dc
 8000f38:	20000080 	.word	0x20000080
 8000f3c:	200001d5 	.word	0x200001d5
 8000f40:	2000011d 	.word	0x2000011d
 8000f44:	200001e4 	.word	0x200001e4
 8000f48:	20000084 	.word	0x20000084
 8000f4c:	200001e1 	.word	0x200001e1
 8000f50:	2000011a 	.word	0x2000011a
 8000f54:	200001dd 	.word	0x200001dd
 8000f58:	20000088 	.word	0x20000088
 8000f5c:	200001e8 	.word	0x200001e8
 8000f60:	20000119 	.word	0x20000119
 8000f64:	200001cf 	.word	0x200001cf
 8000f68:	2000008c 	.word	0x2000008c
 8000f6c:	200001d2 	.word	0x200001d2
 8000f70:	20000078 	.word	0x20000078
 8000f74:	200001d3 	.word	0x200001d3
 8000f78:	200001db 	.word	0x200001db
 8000f7c:	2000007c 	.word	0x2000007c
 8000f80:	200001e7 	.word	0x200001e7
 8000f84:	200001d6 	.word	0x200001d6
				on_end_display(&erro_dislay_trigger); /// sua thanh ghi
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <display_erro+0x3c0>)
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f000 f8cc 	bl	8001128 <on_end_display>
				if (erro_dislay_flag_off){
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <display_erro+0x3c4>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d005      	beq.n	8000fa4 <display_erro+0x3b8>
						erro_dislay_trigger =0;
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <display_erro+0x3c0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
						erro_dislay_flag_off = 0;
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <display_erro+0x3c4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
			}
		}
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	200001d6 	.word	0x200001d6
 8000fb0:	200001e0 	.word	0x200001e0

08000fb4 <out_time_fillter>:



void out_time_fillter(){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	 if ((RO_time >= OVER_TIME_RO )&&(!dislay_erro_trigger)){
 8000fb8:	4b45      	ldr	r3, [pc, #276]	; (80010d0 <out_time_fillter+0x11c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a45      	ldr	r2, [pc, #276]	; (80010d4 <out_time_fillter+0x120>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d906      	bls.n	8000fd0 <out_time_fillter+0x1c>
 8000fc2:	4b45      	ldr	r3, [pc, #276]	; (80010d8 <out_time_fillter+0x124>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d102      	bne.n	8000fd0 <out_time_fillter+0x1c>
		 RO_Out_Time_Flag = 1;
 8000fca:	4b44      	ldr	r3, [pc, #272]	; (80010dc <out_time_fillter+0x128>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	701a      	strb	r2, [r3, #0]
	 }


	 if ((CTO_time >= OVER_TIME_CTO)&&(!dislay_erro_trigger)) {
 8000fd0:	4b43      	ldr	r3, [pc, #268]	; (80010e0 <out_time_fillter+0x12c>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a43      	ldr	r2, [pc, #268]	; (80010e4 <out_time_fillter+0x130>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d906      	bls.n	8000fe8 <out_time_fillter+0x34>
 8000fda:	4b3f      	ldr	r3, [pc, #252]	; (80010d8 <out_time_fillter+0x124>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d102      	bne.n	8000fe8 <out_time_fillter+0x34>
		CTO_Out_Time_Flag = 1;
 8000fe2:	4b41      	ldr	r3, [pc, #260]	; (80010e8 <out_time_fillter+0x134>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
	}



	 if ((OCB_time >= OVER_TIME_OCB)&&(!dislay_erro_trigger)) {
 8000fe8:	4b40      	ldr	r3, [pc, #256]	; (80010ec <out_time_fillter+0x138>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a40      	ldr	r2, [pc, #256]	; (80010f0 <out_time_fillter+0x13c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d906      	bls.n	8001000 <out_time_fillter+0x4c>
 8000ff2:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <out_time_fillter+0x124>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d102      	bne.n	8001000 <out_time_fillter+0x4c>
		OCB_Out_Time_Flag =1 ;
 8000ffa:	4b3e      	ldr	r3, [pc, #248]	; (80010f4 <out_time_fillter+0x140>)
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	701a      	strb	r2, [r3, #0]
	}


	if ((PP1_time >= OVER_TIME_pp1)&&(!dislay_erro_trigger)) {
 8001000:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <out_time_fillter+0x144>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a3d      	ldr	r2, [pc, #244]	; (80010fc <out_time_fillter+0x148>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d906      	bls.n	8001018 <out_time_fillter+0x64>
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <out_time_fillter+0x124>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d102      	bne.n	8001018 <out_time_fillter+0x64>
		PP_Out_Time_Flag = 1;
 8001012:	4b3b      	ldr	r3, [pc, #236]	; (8001100 <out_time_fillter+0x14c>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]

	}
	/// thoi gian Chay qua thoi gian
	if((Machine_time_run >=300)&&(!dislay_erro_trigger)){
 8001018:	4b3a      	ldr	r3, [pc, #232]	; (8001104 <out_time_fillter+0x150>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	232c      	movs	r3, #44	; 0x2c
 800101e:	33ff      	adds	r3, #255	; 0xff
 8001020:	429a      	cmp	r2, r3
 8001022:	d906      	bls.n	8001032 <out_time_fillter+0x7e>
 8001024:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <out_time_fillter+0x124>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <out_time_fillter+0x7e>
		out_time_machine_flag = 1;
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <out_time_fillter+0x154>)
 800102e:	2201      	movs	r2, #1
 8001030:	701a      	strb	r2, [r3, #0]

	}
	if ((!HAL_GPIO_ReadPin(WARTER_INPUT_PORT, WARTER_INPUT_PIN))&&(!dislay_erro_trigger)) {
 8001032:	2390      	movs	r3, #144	; 0x90
 8001034:	05db      	lsls	r3, r3, #23
 8001036:	2101      	movs	r1, #1
 8001038:	0018      	movs	r0, r3
 800103a:	f001 fd1b 	bl	8002a74 <HAL_GPIO_ReadPin>
 800103e:	1e03      	subs	r3, r0, #0
 8001040:	d106      	bne.n	8001050 <out_time_fillter+0x9c>
 8001042:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <out_time_fillter+0x124>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d102      	bne.n	8001050 <out_time_fillter+0x9c>
		water_input_flag =1;
 800104a:	4b30      	ldr	r3, [pc, #192]	; (800110c <out_time_fillter+0x158>)
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
	}
	if (RO_Out_Time_Flag||CTO_Out_Time_Flag||OCB_Out_Time_Flag||PP_Out_Time_Flag||water_input_flag||out_time_machine_flag||erro_dislay_trigger){
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <out_time_fillter+0x128>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d117      	bne.n	8001088 <out_time_fillter+0xd4>
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <out_time_fillter+0x134>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d113      	bne.n	8001088 <out_time_fillter+0xd4>
 8001060:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <out_time_fillter+0x140>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10f      	bne.n	8001088 <out_time_fillter+0xd4>
 8001068:	4b25      	ldr	r3, [pc, #148]	; (8001100 <out_time_fillter+0x14c>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d10b      	bne.n	8001088 <out_time_fillter+0xd4>
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <out_time_fillter+0x158>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d107      	bne.n	8001088 <out_time_fillter+0xd4>
 8001078:	4b23      	ldr	r3, [pc, #140]	; (8001108 <out_time_fillter+0x154>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d103      	bne.n	8001088 <out_time_fillter+0xd4>
 8001080:	4b23      	ldr	r3, [pc, #140]	; (8001110 <out_time_fillter+0x15c>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01a      	beq.n	80010be <out_time_fillter+0x10a>
			dislay_erro_trigger =1;
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <out_time_fillter+0x124>)
 800108a:	2201      	movs	r2, #1
 800108c:	701a      	strb	r2, [r3, #0]
		if (!(ro_button_flag||cto_button_flag||ocb_button_flag||pp1_button_flag)) {
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <out_time_fillter+0x160>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10f      	bne.n	80010b6 <out_time_fillter+0x102>
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <out_time_fillter+0x164>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10b      	bne.n	80010b6 <out_time_fillter+0x102>
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <out_time_fillter+0x168>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d107      	bne.n	80010b6 <out_time_fillter+0x102>
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <out_time_fillter+0x16c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d103      	bne.n	80010b6 <out_time_fillter+0x102>
			lock_end_dislay_flag = 0;
 80010ae:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <out_time_fillter+0x170>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
		if (!(ro_button_flag||cto_button_flag||ocb_button_flag||pp1_button_flag)) {
 80010b4:	e009      	b.n	80010ca <out_time_fillter+0x116>
		}else {
			lock_end_dislay_flag = 1;
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <out_time_fillter+0x170>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
		if (!(ro_button_flag||cto_button_flag||ocb_button_flag||pp1_button_flag)) {
 80010bc:	e005      	b.n	80010ca <out_time_fillter+0x116>
		}
	}else {
		dislay_erro_trigger =0;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <out_time_fillter+0x124>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
		lock_end_dislay_flag = 1;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <out_time_fillter+0x170>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	701a      	strb	r2, [r3, #0]
	}
 }
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000012c 	.word	0x2000012c
 80010d4:	0000a8bf 	.word	0x0000a8bf
 80010d8:	200001ce 	.word	0x200001ce
 80010dc:	20000119 	.word	0x20000119
 80010e0:	200001c0 	.word	0x200001c0
 80010e4:	00007e8f 	.word	0x00007e8f
 80010e8:	2000011a 	.word	0x2000011a
 80010ec:	20000120 	.word	0x20000120
 80010f0:	0000545f 	.word	0x0000545f
 80010f4:	2000011d 	.word	0x2000011d
 80010f8:	20000178 	.word	0x20000178
 80010fc:	00002a2f 	.word	0x00002a2f
 8001100:	2000011b 	.word	0x2000011b
 8001104:	200001c4 	.word	0x200001c4
 8001108:	200001d3 	.word	0x200001d3
 800110c:	200001e3 	.word	0x200001e3
 8001110:	200001d6 	.word	0x200001d6
 8001114:	200001d4 	.word	0x200001d4
 8001118:	200001e9 	.word	0x200001e9
 800111c:	200001cc 	.word	0x200001cc
 8001120:	200001ea 	.word	0x200001ea
 8001124:	200001cd 	.word	0x200001cd

08001128 <on_end_display>:
void on_end_display(uint8_t *flag){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	if(*flag){
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d029      	beq.n	800118c <on_end_display+0x64>
		HAL_GPIO_WritePin(LED7_3_PORT, LED7_3_PIN, 0);
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	011b      	lsls	r3, r3, #4
 800113c:	4815      	ldr	r0, [pc, #84]	; (8001194 <on_end_display+0x6c>)
 800113e:	2200      	movs	r2, #0
 8001140:	0019      	movs	r1, r3
 8001142:	f001 fcb4 	bl	8002aae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_2_PORT, LED7_2_PIN, 0);
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	015b      	lsls	r3, r3, #5
 800114a:	4812      	ldr	r0, [pc, #72]	; (8001194 <on_end_display+0x6c>)
 800114c:	2200      	movs	r2, #0
 800114e:	0019      	movs	r1, r3
 8001150:	f001 fcad 	bl	8002aae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_1_PORT, LED7_1_PIN, 0);
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	019b      	lsls	r3, r3, #6
 8001158:	480e      	ldr	r0, [pc, #56]	; (8001194 <on_end_display+0x6c>)
 800115a:	2200      	movs	r2, #0
 800115c:	0019      	movs	r1, r3
 800115e:	f001 fca6 	bl	8002aae <HAL_GPIO_WritePin>
		*flag = 0;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
		lock_end_dislay_flag = 0;
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <on_end_display+0x70>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
		ro_button_flag = cto_button_flag = ocb_button_flag = pp1_button_flag =0;
 800116e:	4b0b      	ldr	r3, [pc, #44]	; (800119c <on_end_display+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
 8001174:	4b09      	ldr	r3, [pc, #36]	; (800119c <on_end_display+0x74>)
 8001176:	781a      	ldrb	r2, [r3, #0]
 8001178:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <on_end_display+0x78>)
 800117a:	701a      	strb	r2, [r3, #0]
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <on_end_display+0x78>)
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <on_end_display+0x7c>)
 8001182:	701a      	strb	r2, [r3, #0]
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <on_end_display+0x7c>)
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <on_end_display+0x80>)
 800118a:	701a      	strb	r2, [r3, #0]
//		free(OCB_time_p);
//		free(CTO_time_p);
//		free(RO_time_p);

	}
}
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b002      	add	sp, #8
 8001192:	bd80      	pop	{r7, pc}
 8001194:	48000400 	.word	0x48000400
 8001198:	200001cd 	.word	0x200001cd
 800119c:	200001ea 	.word	0x200001ea
 80011a0:	200001cc 	.word	0x200001cc
 80011a4:	200001e9 	.word	0x200001e9
 80011a8:	200001d4 	.word	0x200001d4

080011ac <led_fan_action>:

void led_fan_action(uint8_t* led_fan_flag){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	static int counting;
	static int fw_done;
	if ( (fw_done==0)&&(counting < 10)) {
 80011b4:	4b38      	ldr	r3, [pc, #224]	; (8001298 <led_fan_action+0xec>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d138      	bne.n	800122e <led_fan_action+0x82>
 80011bc:	4b37      	ldr	r3, [pc, #220]	; (800129c <led_fan_action+0xf0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	dc34      	bgt.n	800122e <led_fan_action+0x82>
		if (*led_fan_flag) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d026      	beq.n	800121a <led_fan_action+0x6e>

			HAL_GPIO_WritePin(fan_led_port[counting], fan_led_pin[counting], 0);
 80011cc:	4b33      	ldr	r3, [pc, #204]	; (800129c <led_fan_action+0xf0>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b33      	ldr	r3, [pc, #204]	; (80012a0 <led_fan_action+0xf4>)
 80011d2:	0092      	lsls	r2, r2, #2
 80011d4:	58d0      	ldr	r0, [r2, r3]
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <led_fan_action+0xf0>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	4b32      	ldr	r3, [pc, #200]	; (80012a4 <led_fan_action+0xf8>)
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	58d3      	ldr	r3, [r2, r3]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	2200      	movs	r2, #0
 80011e4:	0019      	movs	r1, r3
 80011e6:	f001 fc62 	bl	8002aae <HAL_GPIO_WritePin>
			*led_fan_flag=0;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(fan_led_port[counting], fan_led_pin[counting-3], 1);
 80011f0:	4b2a      	ldr	r3, [pc, #168]	; (800129c <led_fan_action+0xf0>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <led_fan_action+0xf4>)
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	58d0      	ldr	r0, [r2, r3]
 80011fa:	4b28      	ldr	r3, [pc, #160]	; (800129c <led_fan_action+0xf0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	1eda      	subs	r2, r3, #3
 8001200:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <led_fan_action+0xf8>)
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	58d3      	ldr	r3, [r2, r3]
 8001206:	b29b      	uxth	r3, r3
 8001208:	2201      	movs	r2, #1
 800120a:	0019      	movs	r1, r3
 800120c:	f001 fc4f 	bl	8002aae <HAL_GPIO_WritePin>
			counting++;
 8001210:	4b22      	ldr	r3, [pc, #136]	; (800129c <led_fan_action+0xf0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	4b21      	ldr	r3, [pc, #132]	; (800129c <led_fan_action+0xf0>)
 8001218:	601a      	str	r2, [r3, #0]

		}
		if(counting==10){
 800121a:	4b20      	ldr	r3, [pc, #128]	; (800129c <led_fan_action+0xf0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b0a      	cmp	r3, #10
 8001220:	d105      	bne.n	800122e <led_fan_action+0x82>
			fw_done=1;
 8001222:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <led_fan_action+0xec>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]
			counting=0;
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <led_fan_action+0xf0>)
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
		}
	}
	if ((fw_done==1)&&(counting < 10)) {
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <led_fan_action+0xec>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d12c      	bne.n	8001290 <led_fan_action+0xe4>
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <led_fan_action+0xf0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b09      	cmp	r3, #9
 800123c:	dc28      	bgt.n	8001290 <led_fan_action+0xe4>
		if (*led_fan_flag) {
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d01a      	beq.n	800127c <led_fan_action+0xd0>
			HAL_GPIO_WritePin(fan_led_port[9-counting], fan_led_pin[9-counting], 1);
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <led_fan_action+0xf0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2209      	movs	r2, #9
 800124c:	1ad2      	subs	r2, r2, r3
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <led_fan_action+0xf4>)
 8001250:	0092      	lsls	r2, r2, #2
 8001252:	58d0      	ldr	r0, [r2, r3]
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <led_fan_action+0xf0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2209      	movs	r2, #9
 800125a:	1ad2      	subs	r2, r2, r3
 800125c:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <led_fan_action+0xf8>)
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	58d3      	ldr	r3, [r2, r3]
 8001262:	b29b      	uxth	r3, r3
 8001264:	2201      	movs	r2, #1
 8001266:	0019      	movs	r1, r3
 8001268:	f001 fc21 	bl	8002aae <HAL_GPIO_WritePin>
			*led_fan_flag=0;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
			counting++;
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <led_fan_action+0xf0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <led_fan_action+0xf0>)
 800127a:	601a      	str	r2, [r3, #0]

		}
		if(counting==10){
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <led_fan_action+0xf0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b0a      	cmp	r3, #10
 8001282:	d105      	bne.n	8001290 <led_fan_action+0xe4>
			fw_done=0;
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <led_fan_action+0xec>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
			counting=0;
 800128a:	4b04      	ldr	r3, [pc, #16]	; (800129c <led_fan_action+0xf0>)
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	b002      	add	sp, #8
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000bc 	.word	0x200000bc
 800129c:	200000c0 	.word	0x200000c0
 80012a0:	20000028 	.word	0x20000028
 80012a4:	20000050 	.word	0x20000050

080012a8 <led_tanks_full>:

void led_tanks_full( ){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	if (led_tank_full_flag_off){
 80012ac:	4b44      	ldr	r3, [pc, #272]	; (80013c0 <led_tanks_full+0x118>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d03e      	beq.n	8001332 <led_tanks_full+0x8a>

				HAL_GPIO_WritePin(LED_C1_PORT, LED_C1_PIN, 1);
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4842      	ldr	r0, [pc, #264]	; (80013c4 <led_tanks_full+0x11c>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	0019      	movs	r1, r3
 80012be:	f001 fbf6 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C2_PORT, LED_C2_PIN, 1);
 80012c2:	2380      	movs	r3, #128	; 0x80
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	483f      	ldr	r0, [pc, #252]	; (80013c4 <led_tanks_full+0x11c>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	0019      	movs	r1, r3
 80012cc:	f001 fbef 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C3_PORT, LED_C3_PIN, 1);
 80012d0:	4b3c      	ldr	r3, [pc, #240]	; (80013c4 <led_tanks_full+0x11c>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	2180      	movs	r1, #128	; 0x80
 80012d6:	0018      	movs	r0, r3
 80012d8:	f001 fbe9 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C4_PORT, LED_C4_PIN, 1);
 80012dc:	4b39      	ldr	r3, [pc, #228]	; (80013c4 <led_tanks_full+0x11c>)
 80012de:	2201      	movs	r2, #1
 80012e0:	2140      	movs	r1, #64	; 0x40
 80012e2:	0018      	movs	r0, r3
 80012e4:	f001 fbe3 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C5_PORT, LED_C5_PIN, 1);
 80012e8:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <led_tanks_full+0x11c>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	2120      	movs	r1, #32
 80012ee:	0018      	movs	r0, r3
 80012f0:	f001 fbdd 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C6_PORT, LED_C6_PIN, 1);
 80012f4:	4b33      	ldr	r3, [pc, #204]	; (80013c4 <led_tanks_full+0x11c>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	2110      	movs	r1, #16
 80012fa:	0018      	movs	r0, r3
 80012fc:	f001 fbd7 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C7_PORT, LED_C7_PIN, 1);
 8001300:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <led_tanks_full+0x11c>)
 8001302:	2201      	movs	r2, #1
 8001304:	2108      	movs	r1, #8
 8001306:	0018      	movs	r0, r3
 8001308:	f001 fbd1 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C8_PORT, LED_C8_PIN, 1);
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <led_tanks_full+0x11c>)
 800130e:	2201      	movs	r2, #1
 8001310:	2102      	movs	r1, #2
 8001312:	0018      	movs	r0, r3
 8001314:	f001 fbcb 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C9_PORT, LED_C9_PIN, 1);
 8001318:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <led_tanks_full+0x11c>)
 800131a:	2201      	movs	r2, #1
 800131c:	2101      	movs	r1, #1
 800131e:	0018      	movs	r0, r3
 8001320:	f001 fbc5 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C10_PORT, LED_C10_PIN, 1);
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	4826      	ldr	r0, [pc, #152]	; (80013c4 <led_tanks_full+0x11c>)
 800132a:	2201      	movs	r2, #1
 800132c:	0019      	movs	r1, r3
 800132e:	f001 fbbe 	bl	8002aae <HAL_GPIO_WritePin>

		}

	if (led_tank_full_flag) {
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <led_tanks_full+0x120>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d03e      	beq.n	80013b8 <led_tanks_full+0x110>

				HAL_GPIO_WritePin(LED_C1_PORT, LED_C1_PIN, 0);
 800133a:	2380      	movs	r3, #128	; 0x80
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4821      	ldr	r0, [pc, #132]	; (80013c4 <led_tanks_full+0x11c>)
 8001340:	2200      	movs	r2, #0
 8001342:	0019      	movs	r1, r3
 8001344:	f001 fbb3 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C2_PORT, LED_C2_PIN, 0);
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	481d      	ldr	r0, [pc, #116]	; (80013c4 <led_tanks_full+0x11c>)
 800134e:	2200      	movs	r2, #0
 8001350:	0019      	movs	r1, r3
 8001352:	f001 fbac 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C3_PORT, LED_C3_PIN, 0);
 8001356:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <led_tanks_full+0x11c>)
 8001358:	2200      	movs	r2, #0
 800135a:	2180      	movs	r1, #128	; 0x80
 800135c:	0018      	movs	r0, r3
 800135e:	f001 fba6 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C4_PORT, LED_C4_PIN, 0);
 8001362:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <led_tanks_full+0x11c>)
 8001364:	2200      	movs	r2, #0
 8001366:	2140      	movs	r1, #64	; 0x40
 8001368:	0018      	movs	r0, r3
 800136a:	f001 fba0 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C5_PORT, LED_C5_PIN, 0);
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <led_tanks_full+0x11c>)
 8001370:	2200      	movs	r2, #0
 8001372:	2120      	movs	r1, #32
 8001374:	0018      	movs	r0, r3
 8001376:	f001 fb9a 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C6_PORT, LED_C6_PIN, 0);
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <led_tanks_full+0x11c>)
 800137c:	2200      	movs	r2, #0
 800137e:	2110      	movs	r1, #16
 8001380:	0018      	movs	r0, r3
 8001382:	f001 fb94 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C7_PORT, LED_C7_PIN, 0);
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <led_tanks_full+0x11c>)
 8001388:	2200      	movs	r2, #0
 800138a:	2108      	movs	r1, #8
 800138c:	0018      	movs	r0, r3
 800138e:	f001 fb8e 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C8_PORT, LED_C8_PIN, 0);
 8001392:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <led_tanks_full+0x11c>)
 8001394:	2200      	movs	r2, #0
 8001396:	2102      	movs	r1, #2
 8001398:	0018      	movs	r0, r3
 800139a:	f001 fb88 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C9_PORT, LED_C9_PIN, 0);
 800139e:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <led_tanks_full+0x11c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	2101      	movs	r1, #1
 80013a4:	0018      	movs	r0, r3
 80013a6:	f001 fb82 	bl	8002aae <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C10_PORT, LED_C10_PIN, 0);
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <led_tanks_full+0x11c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	0019      	movs	r1, r3
 80013b4:	f001 fb7b 	bl	8002aae <HAL_GPIO_WritePin>
		}
	}
 80013b8:	46c0      	nop			; (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	200001d8 	.word	0x200001d8
 80013c4:	48000400 	.word	0x48000400
 80013c8:	200001de 	.word	0x200001de

080013cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d0:	f000 fe7a 	bl	80020c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013d4:	f000 f952 	bl	800167c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d8:	f000 fa04 	bl	80017e4 <MX_GPIO_Init>
  MX_TIM3_Init();
 80013dc:	f000 f98a 	bl	80016f4 <MX_TIM3_Init>
  MX_TIM6_Init();
 80013e0:	f000 f9de 	bl	80017a0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  	  	  HAL_TIM_Base_Start_IT(&htim3);
 80013e4:	4b8e      	ldr	r3, [pc, #568]	; (8001620 <main+0x254>)
 80013e6:	0018      	movs	r0, r3
 80013e8:	f002 f81e 	bl	8003428 <HAL_TIM_Base_Start_IT>
  	  	  HAL_TIM_Base_Start_IT(&htim6);
 80013ec:	4b8d      	ldr	r3, [pc, #564]	; (8001624 <main+0x258>)
 80013ee:	0018      	movs	r0, r3
 80013f0:	f002 f81a 	bl	8003428 <HAL_TIM_Base_Start_IT>

  	  	  PP1_time = read_Flash((0x08007000));
 80013f4:	4b8c      	ldr	r3, [pc, #560]	; (8001628 <main+0x25c>)
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff f94c 	bl	8000694 <read_Flash>
 80013fc:	0002      	movs	r2, r0
 80013fe:	4b8b      	ldr	r3, [pc, #556]	; (800162c <main+0x260>)
 8001400:	601a      	str	r2, [r3, #0]
  	  	  OCB_time = read_Flash((0x08007000+4));
 8001402:	4b8b      	ldr	r3, [pc, #556]	; (8001630 <main+0x264>)
 8001404:	0018      	movs	r0, r3
 8001406:	f7ff f945 	bl	8000694 <read_Flash>
 800140a:	0002      	movs	r2, r0
 800140c:	4b89      	ldr	r3, [pc, #548]	; (8001634 <main+0x268>)
 800140e:	601a      	str	r2, [r3, #0]
  	  	  CTO_time = read_Flash((0x08007000+8));
 8001410:	4b89      	ldr	r3, [pc, #548]	; (8001638 <main+0x26c>)
 8001412:	0018      	movs	r0, r3
 8001414:	f7ff f93e 	bl	8000694 <read_Flash>
 8001418:	0002      	movs	r2, r0
 800141a:	4b88      	ldr	r3, [pc, #544]	; (800163c <main+0x270>)
 800141c:	601a      	str	r2, [r3, #0]
  	  	  RO_time = read_Flash((0x08007000+12));
 800141e:	4b88      	ldr	r3, [pc, #544]	; (8001640 <main+0x274>)
 8001420:	0018      	movs	r0, r3
 8001422:	f7ff f937 	bl	8000694 <read_Flash>
 8001426:	0002      	movs	r2, r0
 8001428:	4b86      	ldr	r3, [pc, #536]	; (8001644 <main+0x278>)
 800142a:	601a      	str	r2, [r3, #0]
  	  	  if(HAL_GPIO_ReadPin(PUMP_STATUS_PORT, PUMP_STATUS_PIN)){
 800142c:	2390      	movs	r3, #144	; 0x90
 800142e:	05db      	lsls	r3, r3, #23
 8001430:	2102      	movs	r1, #2
 8001432:	0018      	movs	r0, r3
 8001434:	f001 fb1e 	bl	8002a74 <HAL_GPIO_ReadPin>
 8001438:	1e03      	subs	r3, r0, #0
 800143a:	d006      	beq.n	800144a <main+0x7e>
  	  		  Machine_time_run = read_Flash((0x08007000+16));
 800143c:	4b82      	ldr	r3, [pc, #520]	; (8001648 <main+0x27c>)
 800143e:	0018      	movs	r0, r3
 8001440:	f7ff f928 	bl	8000694 <read_Flash>
 8001444:	0002      	movs	r2, r0
 8001446:	4b81      	ldr	r3, [pc, #516]	; (800164c <main+0x280>)
 8001448:	601a      	str	r2, [r3, #0]
  	  	  }

  		time_to_array(PP1_time,PP1_time_p);
 800144a:	4b78      	ldr	r3, [pc, #480]	; (800162c <main+0x260>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a80      	ldr	r2, [pc, #512]	; (8001650 <main+0x284>)
 8001450:	0011      	movs	r1, r2
 8001452:	0018      	movs	r0, r3
 8001454:	f7fe ffce 	bl	80003f4 <time_to_array>
  		time_to_array(OCB_time,OCB_time_p);
 8001458:	4b76      	ldr	r3, [pc, #472]	; (8001634 <main+0x268>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a7d      	ldr	r2, [pc, #500]	; (8001654 <main+0x288>)
 800145e:	0011      	movs	r1, r2
 8001460:	0018      	movs	r0, r3
 8001462:	f7fe ffc7 	bl	80003f4 <time_to_array>
  		time_to_array(CTO_time,CTO_time_p);
 8001466:	4b75      	ldr	r3, [pc, #468]	; (800163c <main+0x270>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a7b      	ldr	r2, [pc, #492]	; (8001658 <main+0x28c>)
 800146c:	0011      	movs	r1, r2
 800146e:	0018      	movs	r0, r3
 8001470:	f7fe ffc0 	bl	80003f4 <time_to_array>
  		time_to_array(RO_time,RO_time_p);
 8001474:	4b73      	ldr	r3, [pc, #460]	; (8001644 <main+0x278>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a78      	ldr	r2, [pc, #480]	; (800165c <main+0x290>)
 800147a:	0011      	movs	r1, r2
 800147c:	0018      	movs	r0, r3
 800147e:	f7fe ffb9 	bl	80003f4 <time_to_array>

  	  	HAL_GPIO_WritePin(LED7_A_PORT, LED7_A_PIN, GPIO_PIN_SET);
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	01db      	lsls	r3, r3, #7
 8001486:	4876      	ldr	r0, [pc, #472]	; (8001660 <main+0x294>)
 8001488:	2201      	movs	r2, #1
 800148a:	0019      	movs	r1, r3
 800148c:	f001 fb0f 	bl	8002aae <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(LED7_B_PORT, LED7_B_PIN, GPIO_PIN_SET);
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	4872      	ldr	r0, [pc, #456]	; (8001660 <main+0x294>)
 8001496:	2201      	movs	r2, #1
 8001498:	0019      	movs	r1, r3
 800149a:	f001 fb08 	bl	8002aae <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(LED7_C_PORT, LED7_C_PIN, GPIO_PIN_SET);
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	00d9      	lsls	r1, r3, #3
 80014a2:	2390      	movs	r3, #144	; 0x90
 80014a4:	05db      	lsls	r3, r3, #23
 80014a6:	2201      	movs	r2, #1
 80014a8:	0018      	movs	r0, r3
 80014aa:	f001 fb00 	bl	8002aae <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(LED7_D_PORT, LED7_D_PIN, GPIO_PIN_SET);
 80014ae:	2380      	movs	r3, #128	; 0x80
 80014b0:	0119      	lsls	r1, r3, #4
 80014b2:	2390      	movs	r3, #144	; 0x90
 80014b4:	05db      	lsls	r3, r3, #23
 80014b6:	2201      	movs	r2, #1
 80014b8:	0018      	movs	r0, r3
 80014ba:	f001 faf8 	bl	8002aae <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(LED7_E_PORT, LED7_E_PIN, GPIO_PIN_SET);
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	0159      	lsls	r1, r3, #5
 80014c2:	2390      	movs	r3, #144	; 0x90
 80014c4:	05db      	lsls	r3, r3, #23
 80014c6:	2201      	movs	r2, #1
 80014c8:	0018      	movs	r0, r3
 80014ca:	f001 faf0 	bl	8002aae <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(LED7_F_PORT, LED7_F_PIN, GPIO_PIN_SET);
 80014ce:	2380      	movs	r3, #128	; 0x80
 80014d0:	0059      	lsls	r1, r3, #1
 80014d2:	2390      	movs	r3, #144	; 0x90
 80014d4:	05db      	lsls	r3, r3, #23
 80014d6:	2201      	movs	r2, #1
 80014d8:	0018      	movs	r0, r3
 80014da:	f001 fae8 	bl	8002aae <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(LED7_G_PORT, LED7_G_PIN, GPIO_PIN_SET);
 80014de:	2380      	movs	r3, #128	; 0x80
 80014e0:	0099      	lsls	r1, r3, #2
 80014e2:	2390      	movs	r3, #144	; 0x90
 80014e4:	05db      	lsls	r3, r3, #23
 80014e6:	2201      	movs	r2, #1
 80014e8:	0018      	movs	r0, r3
 80014ea:	f001 fae0 	bl	8002aae <HAL_GPIO_WritePin>

  	  	HAL_GPIO_WritePin(LED7_1_PORT, LED7_1_PIN, GPIO_PIN_SET);
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	019b      	lsls	r3, r3, #6
 80014f2:	485b      	ldr	r0, [pc, #364]	; (8001660 <main+0x294>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	0019      	movs	r1, r3
 80014f8:	f001 fad9 	bl	8002aae <HAL_GPIO_WritePin>
  	  	HAL_Delay(500);
 80014fc:	23fa      	movs	r3, #250	; 0xfa
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	0018      	movs	r0, r3
 8001502:	f000 fe45 	bl	8002190 <HAL_Delay>
  	  	HAL_GPIO_WritePin(LED7_2_PORT, LED7_2_PIN, GPIO_PIN_SET);
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	015b      	lsls	r3, r3, #5
 800150a:	4855      	ldr	r0, [pc, #340]	; (8001660 <main+0x294>)
 800150c:	2201      	movs	r2, #1
 800150e:	0019      	movs	r1, r3
 8001510:	f001 facd 	bl	8002aae <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_1_PORT, LED7_1_PIN, GPIO_PIN_RESET);
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	019b      	lsls	r3, r3, #6
 8001518:	4851      	ldr	r0, [pc, #324]	; (8001660 <main+0x294>)
 800151a:	2200      	movs	r2, #0
 800151c:	0019      	movs	r1, r3
 800151e:	f001 fac6 	bl	8002aae <HAL_GPIO_WritePin>
  	  	HAL_Delay(500);
 8001522:	23fa      	movs	r3, #250	; 0xfa
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	0018      	movs	r0, r3
 8001528:	f000 fe32 	bl	8002190 <HAL_Delay>
  	  	HAL_GPIO_WritePin(LED7_3_PORT, LED7_3_PIN, GPIO_PIN_SET);
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	011b      	lsls	r3, r3, #4
 8001530:	484b      	ldr	r0, [pc, #300]	; (8001660 <main+0x294>)
 8001532:	2201      	movs	r2, #1
 8001534:	0019      	movs	r1, r3
 8001536:	f001 faba 	bl	8002aae <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_2_PORT, LED7_2_PIN, GPIO_PIN_RESET);
 800153a:	2380      	movs	r3, #128	; 0x80
 800153c:	015b      	lsls	r3, r3, #5
 800153e:	4848      	ldr	r0, [pc, #288]	; (8001660 <main+0x294>)
 8001540:	2200      	movs	r2, #0
 8001542:	0019      	movs	r1, r3
 8001544:	f001 fab3 	bl	8002aae <HAL_GPIO_WritePin>
  	  	HAL_Delay(500);
 8001548:	23fa      	movs	r3, #250	; 0xfa
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	0018      	movs	r0, r3
 800154e:	f000 fe1f 	bl	8002190 <HAL_Delay>
  	  HAL_GPIO_WritePin(LED7_3_PORT, LED7_3_PIN, GPIO_PIN_RESET);
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	4842      	ldr	r0, [pc, #264]	; (8001660 <main+0x294>)
 8001558:	2200      	movs	r2, #0
 800155a:	0019      	movs	r1, r3
 800155c:	f001 faa7 	bl	8002aae <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_A_PORT, LED7_A_PIN, GPIO_PIN_RESET);
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	01db      	lsls	r3, r3, #7
 8001564:	483e      	ldr	r0, [pc, #248]	; (8001660 <main+0x294>)
 8001566:	2200      	movs	r2, #0
 8001568:	0019      	movs	r1, r3
 800156a:	f001 faa0 	bl	8002aae <HAL_GPIO_WritePin>
  	  	 HAL_GPIO_WritePin(LED7_B_PORT, LED7_B_PIN, GPIO_PIN_RESET);
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	021b      	lsls	r3, r3, #8
 8001572:	483b      	ldr	r0, [pc, #236]	; (8001660 <main+0x294>)
 8001574:	2200      	movs	r2, #0
 8001576:	0019      	movs	r1, r3
 8001578:	f001 fa99 	bl	8002aae <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(LED7_C_PORT, LED7_C_PIN, GPIO_PIN_RESET);
 800157c:	2380      	movs	r3, #128	; 0x80
 800157e:	00d9      	lsls	r1, r3, #3
 8001580:	2390      	movs	r3, #144	; 0x90
 8001582:	05db      	lsls	r3, r3, #23
 8001584:	2200      	movs	r2, #0
 8001586:	0018      	movs	r0, r3
 8001588:	f001 fa91 	bl	8002aae <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(LED7_D_PORT, LED7_D_PIN, GPIO_PIN_RESET);
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	0119      	lsls	r1, r3, #4
 8001590:	2390      	movs	r3, #144	; 0x90
 8001592:	05db      	lsls	r3, r3, #23
 8001594:	2200      	movs	r2, #0
 8001596:	0018      	movs	r0, r3
 8001598:	f001 fa89 	bl	8002aae <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(LED7_E_PORT, LED7_E_PIN, GPIO_PIN_RESET);
 800159c:	2380      	movs	r3, #128	; 0x80
 800159e:	0159      	lsls	r1, r3, #5
 80015a0:	2390      	movs	r3, #144	; 0x90
 80015a2:	05db      	lsls	r3, r3, #23
 80015a4:	2200      	movs	r2, #0
 80015a6:	0018      	movs	r0, r3
 80015a8:	f001 fa81 	bl	8002aae <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(LED7_F_PORT, LED7_F_PIN, GPIO_PIN_RESET);
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	0059      	lsls	r1, r3, #1
 80015b0:	2390      	movs	r3, #144	; 0x90
 80015b2:	05db      	lsls	r3, r3, #23
 80015b4:	2200      	movs	r2, #0
 80015b6:	0018      	movs	r0, r3
 80015b8:	f001 fa79 	bl	8002aae <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(LED7_G_PORT, LED7_G_PIN, GPIO_PIN_RESET);
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	0099      	lsls	r1, r3, #2
 80015c0:	2390      	movs	r3, #144	; 0x90
 80015c2:	05db      	lsls	r3, r3, #23
 80015c4:	2200      	movs	r2, #0
 80015c6:	0018      	movs	r0, r3
 80015c8:	f001 fa71 	bl	8002aae <HAL_GPIO_WritePin>
  	 HAL_Delay(500);
 80015cc:	23fa      	movs	r3, #250	; 0xfa
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	0018      	movs	r0, r3
 80015d2:	f000 fddd 	bl	8002190 <HAL_Delay>
//
//	 	  			IWDG->KR = 0xAAAA;
//	 	  			watch_Dog_Flag = 0;
//	 	  		}

	  if (Write_Flash_flag){
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <main+0x298>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <main+0x21e>
		  led_tank_full_flag =0;
 80015de:	4b22      	ldr	r3, [pc, #136]	; (8001668 <main+0x29c>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
		  led_tank_full_flag_off =0;
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <main+0x2a0>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
	  }
	  out_time_fillter();
 80015ea:	f7ff fce3 	bl	8000fb4 <out_time_fillter>
	  increase_time(&pump_status_flag);
 80015ee:	4b20      	ldr	r3, [pc, #128]	; (8001670 <main+0x2a4>)
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7fe ff85 	bl	8000500 <increase_time>
	  display();
 80015f6:	f7ff f9cb 	bl	8000990 <display>
	  display_erro();
 80015fa:	f7ff faf7 	bl	8000bec <display_erro>
	  on_end_display(&end_display_flag);
 80015fe:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <main+0x2a8>)
 8001600:	0018      	movs	r0, r3
 8001602:	f7ff fd91 	bl	8001128 <on_end_display>
  	  led_fan_action(&led_fan_flag);
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <main+0x2ac>)
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff fdcf 	bl	80011ac <led_fan_action>
	  led_tanks_full();
 800160e:	f7ff fe4b 	bl	80012a8 <led_tanks_full>
	  clear_timer_fillter();
 8001612:	f7ff fa0f 	bl	8000a34 <clear_timer_fillter>
	  check_out_time_machine();
 8001616:	f7ff f95d 	bl	80008d4 <check_out_time_machine>
//	  if(watch_Dog_Flag){
//	  HAL_WWDG_Refresh(&hwwdg);
//	  watch_Dog_Flag =0;
//	  }
	  write_Flash_Timer();
 800161a:	f7ff f98f 	bl	800093c <write_Flash_Timer>
	  if (Write_Flash_flag){
 800161e:	e7da      	b.n	80015d6 <main+0x20a>
 8001620:	20000134 	.word	0x20000134
 8001624:	2000017c 	.word	0x2000017c
 8001628:	08007000 	.word	0x08007000
 800162c:	20000178 	.word	0x20000178
 8001630:	08007004 	.word	0x08007004
 8001634:	20000120 	.word	0x20000120
 8001638:	08007008 	.word	0x08007008
 800163c:	200001c0 	.word	0x200001c0
 8001640:	0800700c 	.word	0x0800700c
 8001644:	2000012c 	.word	0x2000012c
 8001648:	08007010 	.word	0x08007010
 800164c:	200001c4 	.word	0x200001c4
 8001650:	20000128 	.word	0x20000128
 8001654:	200001c8 	.word	0x200001c8
 8001658:	20000130 	.word	0x20000130
 800165c:	200001bc 	.word	0x200001bc
 8001660:	48000400 	.word	0x48000400
 8001664:	200001d0 	.word	0x200001d0
 8001668:	200001de 	.word	0x200001de
 800166c:	200001d8 	.word	0x200001d8
 8001670:	200001cb 	.word	0x200001cb
 8001674:	2000011c 	.word	0x2000011c
 8001678:	200001d1 	.word	0x200001d1

0800167c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800167c:	b590      	push	{r4, r7, lr}
 800167e:	b091      	sub	sp, #68	; 0x44
 8001680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	2410      	movs	r4, #16
 8001684:	193b      	adds	r3, r7, r4
 8001686:	0018      	movs	r0, r3
 8001688:	2330      	movs	r3, #48	; 0x30
 800168a:	001a      	movs	r2, r3
 800168c:	2100      	movs	r1, #0
 800168e:	f002 fa85 	bl	8003b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001692:	003b      	movs	r3, r7
 8001694:	0018      	movs	r0, r3
 8001696:	2310      	movs	r3, #16
 8001698:	001a      	movs	r2, r3
 800169a:	2100      	movs	r1, #0
 800169c:	f002 fa7e 	bl	8003b9c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a6:	193b      	adds	r3, r7, r4
 80016a8:	2201      	movs	r2, #1
 80016aa:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016ac:	193b      	adds	r3, r7, r4
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b2:	193b      	adds	r3, r7, r4
 80016b4:	0018      	movs	r0, r3
 80016b6:	f001 fa3d 	bl	8002b34 <HAL_RCC_OscConfig>
 80016ba:	1e03      	subs	r3, r0, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80016be:	f000 f959 	bl	8001974 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c2:	003b      	movs	r3, r7
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80016c8:	003b      	movs	r3, r7
 80016ca:	2201      	movs	r2, #1
 80016cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ce:	003b      	movs	r3, r7
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016d4:	003b      	movs	r3, r7
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016da:	003b      	movs	r3, r7
 80016dc:	2100      	movs	r1, #0
 80016de:	0018      	movs	r0, r3
 80016e0:	f001 fd44 	bl	800316c <HAL_RCC_ClockConfig>
 80016e4:	1e03      	subs	r3, r0, #0
 80016e6:	d001      	beq.n	80016ec <SystemClock_Config+0x70>
  {
    Error_Handler();
 80016e8:	f000 f944 	bl	8001974 <Error_Handler>
  }
}
 80016ec:	46c0      	nop			; (mov r8, r8)
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b011      	add	sp, #68	; 0x44
 80016f2:	bd90      	pop	{r4, r7, pc}

080016f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fa:	2308      	movs	r3, #8
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	0018      	movs	r0, r3
 8001700:	2310      	movs	r3, #16
 8001702:	001a      	movs	r2, r3
 8001704:	2100      	movs	r1, #0
 8001706:	f002 fa49 	bl	8003b9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800170a:	003b      	movs	r3, r7
 800170c:	0018      	movs	r0, r3
 800170e:	2308      	movs	r3, #8
 8001710:	001a      	movs	r2, r3
 8001712:	2100      	movs	r1, #0
 8001714:	f002 fa42 	bl	8003b9c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001718:	4b1e      	ldr	r3, [pc, #120]	; (8001794 <MX_TIM3_Init+0xa0>)
 800171a:	4a1f      	ldr	r2, [pc, #124]	; (8001798 <MX_TIM3_Init+0xa4>)
 800171c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 800171e:	4b1d      	ldr	r3, [pc, #116]	; (8001794 <MX_TIM3_Init+0xa0>)
 8001720:	4a1e      	ldr	r2, [pc, #120]	; (800179c <MX_TIM3_Init+0xa8>)
 8001722:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <MX_TIM3_Init+0xa0>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <MX_TIM3_Init+0xa0>)
 800172c:	2209      	movs	r2, #9
 800172e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001730:	4b18      	ldr	r3, [pc, #96]	; (8001794 <MX_TIM3_Init+0xa0>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001736:	4b17      	ldr	r3, [pc, #92]	; (8001794 <MX_TIM3_Init+0xa0>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800173c:	4b15      	ldr	r3, [pc, #84]	; (8001794 <MX_TIM3_Init+0xa0>)
 800173e:	0018      	movs	r0, r3
 8001740:	f001 fe46 	bl	80033d0 <HAL_TIM_Base_Init>
 8001744:	1e03      	subs	r3, r0, #0
 8001746:	d001      	beq.n	800174c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001748:	f000 f914 	bl	8001974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800174c:	2108      	movs	r1, #8
 800174e:	187b      	adds	r3, r7, r1
 8001750:	2280      	movs	r2, #128	; 0x80
 8001752:	0152      	lsls	r2, r2, #5
 8001754:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001756:	187a      	adds	r2, r7, r1
 8001758:	4b0e      	ldr	r3, [pc, #56]	; (8001794 <MX_TIM3_Init+0xa0>)
 800175a:	0011      	movs	r1, r2
 800175c:	0018      	movs	r0, r3
 800175e:	f001 ff9b 	bl	8003698 <HAL_TIM_ConfigClockSource>
 8001762:	1e03      	subs	r3, r0, #0
 8001764:	d001      	beq.n	800176a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001766:	f000 f905 	bl	8001974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800176a:	003b      	movs	r3, r7
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001770:	003b      	movs	r3, r7
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001776:	003a      	movs	r2, r7
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_TIM3_Init+0xa0>)
 800177a:	0011      	movs	r1, r2
 800177c:	0018      	movs	r0, r3
 800177e:	f002 f981 	bl	8003a84 <HAL_TIMEx_MasterConfigSynchronization>
 8001782:	1e03      	subs	r3, r0, #0
 8001784:	d001      	beq.n	800178a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001786:	f000 f8f5 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	46bd      	mov	sp, r7
 800178e:	b006      	add	sp, #24
 8001790:	bd80      	pop	{r7, pc}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	20000134 	.word	0x20000134
 8001798:	40000400 	.word	0x40000400
 800179c:	0000031f 	.word	0x0000031f

080017a0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <MX_TIM6_Init+0x3c>)
 80017a6:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <MX_TIM6_Init+0x40>)
 80017a8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000;
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <MX_TIM6_Init+0x3c>)
 80017ac:	22fa      	movs	r2, #250	; 0xfa
 80017ae:	0152      	lsls	r2, r2, #5
 80017b0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <MX_TIM6_Init+0x3c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <MX_TIM6_Init+0x3c>)
 80017ba:	22fa      	movs	r2, #250	; 0xfa
 80017bc:	0092      	lsls	r2, r2, #2
 80017be:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b06      	ldr	r3, [pc, #24]	; (80017dc <MX_TIM6_Init+0x3c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017c6:	4b05      	ldr	r3, [pc, #20]	; (80017dc <MX_TIM6_Init+0x3c>)
 80017c8:	0018      	movs	r0, r3
 80017ca:	f001 fe01 	bl	80033d0 <HAL_TIM_Base_Init>
 80017ce:	1e03      	subs	r3, r0, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM6_Init+0x36>
  {
    Error_Handler();
 80017d2:	f000 f8cf 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	2000017c 	.word	0x2000017c
 80017e0:	40001000 	.word	0x40001000

080017e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ea:	240c      	movs	r4, #12
 80017ec:	193b      	adds	r3, r7, r4
 80017ee:	0018      	movs	r0, r3
 80017f0:	2314      	movs	r3, #20
 80017f2:	001a      	movs	r2, r3
 80017f4:	2100      	movs	r1, #0
 80017f6:	f002 f9d1 	bl	8003b9c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017fa:	4b59      	ldr	r3, [pc, #356]	; (8001960 <MX_GPIO_Init+0x17c>)
 80017fc:	695a      	ldr	r2, [r3, #20]
 80017fe:	4b58      	ldr	r3, [pc, #352]	; (8001960 <MX_GPIO_Init+0x17c>)
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	03c9      	lsls	r1, r1, #15
 8001804:	430a      	orrs	r2, r1
 8001806:	615a      	str	r2, [r3, #20]
 8001808:	4b55      	ldr	r3, [pc, #340]	; (8001960 <MX_GPIO_Init+0x17c>)
 800180a:	695a      	ldr	r2, [r3, #20]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	03db      	lsls	r3, r3, #15
 8001810:	4013      	ands	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	4b52      	ldr	r3, [pc, #328]	; (8001960 <MX_GPIO_Init+0x17c>)
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	4b51      	ldr	r3, [pc, #324]	; (8001960 <MX_GPIO_Init+0x17c>)
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	0289      	lsls	r1, r1, #10
 8001820:	430a      	orrs	r2, r1
 8001822:	615a      	str	r2, [r3, #20]
 8001824:	4b4e      	ldr	r3, [pc, #312]	; (8001960 <MX_GPIO_Init+0x17c>)
 8001826:	695a      	ldr	r2, [r3, #20]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	029b      	lsls	r3, r3, #10
 800182c:	4013      	ands	r3, r2
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	4b4b      	ldr	r3, [pc, #300]	; (8001960 <MX_GPIO_Init+0x17c>)
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	4b4a      	ldr	r3, [pc, #296]	; (8001960 <MX_GPIO_Init+0x17c>)
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	02c9      	lsls	r1, r1, #11
 800183c:	430a      	orrs	r2, r1
 800183e:	615a      	str	r2, [r3, #20]
 8001840:	4b47      	ldr	r3, [pc, #284]	; (8001960 <MX_GPIO_Init+0x17c>)
 8001842:	695a      	ldr	r2, [r3, #20]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	02db      	lsls	r3, r3, #11
 8001848:	4013      	ands	r3, r2
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_3 
 800184e:	4945      	ldr	r1, [pc, #276]	; (8001964 <MX_GPIO_Init+0x180>)
 8001850:	4b45      	ldr	r3, [pc, #276]	; (8001968 <MX_GPIO_Init+0x184>)
 8001852:	2201      	movs	r2, #1
 8001854:	0018      	movs	r0, r3
 8001856:	f001 f92a 	bl	8002aae <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 800185a:	23f8      	movs	r3, #248	; 0xf8
 800185c:	021b      	lsls	r3, r3, #8
 800185e:	4842      	ldr	r0, [pc, #264]	; (8001968 <MX_GPIO_Init+0x184>)
 8001860:	2200      	movs	r2, #0
 8001862:	0019      	movs	r1, r3
 8001864:	f001 f923 	bl	8002aae <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001868:	23f8      	movs	r3, #248	; 0xf8
 800186a:	0159      	lsls	r1, r3, #5
 800186c:	2390      	movs	r3, #144	; 0x90
 800186e:	05db      	lsls	r3, r3, #23
 8001870:	2200      	movs	r2, #0
 8001872:	0018      	movs	r0, r3
 8001874:	f001 f91b 	bl	8002aae <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001878:	193b      	adds	r3, r7, r4
 800187a:	2203      	movs	r2, #3
 800187c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187e:	193b      	adds	r3, r7, r4
 8001880:	2200      	movs	r2, #0
 8001882:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001884:	193b      	adds	r3, r7, r4
 8001886:	2202      	movs	r2, #2
 8001888:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188a:	193a      	adds	r2, r7, r4
 800188c:	2390      	movs	r3, #144	; 0x90
 800188e:	05db      	lsls	r3, r3, #23
 8001890:	0011      	movs	r1, r2
 8001892:	0018      	movs	r0, r3
 8001894:	f000 ff7e 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 
                           PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8001898:	193b      	adds	r3, r7, r4
 800189a:	227c      	movs	r2, #124	; 0x7c
 800189c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800189e:	193b      	adds	r3, r7, r4
 80018a0:	4a32      	ldr	r2, [pc, #200]	; (800196c <MX_GPIO_Init+0x188>)
 80018a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	193b      	adds	r3, r7, r4
 80018a6:	2200      	movs	r2, #0
 80018a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	193a      	adds	r2, r7, r4
 80018ac:	2390      	movs	r3, #144	; 0x90
 80018ae:	05db      	lsls	r3, r3, #23
 80018b0:	0011      	movs	r1, r2
 80018b2:	0018      	movs	r0, r3
 80018b4:	f000 ff6e 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 
                           PB12 PB13 PB14 PB15 
                           PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 80018b8:	0021      	movs	r1, r4
 80018ba:	187b      	adds	r3, r7, r1
 80018bc:	4a2c      	ldr	r2, [pc, #176]	; (8001970 <MX_GPIO_Init+0x18c>)
 80018be:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	187b      	adds	r3, r7, r1
 80018c2:	2201      	movs	r2, #1
 80018c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	187b      	adds	r3, r7, r1
 80018c8:	2200      	movs	r2, #0
 80018ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018cc:	187b      	adds	r3, r7, r1
 80018ce:	2200      	movs	r2, #0
 80018d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	000c      	movs	r4, r1
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	4a24      	ldr	r2, [pc, #144]	; (8001968 <MX_GPIO_Init+0x184>)
 80018d8:	0019      	movs	r1, r3
 80018da:	0010      	movs	r0, r2
 80018dc:	f000 ff5a 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80018e0:	0021      	movs	r1, r4
 80018e2:	187b      	adds	r3, r7, r1
 80018e4:	22e0      	movs	r2, #224	; 0xe0
 80018e6:	00d2      	lsls	r2, r2, #3
 80018e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	2201      	movs	r2, #1
 80018ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	2201      	movs	r2, #1
 80018fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	000c      	movs	r4, r1
 80018fe:	187a      	adds	r2, r7, r1
 8001900:	2390      	movs	r3, #144	; 0x90
 8001902:	05db      	lsls	r3, r3, #23
 8001904:	0011      	movs	r1, r2
 8001906:	0018      	movs	r0, r3
 8001908:	f000 ff44 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800190c:	0021      	movs	r1, r4
 800190e:	187b      	adds	r3, r7, r1
 8001910:	22c0      	movs	r2, #192	; 0xc0
 8001912:	0152      	lsls	r2, r2, #5
 8001914:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	187b      	adds	r3, r7, r1
 8001918:	2201      	movs	r2, #1
 800191a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800191c:	187b      	adds	r3, r7, r1
 800191e:	2202      	movs	r2, #2
 8001920:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001922:	187b      	adds	r3, r7, r1
 8001924:	2201      	movs	r2, #1
 8001926:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	187a      	adds	r2, r7, r1
 800192a:	2390      	movs	r3, #144	; 0x90
 800192c:	05db      	lsls	r3, r3, #23
 800192e:	0011      	movs	r1, r2
 8001930:	0018      	movs	r0, r3
 8001932:	f000 ff2f 	bl	8002794 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	2006      	movs	r0, #6
 800193c:	f000 fcf6 	bl	800232c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001940:	2006      	movs	r0, #6
 8001942:	f000 fd08 	bl	8002356 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2007      	movs	r0, #7
 800194c:	f000 fcee 	bl	800232c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001950:	2007      	movs	r0, #7
 8001952:	f000 fd00 	bl	8002356 <HAL_NVIC_EnableIRQ>

}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b009      	add	sp, #36	; 0x24
 800195c:	bd90      	pop	{r4, r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	40021000 	.word	0x40021000
 8001964:	000007fb 	.word	0x000007fb
 8001968:	48000400 	.word	0x48000400
 800196c:	10310000 	.word	0x10310000
 8001970:	0000fffb 	.word	0x0000fffb

08001974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001978:	46c0      	nop			; (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_MspInit+0x44>)
 8001988:	699a      	ldr	r2, [r3, #24]
 800198a:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_MspInit+0x44>)
 800198c:	2101      	movs	r1, #1
 800198e:	430a      	orrs	r2, r1
 8001990:	619a      	str	r2, [r3, #24]
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_MspInit+0x44>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2201      	movs	r2, #1
 8001998:	4013      	ands	r3, r2
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_MspInit+0x44>)
 80019a0:	69da      	ldr	r2, [r3, #28]
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_MspInit+0x44>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	0549      	lsls	r1, r1, #21
 80019a8:	430a      	orrs	r2, r1
 80019aa:	61da      	str	r2, [r3, #28]
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <HAL_MspInit+0x44>)
 80019ae:	69da      	ldr	r2, [r3, #28]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	055b      	lsls	r3, r3, #21
 80019b4:	4013      	ands	r3, r2
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	46bd      	mov	sp, r7
 80019be:	b002      	add	sp, #8
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	40021000 	.word	0x40021000

080019c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1a      	ldr	r2, [pc, #104]	; (8001a40 <HAL_TIM_Base_MspInit+0x78>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d114      	bne.n	8001a04 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <HAL_TIM_Base_MspInit+0x7c>)
 80019dc:	69da      	ldr	r2, [r3, #28]
 80019de:	4b19      	ldr	r3, [pc, #100]	; (8001a44 <HAL_TIM_Base_MspInit+0x7c>)
 80019e0:	2102      	movs	r1, #2
 80019e2:	430a      	orrs	r2, r1
 80019e4:	61da      	str	r2, [r3, #28]
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <HAL_TIM_Base_MspInit+0x7c>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	2202      	movs	r2, #2
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2010      	movs	r0, #16
 80019f8:	f000 fc98 	bl	800232c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019fc:	2010      	movs	r0, #16
 80019fe:	f000 fcaa 	bl	8002356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001a02:	e018      	b.n	8001a36 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0f      	ldr	r2, [pc, #60]	; (8001a48 <HAL_TIM_Base_MspInit+0x80>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d113      	bne.n	8001a36 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a0e:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <HAL_TIM_Base_MspInit+0x7c>)
 8001a10:	69da      	ldr	r2, [r3, #28]
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_TIM_Base_MspInit+0x7c>)
 8001a14:	2110      	movs	r1, #16
 8001a16:	430a      	orrs	r2, r1
 8001a18:	61da      	str	r2, [r3, #28]
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_TIM_Base_MspInit+0x7c>)
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	2210      	movs	r2, #16
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2011      	movs	r0, #17
 8001a2c:	f000 fc7e 	bl	800232c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001a30:	2011      	movs	r0, #17
 8001a32:	f000 fc90 	bl	8002356 <HAL_NVIC_EnableIRQ>
}
 8001a36:	46c0      	nop			; (mov r8, r8)
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b004      	add	sp, #16
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	40000400 	.word	0x40000400
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40001000 	.word	0x40001000

08001a4c <timer>:

/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim6;
/* USER CODE BEGIN EV */
void timer(uint8_t trigger,uint8_t* flag,int* cnt,int interval){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	603b      	str	r3, [r7, #0]
 8001a58:	210f      	movs	r1, #15
 8001a5a:	187b      	adds	r3, r7, r1
 8001a5c:	1c02      	adds	r2, r0, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
	  if (trigger) {
 8001a60:	187b      	adds	r3, r7, r1
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <timer+0x28>
		  (*cnt)++;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	1c5a      	adds	r2, r3, #1
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	e002      	b.n	8001a7a <timer+0x2e>
	  } else {
		  *cnt=0;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
	  }
	  if (*cnt==interval){
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d105      	bne.n	8001a90 <timer+0x44>
		  *flag=1;
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
		  *cnt=0;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
	  }
}
 8001a90:	46c0      	nop			; (mov r8, r8)
 8001a92:	46bd      	mov	sp, r7
 8001a94:	b004      	add	sp, #16
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <timer2>:
void timer2(uint8_t trigger,uint8_t* flag1,uint8_t* flag2, int* cnt,int interval){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	210f      	movs	r1, #15
 8001aa6:	187b      	adds	r3, r7, r1
 8001aa8:	1c02      	adds	r2, r0, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
	  if (trigger) {
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <timer2+0x28>
		  (*cnt)++;
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	1c5a      	adds	r2, r3, #1
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	e002      	b.n	8001ac6 <timer2+0x2e>
	  } else {
		  *cnt=0;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
	  }
	  if (*cnt==interval){
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d109      	bne.n	8001ae4 <timer2+0x4c>
		  *flag1=0;
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	701a      	strb	r2, [r3, #0]
		  *flag2=1;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
		  *cnt=0;
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	601a      	str	r2, [r3, #0]
	  }	else if (*cnt==interval-2) {
		  *flag1=1;
		 *flag2=0;

	}
}
 8001ae2:	e00b      	b.n	8001afc <timer2+0x64>
	  }	else if (*cnt==interval-2) {
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	3b02      	subs	r3, #2
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d105      	bne.n	8001afc <timer2+0x64>
		  *flag1=1;
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
		 *flag2=0;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
}
 8001afc:	46c0      	nop			; (mov r8, r8)
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b004      	add	sp, #16
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001b08:	46c0      	nop			; (mov r8, r8)
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	Ghi_data(0x08007000, 0x08007FFF);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <HardFault_Handler+0x4>

08001b14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b18:	46c0      	nop			; (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b2c:	f000 fb14 	bl	8002158 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b30:	46c0      	nop			; (mov r8, r8)
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  if((clr_button_trigger= HAL_GPIO_ReadPin(CLR_BUTTON_PORT, CLR_BUTTON_PIN))){
 8001b3c:	2390      	movs	r3, #144	; 0x90
 8001b3e:	05db      	lsls	r3, r3, #23
 8001b40:	2104      	movs	r1, #4
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 ff96 	bl	8002a74 <HAL_GPIO_ReadPin>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <EXTI2_3_IRQHandler+0xa0>)
 8001b4e:	701a      	strb	r2, [r3, #0]
 8001b50:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <EXTI2_3_IRQHandler+0xa0>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <EXTI2_3_IRQHandler+0x32>
	  out_time_machine_trigger = 0;
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <EXTI2_3_IRQHandler+0xa4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
	  out_time_machine_cnt = 0;
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <EXTI2_3_IRQHandler+0xa8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
	  out_time_machine_flag = 0;
 8001b64:	4b1f      	ldr	r3, [pc, #124]	; (8001be4 <EXTI2_3_IRQHandler+0xac>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	701a      	strb	r2, [r3, #0]

  }

  if ((ro_button_trigger=HAL_GPIO_ReadPin(RO_BUTTON_PORT, RO_BUTTON_PIN))) {
 8001b6a:	2390      	movs	r3, #144	; 0x90
 8001b6c:	05db      	lsls	r3, r3, #23
 8001b6e:	2108      	movs	r1, #8
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 ff7f 	bl	8002a74 <HAL_GPIO_ReadPin>
 8001b76:	0003      	movs	r3, r0
 8001b78:	001a      	movs	r2, r3
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <EXTI2_3_IRQHandler+0xb0>)
 8001b7c:	701a      	strb	r2, [r3, #0]
 8001b7e:	4b1a      	ldr	r3, [pc, #104]	; (8001be8 <EXTI2_3_IRQHandler+0xb0>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01e      	beq.n	8001bc4 <EXTI2_3_IRQHandler+0x8c>
	  cto_button_flag = pp1_button_flag = ocb_button_flag =  water_input_flag = 0;
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <EXTI2_3_IRQHandler+0xb4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <EXTI2_3_IRQHandler+0xb4>)
 8001b8e:	781a      	ldrb	r2, [r3, #0]
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <EXTI2_3_IRQHandler+0xb8>)
 8001b92:	701a      	strb	r2, [r3, #0]
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EXTI2_3_IRQHandler+0xb8>)
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <EXTI2_3_IRQHandler+0xbc>)
 8001b9a:	701a      	strb	r2, [r3, #0]
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <EXTI2_3_IRQHandler+0xbc>)
 8001b9e:	781a      	ldrb	r2, [r3, #0]
 8001ba0:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <EXTI2_3_IRQHandler+0xc0>)
 8001ba2:	701a      	strb	r2, [r3, #0]
	  end_display_flag=0;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <EXTI2_3_IRQHandler+0xc4>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
	  erro_dislay_trigger =0;
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <EXTI2_3_IRQHandler+0xc8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
	  time_to_array(RO_time, RO_time_p);
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <EXTI2_3_IRQHandler+0xcc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a14      	ldr	r2, [pc, #80]	; (8001c08 <EXTI2_3_IRQHandler+0xd0>)
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f7fe fc1b 	bl	80003f4 <time_to_array>
	  lock_end_dislay_flag =1;
 8001bbe:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <EXTI2_3_IRQHandler+0xd4>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001bc4:	2004      	movs	r0, #4
 8001bc6:	f000 ff8f 	bl	8002ae8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001bca:	2008      	movs	r0, #8
 8001bcc:	f000 ff8c 	bl	8002ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001bd0:	46c0      	nop			; (mov r8, r8)
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	46c0      	nop			; (mov r8, r8)
 8001bd8:	20000114 	.word	0x20000114
 8001bdc:	200001d9 	.word	0x200001d9
 8001be0:	200000e8 	.word	0x200000e8
 8001be4:	200001d3 	.word	0x200001d3
 8001be8:	20000115 	.word	0x20000115
 8001bec:	200001e3 	.word	0x200001e3
 8001bf0:	200001cc 	.word	0x200001cc
 8001bf4:	200001ea 	.word	0x200001ea
 8001bf8:	200001e9 	.word	0x200001e9
 8001bfc:	2000011c 	.word	0x2000011c
 8001c00:	200001d6 	.word	0x200001d6
 8001c04:	2000012c 	.word	0x2000012c
 8001c08:	200001bc 	.word	0x200001bc
 8001c0c:	200001cd 	.word	0x200001cd

08001c10 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  if ((cto_button_trigger=HAL_GPIO_ReadPin(CTO_BUTTON_PORT, CTO_BUTTON_PIN))){
 8001c14:	2390      	movs	r3, #144	; 0x90
 8001c16:	05db      	lsls	r3, r3, #23
 8001c18:	2110      	movs	r1, #16
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f000 ff2a 	bl	8002a74 <HAL_GPIO_ReadPin>
 8001c20:	0003      	movs	r3, r0
 8001c22:	001a      	movs	r2, r3
 8001c24:	4b45      	ldr	r3, [pc, #276]	; (8001d3c <EXTI4_15_IRQHandler+0x12c>)
 8001c26:	701a      	strb	r2, [r3, #0]
 8001c28:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <EXTI4_15_IRQHandler+0x12c>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01e      	beq.n	8001c6e <EXTI4_15_IRQHandler+0x5e>
	  ro_button_flag = ocb_button_flag = pp1_button_flag = water_input_flag=0;
 8001c30:	4b43      	ldr	r3, [pc, #268]	; (8001d40 <EXTI4_15_IRQHandler+0x130>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	4b42      	ldr	r3, [pc, #264]	; (8001d40 <EXTI4_15_IRQHandler+0x130>)
 8001c38:	781a      	ldrb	r2, [r3, #0]
 8001c3a:	4b42      	ldr	r3, [pc, #264]	; (8001d44 <EXTI4_15_IRQHandler+0x134>)
 8001c3c:	701a      	strb	r2, [r3, #0]
 8001c3e:	4b41      	ldr	r3, [pc, #260]	; (8001d44 <EXTI4_15_IRQHandler+0x134>)
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <EXTI4_15_IRQHandler+0x138>)
 8001c44:	701a      	strb	r2, [r3, #0]
 8001c46:	4b40      	ldr	r3, [pc, #256]	; (8001d48 <EXTI4_15_IRQHandler+0x138>)
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	4b40      	ldr	r3, [pc, #256]	; (8001d4c <EXTI4_15_IRQHandler+0x13c>)
 8001c4c:	701a      	strb	r2, [r3, #0]
	  lock_end_dislay_flag =1;
 8001c4e:	4b40      	ldr	r3, [pc, #256]	; (8001d50 <EXTI4_15_IRQHandler+0x140>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
	  end_display_flag =0;
 8001c54:	4b3f      	ldr	r3, [pc, #252]	; (8001d54 <EXTI4_15_IRQHandler+0x144>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
	  erro_dislay_trigger =0;
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	; (8001d58 <EXTI4_15_IRQHandler+0x148>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
	  time_to_array(CTO_time, CTO_time_p);
 8001c60:	4b3e      	ldr	r3, [pc, #248]	; (8001d5c <EXTI4_15_IRQHandler+0x14c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a3e      	ldr	r2, [pc, #248]	; (8001d60 <EXTI4_15_IRQHandler+0x150>)
 8001c66:	0011      	movs	r1, r2
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f7fe fbc3 	bl	80003f4 <time_to_array>


  }

  if ((ocb_button_trigger=HAL_GPIO_ReadPin(OCB_BUTTON_PORT, OCB_BUTTON_PIN))){
 8001c6e:	2390      	movs	r3, #144	; 0x90
 8001c70:	05db      	lsls	r3, r3, #23
 8001c72:	2120      	movs	r1, #32
 8001c74:	0018      	movs	r0, r3
 8001c76:	f000 fefd 	bl	8002a74 <HAL_GPIO_ReadPin>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	001a      	movs	r2, r3
 8001c7e:	4b39      	ldr	r3, [pc, #228]	; (8001d64 <EXTI4_15_IRQHandler+0x154>)
 8001c80:	701a      	strb	r2, [r3, #0]
 8001c82:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <EXTI4_15_IRQHandler+0x154>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01e      	beq.n	8001cc8 <EXTI4_15_IRQHandler+0xb8>
	  ro_button_flag = cto_button_flag = pp1_button_flag =water_input_flag=0;
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <EXTI4_15_IRQHandler+0x130>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <EXTI4_15_IRQHandler+0x130>)
 8001c92:	781a      	ldrb	r2, [r3, #0]
 8001c94:	4b2b      	ldr	r3, [pc, #172]	; (8001d44 <EXTI4_15_IRQHandler+0x134>)
 8001c96:	701a      	strb	r2, [r3, #0]
 8001c98:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <EXTI4_15_IRQHandler+0x134>)
 8001c9a:	781a      	ldrb	r2, [r3, #0]
 8001c9c:	4b32      	ldr	r3, [pc, #200]	; (8001d68 <EXTI4_15_IRQHandler+0x158>)
 8001c9e:	701a      	strb	r2, [r3, #0]
 8001ca0:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <EXTI4_15_IRQHandler+0x158>)
 8001ca2:	781a      	ldrb	r2, [r3, #0]
 8001ca4:	4b29      	ldr	r3, [pc, #164]	; (8001d4c <EXTI4_15_IRQHandler+0x13c>)
 8001ca6:	701a      	strb	r2, [r3, #0]
	  lock_end_dislay_flag =1;
 8001ca8:	4b29      	ldr	r3, [pc, #164]	; (8001d50 <EXTI4_15_IRQHandler+0x140>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	701a      	strb	r2, [r3, #0]
	  end_display_flag=0;
 8001cae:	4b29      	ldr	r3, [pc, #164]	; (8001d54 <EXTI4_15_IRQHandler+0x144>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
	  erro_dislay_trigger =0;
 8001cb4:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <EXTI4_15_IRQHandler+0x148>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
	  time_to_array(OCB_time, OCB_time_p);
 8001cba:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <EXTI4_15_IRQHandler+0x15c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a2c      	ldr	r2, [pc, #176]	; (8001d70 <EXTI4_15_IRQHandler+0x160>)
 8001cc0:	0011      	movs	r1, r2
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f7fe fb96 	bl	80003f4 <time_to_array>



  }
  if((pp1_button_trigger=HAL_GPIO_ReadPin(PP1_BUTTON_PORT, PP1_BUTTON_PIN))){
 8001cc8:	2390      	movs	r3, #144	; 0x90
 8001cca:	05db      	lsls	r3, r3, #23
 8001ccc:	2140      	movs	r1, #64	; 0x40
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f000 fed0 	bl	8002a74 <HAL_GPIO_ReadPin>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	001a      	movs	r2, r3
 8001cd8:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <EXTI4_15_IRQHandler+0x164>)
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <EXTI4_15_IRQHandler+0x164>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d01e      	beq.n	8001d22 <EXTI4_15_IRQHandler+0x112>
	  ro_button_flag = cto_button_flag = ocb_button_flag =water_input_flag =0;
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <EXTI4_15_IRQHandler+0x130>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <EXTI4_15_IRQHandler+0x130>)
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <EXTI4_15_IRQHandler+0x138>)
 8001cf0:	701a      	strb	r2, [r3, #0]
 8001cf2:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <EXTI4_15_IRQHandler+0x138>)
 8001cf4:	781a      	ldrb	r2, [r3, #0]
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <EXTI4_15_IRQHandler+0x158>)
 8001cf8:	701a      	strb	r2, [r3, #0]
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <EXTI4_15_IRQHandler+0x158>)
 8001cfc:	781a      	ldrb	r2, [r3, #0]
 8001cfe:	4b13      	ldr	r3, [pc, #76]	; (8001d4c <EXTI4_15_IRQHandler+0x13c>)
 8001d00:	701a      	strb	r2, [r3, #0]
	  lock_end_dislay_flag =1;
 8001d02:	4b13      	ldr	r3, [pc, #76]	; (8001d50 <EXTI4_15_IRQHandler+0x140>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
	  end_display_flag=0;
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <EXTI4_15_IRQHandler+0x144>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
	  erro_dislay_trigger =0;
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <EXTI4_15_IRQHandler+0x148>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
	  time_to_array(PP1_time, PP1_time_p);
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <EXTI4_15_IRQHandler+0x168>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a18      	ldr	r2, [pc, #96]	; (8001d7c <EXTI4_15_IRQHandler+0x16c>)
 8001d1a:	0011      	movs	r1, r2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7fe fb69 	bl	80003f4 <time_to_array>

  }
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d22:	2010      	movs	r0, #16
 8001d24:	f000 fee0 	bl	8002ae8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001d28:	2020      	movs	r0, #32
 8001d2a:	f000 fedd 	bl	8002ae8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001d2e:	2040      	movs	r0, #64	; 0x40
 8001d30:	f000 feda 	bl	8002ae8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	20000116 	.word	0x20000116
 8001d40:	200001e3 	.word	0x200001e3
 8001d44:	200001ea 	.word	0x200001ea
 8001d48:	200001cc 	.word	0x200001cc
 8001d4c:	200001d4 	.word	0x200001d4
 8001d50:	200001cd 	.word	0x200001cd
 8001d54:	2000011c 	.word	0x2000011c
 8001d58:	200001d6 	.word	0x200001d6
 8001d5c:	200001c0 	.word	0x200001c0
 8001d60:	20000130 	.word	0x20000130
 8001d64:	20000118 	.word	0x20000118
 8001d68:	200001e9 	.word	0x200001e9
 8001d6c:	20000120 	.word	0x20000120
 8001d70:	200001c8 	.word	0x200001c8
 8001d74:	20000117 	.word	0x20000117
 8001d78:	20000178 	.word	0x20000178
 8001d7c:	20000128 	.word	0x20000128

08001d80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	timer(clr_button_trigger, &clr_button_flag,&clr_button_cnt,CLR_BUTTON_INTERVAL);
 8001d84:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <TIM3_IRQHandler+0xcc>)
 8001d86:	7818      	ldrb	r0, [r3, #0]
 8001d88:	23fa      	movs	r3, #250	; 0xfa
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4a30      	ldr	r2, [pc, #192]	; (8001e50 <TIM3_IRQHandler+0xd0>)
 8001d8e:	4931      	ldr	r1, [pc, #196]	; (8001e54 <TIM3_IRQHandler+0xd4>)
 8001d90:	f7ff fe5c 	bl	8001a4c <timer>
	timer(cto_button_trigger, &cto_button_flag,&cto_button_cnt,BUTTON_INTERVAL);
 8001d94:	4b30      	ldr	r3, [pc, #192]	; (8001e58 <TIM3_IRQHandler+0xd8>)
 8001d96:	7818      	ldrb	r0, [r3, #0]
 8001d98:	23fa      	movs	r3, #250	; 0xfa
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	4a2f      	ldr	r2, [pc, #188]	; (8001e5c <TIM3_IRQHandler+0xdc>)
 8001d9e:	4930      	ldr	r1, [pc, #192]	; (8001e60 <TIM3_IRQHandler+0xe0>)
 8001da0:	f7ff fe54 	bl	8001a4c <timer>
	timer(pp1_button_trigger, &pp1_button_flag,&pp1_button_cnt,BUTTON_INTERVAL);
 8001da4:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <TIM3_IRQHandler+0xe4>)
 8001da6:	7818      	ldrb	r0, [r3, #0]
 8001da8:	23fa      	movs	r3, #250	; 0xfa
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4a2e      	ldr	r2, [pc, #184]	; (8001e68 <TIM3_IRQHandler+0xe8>)
 8001dae:	492f      	ldr	r1, [pc, #188]	; (8001e6c <TIM3_IRQHandler+0xec>)
 8001db0:	f7ff fe4c 	bl	8001a4c <timer>
	timer(ocb_button_trigger, &ocb_button_flag,&ocb_button_cnt,BUTTON_INTERVAL);
 8001db4:	4b2e      	ldr	r3, [pc, #184]	; (8001e70 <TIM3_IRQHandler+0xf0>)
 8001db6:	7818      	ldrb	r0, [r3, #0]
 8001db8:	23fa      	movs	r3, #250	; 0xfa
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4a2d      	ldr	r2, [pc, #180]	; (8001e74 <TIM3_IRQHandler+0xf4>)
 8001dbe:	492e      	ldr	r1, [pc, #184]	; (8001e78 <TIM3_IRQHandler+0xf8>)
 8001dc0:	f7ff fe44 	bl	8001a4c <timer>
	timer(ro_button_trigger, &ro_button_flag,&ro_button_cnt,BUTTON_INTERVAL);
 8001dc4:	4b2d      	ldr	r3, [pc, #180]	; (8001e7c <TIM3_IRQHandler+0xfc>)
 8001dc6:	7818      	ldrb	r0, [r3, #0]
 8001dc8:	23fa      	movs	r3, #250	; 0xfa
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4a2c      	ldr	r2, [pc, #176]	; (8001e80 <TIM3_IRQHandler+0x100>)
 8001dce:	492d      	ldr	r1, [pc, #180]	; (8001e84 <TIM3_IRQHandler+0x104>)
 8001dd0:	f7ff fe3c 	bl	8001a4c <timer>
	timer(lock_end_dislay_flag||PP_Out_Time_Trigger_off||OCB_Out_Time_Trigger_off||CTO_Out_Time_Trigger_off||RO_Out_Time_Trigger_off||
 8001dd4:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <TIM3_IRQHandler+0x108>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
			Water_low_trigger_off||Machine_Time_Trigger_off, &seven_segment_switch_flag,&seven_segment_switch_cnt,SEVEN_SEG_REFRESH_RATE);
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d117      	bne.n	8001e0c <TIM3_IRQHandler+0x8c>
	timer(lock_end_dislay_flag||PP_Out_Time_Trigger_off||OCB_Out_Time_Trigger_off||CTO_Out_Time_Trigger_off||RO_Out_Time_Trigger_off||
 8001ddc:	4b2b      	ldr	r3, [pc, #172]	; (8001e8c <TIM3_IRQHandler+0x10c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d113      	bne.n	8001e0c <TIM3_IRQHandler+0x8c>
 8001de4:	4b2a      	ldr	r3, [pc, #168]	; (8001e90 <TIM3_IRQHandler+0x110>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10f      	bne.n	8001e0c <TIM3_IRQHandler+0x8c>
 8001dec:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <TIM3_IRQHandler+0x114>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10b      	bne.n	8001e0c <TIM3_IRQHandler+0x8c>
 8001df4:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <TIM3_IRQHandler+0x118>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d107      	bne.n	8001e0c <TIM3_IRQHandler+0x8c>
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <TIM3_IRQHandler+0x11c>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d103      	bne.n	8001e0c <TIM3_IRQHandler+0x8c>
			Water_low_trigger_off||Machine_Time_Trigger_off, &seven_segment_switch_flag,&seven_segment_switch_cnt,SEVEN_SEG_REFRESH_RATE);
 8001e04:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <TIM3_IRQHandler+0x120>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <TIM3_IRQHandler+0x90>
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e000      	b.n	8001e12 <TIM3_IRQHandler+0x92>
 8001e10:	2300      	movs	r3, #0
	timer(lock_end_dislay_flag||PP_Out_Time_Trigger_off||OCB_Out_Time_Trigger_off||CTO_Out_Time_Trigger_off||RO_Out_Time_Trigger_off||
 8001e12:	b2d8      	uxtb	r0, r3
 8001e14:	4a23      	ldr	r2, [pc, #140]	; (8001ea4 <TIM3_IRQHandler+0x124>)
 8001e16:	4924      	ldr	r1, [pc, #144]	; (8001ea8 <TIM3_IRQHandler+0x128>)
 8001e18:	2305      	movs	r3, #5
 8001e1a:	f7ff fe17 	bl	8001a4c <timer>
	timer(Write_Flash_flag, &led_fan_flag,&led_fan_cnt,350);
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <TIM3_IRQHandler+0x12c>)
 8001e20:	7818      	ldrb	r0, [r3, #0]
 8001e22:	23af      	movs	r3, #175	; 0xaf
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4a22      	ldr	r2, [pc, #136]	; (8001eb0 <TIM3_IRQHandler+0x130>)
 8001e28:	4922      	ldr	r1, [pc, #136]	; (8001eb4 <TIM3_IRQHandler+0x134>)
 8001e2a:	f7ff fe0f 	bl	8001a4c <timer>
	timer(watch_Dog_Trigger, &watch_Dog_Flag, &watch_Dog_cnt, 150);
 8001e2e:	4b22      	ldr	r3, [pc, #136]	; (8001eb8 <TIM3_IRQHandler+0x138>)
 8001e30:	7818      	ldrb	r0, [r3, #0]
 8001e32:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <TIM3_IRQHandler+0x13c>)
 8001e34:	4922      	ldr	r1, [pc, #136]	; (8001ec0 <TIM3_IRQHandler+0x140>)
 8001e36:	2396      	movs	r3, #150	; 0x96
 8001e38:	f7ff fe08 	bl	8001a4c <timer>
//
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <TIM3_IRQHandler+0x144>)
 8001e3e:	0018      	movs	r0, r3
 8001e40:	f001 fb14 	bl	800346c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e44:	46c0      	nop			; (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	20000114 	.word	0x20000114
 8001e50:	200000c8 	.word	0x200000c8
 8001e54:	200001da 	.word	0x200001da
 8001e58:	20000116 	.word	0x20000116
 8001e5c:	200000d0 	.word	0x200000d0
 8001e60:	200001e9 	.word	0x200001e9
 8001e64:	20000117 	.word	0x20000117
 8001e68:	200000d4 	.word	0x200000d4
 8001e6c:	200001ea 	.word	0x200001ea
 8001e70:	20000118 	.word	0x20000118
 8001e74:	200000d8 	.word	0x200000d8
 8001e78:	200001cc 	.word	0x200001cc
 8001e7c:	20000115 	.word	0x20000115
 8001e80:	200000cc 	.word	0x200000cc
 8001e84:	200001d4 	.word	0x200001d4
 8001e88:	200001cd 	.word	0x200001cd
 8001e8c:	200001d7 	.word	0x200001d7
 8001e90:	200001e4 	.word	0x200001e4
 8001e94:	200001dd 	.word	0x200001dd
 8001e98:	200001cf 	.word	0x200001cf
 8001e9c:	200001df 	.word	0x200001df
 8001ea0:	200001db 	.word	0x200001db
 8001ea4:	200000e0 	.word	0x200000e0
 8001ea8:	200001dc 	.word	0x200001dc
 8001eac:	200001d0 	.word	0x200001d0
 8001eb0:	200000c4 	.word	0x200000c4
 8001eb4:	200001d1 	.word	0x200001d1
 8001eb8:	200001e5 	.word	0x200001e5
 8001ebc:	2000010c 	.word	0x2000010c
 8001ec0:	200001e2 	.word	0x200001e2
 8001ec4:	20000134 	.word	0x20000134

08001ec8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM6_IRQn 0 */
	timer(HAL_GPIO_ReadPin(PUMP_STATUS_PORT, PUMP_STATUS_PIN), &Write_Flash_flag,&write_Flash_cnt, 5);
 8001ece:	2390      	movs	r3, #144	; 0x90
 8001ed0:	05db      	lsls	r3, r3, #23
 8001ed2:	2102      	movs	r1, #2
 8001ed4:	0018      	movs	r0, r3
 8001ed6:	f000 fdcd 	bl	8002a74 <HAL_GPIO_ReadPin>
 8001eda:	0003      	movs	r3, r0
 8001edc:	0018      	movs	r0, r3
 8001ede:	4a3c      	ldr	r2, [pc, #240]	; (8001fd0 <TIM6_IRQHandler+0x108>)
 8001ee0:	493c      	ldr	r1, [pc, #240]	; (8001fd4 <TIM6_IRQHandler+0x10c>)
 8001ee2:	2305      	movs	r3, #5
 8001ee4:	f7ff fdb2 	bl	8001a4c <timer>
	timer(Write_Flash_flag, &pump_status_flag, &pump_status_cnt, 60);
 8001ee8:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <TIM6_IRQHandler+0x10c>)
 8001eea:	7818      	ldrb	r0, [r3, #0]
 8001eec:	4a3a      	ldr	r2, [pc, #232]	; (8001fd8 <TIM6_IRQHandler+0x110>)
 8001eee:	493b      	ldr	r1, [pc, #236]	; (8001fdc <TIM6_IRQHandler+0x114>)
 8001ef0:	233c      	movs	r3, #60	; 0x3c
 8001ef2:	f7ff fdab 	bl	8001a4c <timer>
	timer(Write_Flash_flag, &out_time_machine_trigger, &out_time_machine_cnt, 60); // timer machine out time
 8001ef6:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <TIM6_IRQHandler+0x10c>)
 8001ef8:	7818      	ldrb	r0, [r3, #0]
 8001efa:	4a39      	ldr	r2, [pc, #228]	; (8001fe0 <TIM6_IRQHandler+0x118>)
 8001efc:	4939      	ldr	r1, [pc, #228]	; (8001fe4 <TIM6_IRQHandler+0x11c>)
 8001efe:	233c      	movs	r3, #60	; 0x3c
 8001f00:	f7ff fda4 	bl	8001a4c <timer>
	timer2(!Write_Flash_flag,&led_tank_full_flag,&led_tank_full_flag_off,&led_tank_full_cnt,10);
 8001f04:	4b33      	ldr	r3, [pc, #204]	; (8001fd4 <TIM6_IRQHandler+0x10c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	425a      	negs	r2, r3
 8001f0a:	4153      	adcs	r3, r2
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	001c      	movs	r4, r3
 8001f10:	4835      	ldr	r0, [pc, #212]	; (8001fe8 <TIM6_IRQHandler+0x120>)
 8001f12:	4a36      	ldr	r2, [pc, #216]	; (8001fec <TIM6_IRQHandler+0x124>)
 8001f14:	4936      	ldr	r1, [pc, #216]	; (8001ff0 <TIM6_IRQHandler+0x128>)
 8001f16:	230a      	movs	r3, #10
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	0020      	movs	r0, r4
 8001f1e:	f7ff fdbb 	bl	8001a98 <timer2>
	timer(lock_end_dislay_flag&&(!(ro_button_trigger||cto_button_trigger||ocb_button_trigger||pp1_button_trigger))
 8001f22:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <TIM6_IRQHandler+0x12c>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d011      	beq.n	8001f4e <TIM6_IRQHandler+0x86>
 8001f2a:	4b33      	ldr	r3, [pc, #204]	; (8001ff8 <TIM6_IRQHandler+0x130>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10d      	bne.n	8001f4e <TIM6_IRQHandler+0x86>
 8001f32:	4b32      	ldr	r3, [pc, #200]	; (8001ffc <TIM6_IRQHandler+0x134>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d109      	bne.n	8001f4e <TIM6_IRQHandler+0x86>
 8001f3a:	4b31      	ldr	r3, [pc, #196]	; (8002000 <TIM6_IRQHandler+0x138>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d105      	bne.n	8001f4e <TIM6_IRQHandler+0x86>
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <TIM6_IRQHandler+0x13c>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <TIM6_IRQHandler+0x86>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <TIM6_IRQHandler+0x88>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	b2d8      	uxtb	r0, r3
 8001f52:	4a2d      	ldr	r2, [pc, #180]	; (8002008 <TIM6_IRQHandler+0x140>)
 8001f54:	492d      	ldr	r1, [pc, #180]	; (800200c <TIM6_IRQHandler+0x144>)
 8001f56:	2305      	movs	r3, #5
 8001f58:	f7ff fd78 	bl	8001a4c <timer>
			,&end_display_flag,&display_cnt,DISPLAY_INTERVAL);

//	timer2(out_time_machine_trigger,&out_time_machine_flag,&end_display_flag,&LED_out_time_machine_cnt,10);

	timer(PP_Out_Time_Trigger_off,&PP_Out_Time_Flag_off,&PP_Out_Time_Flag_off_cnt,2);
 8001f5c:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <TIM6_IRQHandler+0x148>)
 8001f5e:	7818      	ldrb	r0, [r3, #0]
 8001f60:	4a2c      	ldr	r2, [pc, #176]	; (8002014 <TIM6_IRQHandler+0x14c>)
 8001f62:	492d      	ldr	r1, [pc, #180]	; (8002018 <TIM6_IRQHandler+0x150>)
 8001f64:	2302      	movs	r3, #2
 8001f66:	f7ff fd71 	bl	8001a4c <timer>
	timer(OCB_Out_Time_Trigger_off,&OCB_Out_Time_Flag_off,&OCB_Out_Time_Flag_off_cnt,2);
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	; (800201c <TIM6_IRQHandler+0x154>)
 8001f6c:	7818      	ldrb	r0, [r3, #0]
 8001f6e:	4a2c      	ldr	r2, [pc, #176]	; (8002020 <TIM6_IRQHandler+0x158>)
 8001f70:	492c      	ldr	r1, [pc, #176]	; (8002024 <TIM6_IRQHandler+0x15c>)
 8001f72:	2302      	movs	r3, #2
 8001f74:	f7ff fd6a 	bl	8001a4c <timer>
	timer(CTO_Out_Time_Trigger_off,&CTO_Out_Time_Flag_off,&CTO_Out_Time_Flag_off_cnt,2);
 8001f78:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <TIM6_IRQHandler+0x160>)
 8001f7a:	7818      	ldrb	r0, [r3, #0]
 8001f7c:	4a2b      	ldr	r2, [pc, #172]	; (800202c <TIM6_IRQHandler+0x164>)
 8001f7e:	492c      	ldr	r1, [pc, #176]	; (8002030 <TIM6_IRQHandler+0x168>)
 8001f80:	2302      	movs	r3, #2
 8001f82:	f7ff fd63 	bl	8001a4c <timer>
	timer(RO_Out_Time_Trigger_off,&RO_Out_Time_Flag_off,&RO_Out_Time_Flag_off_cnt,2);
 8001f86:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <TIM6_IRQHandler+0x16c>)
 8001f88:	7818      	ldrb	r0, [r3, #0]
 8001f8a:	4a2b      	ldr	r2, [pc, #172]	; (8002038 <TIM6_IRQHandler+0x170>)
 8001f8c:	492b      	ldr	r1, [pc, #172]	; (800203c <TIM6_IRQHandler+0x174>)
 8001f8e:	2302      	movs	r3, #2
 8001f90:	f7ff fd5c 	bl	8001a4c <timer>
	timer(Water_low_trigger_off,&Water_low_Flag_off,&water_low_Flag_off_cnt,2);
 8001f94:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <TIM6_IRQHandler+0x178>)
 8001f96:	7818      	ldrb	r0, [r3, #0]
 8001f98:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <TIM6_IRQHandler+0x17c>)
 8001f9a:	492b      	ldr	r1, [pc, #172]	; (8002048 <TIM6_IRQHandler+0x180>)
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	f7ff fd55 	bl	8001a4c <timer>
	timer(Machine_Time_Trigger_off,&Machine_Time_Flag_off,&Machine_Out_Time_Flag_off_cnt,2);
 8001fa2:	4b2a      	ldr	r3, [pc, #168]	; (800204c <TIM6_IRQHandler+0x184>)
 8001fa4:	7818      	ldrb	r0, [r3, #0]
 8001fa6:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <TIM6_IRQHandler+0x188>)
 8001fa8:	492a      	ldr	r1, [pc, #168]	; (8002054 <TIM6_IRQHandler+0x18c>)
 8001faa:	2302      	movs	r3, #2
 8001fac:	f7ff fd4e 	bl	8001a4c <timer>
	timer(erro_dislay_trigger, &erro_dislay_flag_off , &erro_dislay_cnt, 4);
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <TIM6_IRQHandler+0x190>)
 8001fb2:	7818      	ldrb	r0, [r3, #0]
 8001fb4:	4a29      	ldr	r2, [pc, #164]	; (800205c <TIM6_IRQHandler+0x194>)
 8001fb6:	492a      	ldr	r1, [pc, #168]	; (8002060 <TIM6_IRQHandler+0x198>)
 8001fb8:	2304      	movs	r3, #4
 8001fba:	f7ff fd47 	bl	8001a4c <timer>


  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fbe:	4b29      	ldr	r3, [pc, #164]	; (8002064 <TIM6_IRQHandler+0x19c>)
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f001 fa53 	bl	800346c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b001      	add	sp, #4
 8001fcc:	bd90      	pop	{r4, r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	20000110 	.word	0x20000110
 8001fd4:	200001d0 	.word	0x200001d0
 8001fd8:	200000dc 	.word	0x200000dc
 8001fdc:	200001cb 	.word	0x200001cb
 8001fe0:	200000e8 	.word	0x200000e8
 8001fe4:	200001d9 	.word	0x200001d9
 8001fe8:	200000ec 	.word	0x200000ec
 8001fec:	200001d8 	.word	0x200001d8
 8001ff0:	200001de 	.word	0x200001de
 8001ff4:	200001cd 	.word	0x200001cd
 8001ff8:	20000115 	.word	0x20000115
 8001ffc:	20000116 	.word	0x20000116
 8002000:	20000118 	.word	0x20000118
 8002004:	20000117 	.word	0x20000117
 8002008:	200000e4 	.word	0x200000e4
 800200c:	2000011c 	.word	0x2000011c
 8002010:	200001d7 	.word	0x200001d7
 8002014:	200000f4 	.word	0x200000f4
 8002018:	200001d5 	.word	0x200001d5
 800201c:	200001e4 	.word	0x200001e4
 8002020:	200000f0 	.word	0x200000f0
 8002024:	200001e1 	.word	0x200001e1
 8002028:	200001dd 	.word	0x200001dd
 800202c:	200000fc 	.word	0x200000fc
 8002030:	200001e8 	.word	0x200001e8
 8002034:	200001cf 	.word	0x200001cf
 8002038:	200000f8 	.word	0x200000f8
 800203c:	200001d2 	.word	0x200001d2
 8002040:	200001df 	.word	0x200001df
 8002044:	20000100 	.word	0x20000100
 8002048:	200001e6 	.word	0x200001e6
 800204c:	200001db 	.word	0x200001db
 8002050:	20000104 	.word	0x20000104
 8002054:	200001e7 	.word	0x200001e7
 8002058:	200001d6 	.word	0x200001d6
 800205c:	20000108 	.word	0x20000108
 8002060:	200001e0 	.word	0x200001e0
 8002064:	2000017c 	.word	0x2000017c

08002068 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800206c:	46c0      	nop			; (mov r8, r8)
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
	...

08002074 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002074:	480d      	ldr	r0, [pc, #52]	; (80020ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002076:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002078:	480d      	ldr	r0, [pc, #52]	; (80020b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800207a:	490e      	ldr	r1, [pc, #56]	; (80020b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800207c:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <LoopForever+0xe>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002080:	e002      	b.n	8002088 <LoopCopyDataInit>

08002082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002086:	3304      	adds	r3, #4

08002088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800208c:	d3f9      	bcc.n	8002082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800208e:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002090:	4c0b      	ldr	r4, [pc, #44]	; (80020c0 <LoopForever+0x16>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002094:	e001      	b.n	800209a <LoopFillZerobss>

08002096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002098:	3204      	adds	r2, #4

0800209a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800209c:	d3fb      	bcc.n	8002096 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800209e:	f7ff ffe3 	bl	8002068 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80020a2:	f001 fd57 	bl	8003b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020a6:	f7ff f991 	bl	80013cc <main>

080020aa <LoopForever>:

LoopForever:
    b LoopForever
 80020aa:	e7fe      	b.n	80020aa <LoopForever>
  ldr   r0, =_estack
 80020ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80020b8:	08003c24 	.word	0x08003c24
  ldr r2, =_sbss
 80020bc:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80020c0:	20000210 	.word	0x20000210

080020c4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020c4:	e7fe      	b.n	80020c4 <ADC1_IRQHandler>
	...

080020c8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <HAL_Init+0x24>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_Init+0x24>)
 80020d2:	2110      	movs	r1, #16
 80020d4:	430a      	orrs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80020d8:	2000      	movs	r0, #0
 80020da:	f000 f809 	bl	80020f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020de:	f7ff fc4f 	bl	8001980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	40022000 	.word	0x40022000

080020f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_InitTick+0x5c>)
 80020fa:	681c      	ldr	r4, [r3, #0]
 80020fc:	4b14      	ldr	r3, [pc, #80]	; (8002150 <HAL_InitTick+0x60>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	0019      	movs	r1, r3
 8002102:	23fa      	movs	r3, #250	; 0xfa
 8002104:	0098      	lsls	r0, r3, #2
 8002106:	f7fd ffff 	bl	8000108 <__udivsi3>
 800210a:	0003      	movs	r3, r0
 800210c:	0019      	movs	r1, r3
 800210e:	0020      	movs	r0, r4
 8002110:	f7fd fffa 	bl	8000108 <__udivsi3>
 8002114:	0003      	movs	r3, r0
 8002116:	0018      	movs	r0, r3
 8002118:	f000 f92d 	bl	8002376 <HAL_SYSTICK_Config>
 800211c:	1e03      	subs	r3, r0, #0
 800211e:	d001      	beq.n	8002124 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e00f      	b.n	8002144 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b03      	cmp	r3, #3
 8002128:	d80b      	bhi.n	8002142 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	2301      	movs	r3, #1
 800212e:	425b      	negs	r3, r3
 8002130:	2200      	movs	r2, #0
 8002132:	0018      	movs	r0, r3
 8002134:	f000 f8fa 	bl	800232c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_InitTick+0x64>)
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b003      	add	sp, #12
 800214a:	bd90      	pop	{r4, r7, pc}
 800214c:	20000090 	.word	0x20000090
 8002150:	20000098 	.word	0x20000098
 8002154:	20000094 	.word	0x20000094

08002158 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800215c:	4b05      	ldr	r3, [pc, #20]	; (8002174 <HAL_IncTick+0x1c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	001a      	movs	r2, r3
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <HAL_IncTick+0x20>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	18d2      	adds	r2, r2, r3
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_IncTick+0x20>)
 800216a:	601a      	str	r2, [r3, #0]
}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			; (mov r8, r8)
 8002174:	20000098 	.word	0x20000098
 8002178:	200001ec 	.word	0x200001ec

0800217c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  return uwTick;
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <HAL_GetTick+0x10>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	200001ec 	.word	0x200001ec

08002190 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff fff0 	bl	800217c <HAL_GetTick>
 800219c:	0003      	movs	r3, r0
 800219e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	3301      	adds	r3, #1
 80021a8:	d005      	beq.n	80021b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_Delay+0x40>)
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	001a      	movs	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	189b      	adds	r3, r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	f7ff ffe0 	bl	800217c <HAL_GetTick>
 80021bc:	0002      	movs	r2, r0
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d8f7      	bhi.n	80021b8 <HAL_Delay+0x28>
  {
  }
}
 80021c8:	46c0      	nop			; (mov r8, r8)
 80021ca:	46bd      	mov	sp, r7
 80021cc:	b004      	add	sp, #16
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	20000098 	.word	0x20000098

080021d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	0002      	movs	r2, r0
 80021dc:	1dfb      	adds	r3, r7, #7
 80021de:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	1dfb      	adds	r3, r7, #7
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b7f      	cmp	r3, #127	; 0x7f
 80021e6:	d809      	bhi.n	80021fc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e8:	1dfb      	adds	r3, r7, #7
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	001a      	movs	r2, r3
 80021ee:	231f      	movs	r3, #31
 80021f0:	401a      	ands	r2, r3
 80021f2:	4b04      	ldr	r3, [pc, #16]	; (8002204 <__NVIC_EnableIRQ+0x30>)
 80021f4:	2101      	movs	r1, #1
 80021f6:	4091      	lsls	r1, r2
 80021f8:	000a      	movs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]
  }
}
 80021fc:	46c0      	nop			; (mov r8, r8)
 80021fe:	46bd      	mov	sp, r7
 8002200:	b002      	add	sp, #8
 8002202:	bd80      	pop	{r7, pc}
 8002204:	e000e100 	.word	0xe000e100

08002208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002208:	b590      	push	{r4, r7, lr}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	0002      	movs	r2, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	1dfb      	adds	r3, r7, #7
 8002214:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002216:	1dfb      	adds	r3, r7, #7
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b7f      	cmp	r3, #127	; 0x7f
 800221c:	d828      	bhi.n	8002270 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800221e:	4a2f      	ldr	r2, [pc, #188]	; (80022dc <__NVIC_SetPriority+0xd4>)
 8002220:	1dfb      	adds	r3, r7, #7
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b25b      	sxtb	r3, r3
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	33c0      	adds	r3, #192	; 0xc0
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	589b      	ldr	r3, [r3, r2]
 800222e:	1dfa      	adds	r2, r7, #7
 8002230:	7812      	ldrb	r2, [r2, #0]
 8002232:	0011      	movs	r1, r2
 8002234:	2203      	movs	r2, #3
 8002236:	400a      	ands	r2, r1
 8002238:	00d2      	lsls	r2, r2, #3
 800223a:	21ff      	movs	r1, #255	; 0xff
 800223c:	4091      	lsls	r1, r2
 800223e:	000a      	movs	r2, r1
 8002240:	43d2      	mvns	r2, r2
 8002242:	401a      	ands	r2, r3
 8002244:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	019b      	lsls	r3, r3, #6
 800224a:	22ff      	movs	r2, #255	; 0xff
 800224c:	401a      	ands	r2, r3
 800224e:	1dfb      	adds	r3, r7, #7
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	0018      	movs	r0, r3
 8002254:	2303      	movs	r3, #3
 8002256:	4003      	ands	r3, r0
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800225c:	481f      	ldr	r0, [pc, #124]	; (80022dc <__NVIC_SetPriority+0xd4>)
 800225e:	1dfb      	adds	r3, r7, #7
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	b25b      	sxtb	r3, r3
 8002264:	089b      	lsrs	r3, r3, #2
 8002266:	430a      	orrs	r2, r1
 8002268:	33c0      	adds	r3, #192	; 0xc0
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800226e:	e031      	b.n	80022d4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002270:	4a1b      	ldr	r2, [pc, #108]	; (80022e0 <__NVIC_SetPriority+0xd8>)
 8002272:	1dfb      	adds	r3, r7, #7
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	0019      	movs	r1, r3
 8002278:	230f      	movs	r3, #15
 800227a:	400b      	ands	r3, r1
 800227c:	3b08      	subs	r3, #8
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3306      	adds	r3, #6
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	18d3      	adds	r3, r2, r3
 8002286:	3304      	adds	r3, #4
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	1dfa      	adds	r2, r7, #7
 800228c:	7812      	ldrb	r2, [r2, #0]
 800228e:	0011      	movs	r1, r2
 8002290:	2203      	movs	r2, #3
 8002292:	400a      	ands	r2, r1
 8002294:	00d2      	lsls	r2, r2, #3
 8002296:	21ff      	movs	r1, #255	; 0xff
 8002298:	4091      	lsls	r1, r2
 800229a:	000a      	movs	r2, r1
 800229c:	43d2      	mvns	r2, r2
 800229e:	401a      	ands	r2, r3
 80022a0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	019b      	lsls	r3, r3, #6
 80022a6:	22ff      	movs	r2, #255	; 0xff
 80022a8:	401a      	ands	r2, r3
 80022aa:	1dfb      	adds	r3, r7, #7
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	0018      	movs	r0, r3
 80022b0:	2303      	movs	r3, #3
 80022b2:	4003      	ands	r3, r0
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022b8:	4809      	ldr	r0, [pc, #36]	; (80022e0 <__NVIC_SetPriority+0xd8>)
 80022ba:	1dfb      	adds	r3, r7, #7
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	001c      	movs	r4, r3
 80022c0:	230f      	movs	r3, #15
 80022c2:	4023      	ands	r3, r4
 80022c4:	3b08      	subs	r3, #8
 80022c6:	089b      	lsrs	r3, r3, #2
 80022c8:	430a      	orrs	r2, r1
 80022ca:	3306      	adds	r3, #6
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	18c3      	adds	r3, r0, r3
 80022d0:	3304      	adds	r3, #4
 80022d2:	601a      	str	r2, [r3, #0]
}
 80022d4:	46c0      	nop			; (mov r8, r8)
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b003      	add	sp, #12
 80022da:	bd90      	pop	{r4, r7, pc}
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	4a0c      	ldr	r2, [pc, #48]	; (8002324 <SysTick_Config+0x40>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f6:	2301      	movs	r3, #1
 80022f8:	e010      	b.n	800231c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fa:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <SysTick_Config+0x44>)
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	3a01      	subs	r2, #1
 8002300:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002302:	2301      	movs	r3, #1
 8002304:	425b      	negs	r3, r3
 8002306:	2103      	movs	r1, #3
 8002308:	0018      	movs	r0, r3
 800230a:	f7ff ff7d 	bl	8002208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <SysTick_Config+0x44>)
 8002310:	2200      	movs	r2, #0
 8002312:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <SysTick_Config+0x44>)
 8002316:	2207      	movs	r2, #7
 8002318:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800231a:	2300      	movs	r3, #0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b002      	add	sp, #8
 8002322:	bd80      	pop	{r7, pc}
 8002324:	00ffffff 	.word	0x00ffffff
 8002328:	e000e010 	.word	0xe000e010

0800232c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	210f      	movs	r1, #15
 8002338:	187b      	adds	r3, r7, r1
 800233a:	1c02      	adds	r2, r0, #0
 800233c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	187b      	adds	r3, r7, r1
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b25b      	sxtb	r3, r3
 8002346:	0011      	movs	r1, r2
 8002348:	0018      	movs	r0, r3
 800234a:	f7ff ff5d 	bl	8002208 <__NVIC_SetPriority>
}
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	b004      	add	sp, #16
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	0002      	movs	r2, r0
 800235e:	1dfb      	adds	r3, r7, #7
 8002360:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002362:	1dfb      	adds	r3, r7, #7
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	b25b      	sxtb	r3, r3
 8002368:	0018      	movs	r0, r3
 800236a:	f7ff ff33 	bl	80021d4 <__NVIC_EnableIRQ>
}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	46bd      	mov	sp, r7
 8002372:	b002      	add	sp, #8
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	0018      	movs	r0, r3
 8002382:	f7ff ffaf 	bl	80022e4 <SysTick_Config>
 8002386:	0003      	movs	r3, r0
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b002      	add	sp, #8
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	603a      	str	r2, [r7, #0]
 800239c:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800239e:	2317      	movs	r3, #23
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	2201      	movs	r2, #1
 80023a4:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 80023a6:	2316      	movs	r3, #22
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 80023ae:	2315      	movs	r3, #21
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80023b6:	4b3e      	ldr	r3, [pc, #248]	; (80024b0 <HAL_FLASH_Program+0x120>)
 80023b8:	7e1b      	ldrb	r3, [r3, #24]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_FLASH_Program+0x32>
 80023be:	2302      	movs	r3, #2
 80023c0:	e072      	b.n	80024a8 <HAL_FLASH_Program+0x118>
 80023c2:	4b3b      	ldr	r3, [pc, #236]	; (80024b0 <HAL_FLASH_Program+0x120>)
 80023c4:	2201      	movs	r2, #1
 80023c6:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023c8:	2317      	movs	r3, #23
 80023ca:	18fe      	adds	r6, r7, r3
 80023cc:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <HAL_FLASH_Program+0x124>)
 80023ce:	0018      	movs	r0, r3
 80023d0:	f000 f8c4 	bl	800255c <FLASH_WaitForLastOperation>
 80023d4:	0003      	movs	r3, r0
 80023d6:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 80023d8:	2317      	movs	r3, #23
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d15c      	bne.n	800249c <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d104      	bne.n	80023f2 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80023e8:	2315      	movs	r3, #21
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2201      	movs	r2, #1
 80023ee:	701a      	strb	r2, [r3, #0]
 80023f0:	e00b      	b.n	800240a <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d104      	bne.n	8002402 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80023f8:	2315      	movs	r3, #21
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	2202      	movs	r2, #2
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	e003      	b.n	800240a <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002402:	2315      	movs	r3, #21
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	2204      	movs	r2, #4
 8002408:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 800240a:	2316      	movs	r3, #22
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	2200      	movs	r2, #0
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	e039      	b.n	8002488 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002414:	2116      	movs	r1, #22
 8002416:	187b      	adds	r3, r7, r1
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	005a      	lsls	r2, r3, #1
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	18d0      	adds	r0, r2, r3
 8002420:	187b      	adds	r3, r7, r1
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	011b      	lsls	r3, r3, #4
 8002426:	001a      	movs	r2, r3
 8002428:	3a20      	subs	r2, #32
 800242a:	2a00      	cmp	r2, #0
 800242c:	db03      	blt.n	8002436 <HAL_FLASH_Program+0xa6>
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	40d1      	lsrs	r1, r2
 8002432:	000c      	movs	r4, r1
 8002434:	e008      	b.n	8002448 <HAL_FLASH_Program+0xb8>
 8002436:	2220      	movs	r2, #32
 8002438:	1ad2      	subs	r2, r2, r3
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	4091      	lsls	r1, r2
 800243e:	000a      	movs	r2, r1
 8002440:	6839      	ldr	r1, [r7, #0]
 8002442:	40d9      	lsrs	r1, r3
 8002444:	000c      	movs	r4, r1
 8002446:	4314      	orrs	r4, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	40da      	lsrs	r2, r3
 800244c:	0015      	movs	r5, r2
 800244e:	b2a3      	uxth	r3, r4
 8002450:	0019      	movs	r1, r3
 8002452:	f000 f867 	bl	8002524 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002456:	2317      	movs	r3, #23
 8002458:	18fe      	adds	r6, r7, r3
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_FLASH_Program+0x124>)
 800245c:	0018      	movs	r0, r3
 800245e:	f000 f87d 	bl	800255c <FLASH_WaitForLastOperation>
 8002462:	0003      	movs	r3, r0
 8002464:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <HAL_FLASH_Program+0x128>)
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <HAL_FLASH_Program+0x128>)
 800246c:	2101      	movs	r1, #1
 800246e:	438a      	bics	r2, r1
 8002470:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8002472:	2317      	movs	r3, #23
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10e      	bne.n	800249a <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 800247c:	2116      	movs	r1, #22
 800247e:	187b      	adds	r3, r7, r1
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	187b      	adds	r3, r7, r1
 8002484:	3201      	adds	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	2316      	movs	r3, #22
 800248a:	18fa      	adds	r2, r7, r3
 800248c:	2315      	movs	r3, #21
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	7812      	ldrb	r2, [r2, #0]
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d3bd      	bcc.n	8002414 <HAL_FLASH_Program+0x84>
 8002498:	e000      	b.n	800249c <HAL_FLASH_Program+0x10c>
      {
        break;
 800249a:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <HAL_FLASH_Program+0x120>)
 800249e:	2200      	movs	r2, #0
 80024a0:	761a      	strb	r2, [r3, #24]

  return status;
 80024a2:	2317      	movs	r3, #23
 80024a4:	18fb      	adds	r3, r7, r3
 80024a6:	781b      	ldrb	r3, [r3, #0]
}
 80024a8:	0018      	movs	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b007      	add	sp, #28
 80024ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024b0:	200001f0 	.word	0x200001f0
 80024b4:	0000c350 	.word	0x0000c350
 80024b8:	40022000 	.word	0x40022000

080024bc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <HAL_FLASH_Unlock+0x40>)
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2280      	movs	r2, #128	; 0x80
 80024ce:	4013      	ands	r3, r2
 80024d0:	d00d      	beq.n	80024ee <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_FLASH_Unlock+0x40>)
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <HAL_FLASH_Unlock+0x44>)
 80024d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80024d8:	4b08      	ldr	r3, [pc, #32]	; (80024fc <HAL_FLASH_Unlock+0x40>)
 80024da:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <HAL_FLASH_Unlock+0x48>)
 80024dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <HAL_FLASH_Unlock+0x40>)
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2280      	movs	r2, #128	; 0x80
 80024e4:	4013      	ands	r3, r2
 80024e6:	d002      	beq.n	80024ee <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80024e8:	1dfb      	adds	r3, r7, #7
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80024ee:	1dfb      	adds	r3, r7, #7
 80024f0:	781b      	ldrb	r3, [r3, #0]
}
 80024f2:	0018      	movs	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b002      	add	sp, #8
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	40022000 	.word	0x40022000
 8002500:	45670123 	.word	0x45670123
 8002504:	cdef89ab 	.word	0xcdef89ab

08002508 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <HAL_FLASH_Lock+0x18>)
 800250e:	691a      	ldr	r2, [r3, #16]
 8002510:	4b03      	ldr	r3, [pc, #12]	; (8002520 <HAL_FLASH_Lock+0x18>)
 8002512:	2180      	movs	r1, #128	; 0x80
 8002514:	430a      	orrs	r2, r1
 8002516:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8002518:	2300      	movs	r3, #0
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40022000 	.word	0x40022000

08002524 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	000a      	movs	r2, r1
 800252e:	1cbb      	adds	r3, r7, #2
 8002530:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <FLASH_Program_HalfWord+0x30>)
 8002534:	2200      	movs	r2, #0
 8002536:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002538:	4b07      	ldr	r3, [pc, #28]	; (8002558 <FLASH_Program_HalfWord+0x34>)
 800253a:	691a      	ldr	r2, [r3, #16]
 800253c:	4b06      	ldr	r3, [pc, #24]	; (8002558 <FLASH_Program_HalfWord+0x34>)
 800253e:	2101      	movs	r1, #1
 8002540:	430a      	orrs	r2, r1
 8002542:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	1cba      	adds	r2, r7, #2
 8002548:	8812      	ldrh	r2, [r2, #0]
 800254a:	801a      	strh	r2, [r3, #0]
}
 800254c:	46c0      	nop			; (mov r8, r8)
 800254e:	46bd      	mov	sp, r7
 8002550:	b002      	add	sp, #8
 8002552:	bd80      	pop	{r7, pc}
 8002554:	200001f0 	.word	0x200001f0
 8002558:	40022000 	.word	0x40022000

0800255c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002564:	f7ff fe0a 	bl	800217c <HAL_GetTick>
 8002568:	0003      	movs	r3, r0
 800256a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800256c:	e00f      	b.n	800258e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3301      	adds	r3, #1
 8002572:	d00c      	beq.n	800258e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d007      	beq.n	800258a <FLASH_WaitForLastOperation+0x2e>
 800257a:	f7ff fdff 	bl	800217c <HAL_GetTick>
 800257e:	0002      	movs	r2, r0
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	429a      	cmp	r2, r3
 8002588:	d201      	bcs.n	800258e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e01f      	b.n	80025ce <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800258e:	4b12      	ldr	r3, [pc, #72]	; (80025d8 <FLASH_WaitForLastOperation+0x7c>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2201      	movs	r2, #1
 8002594:	4013      	ands	r3, r2
 8002596:	2b01      	cmp	r3, #1
 8002598:	d0e9      	beq.n	800256e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800259a:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <FLASH_WaitForLastOperation+0x7c>)
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d102      	bne.n	80025ac <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <FLASH_WaitForLastOperation+0x7c>)
 80025a8:	2220      	movs	r2, #32
 80025aa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80025ac:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <FLASH_WaitForLastOperation+0x7c>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	2210      	movs	r2, #16
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b10      	cmp	r3, #16
 80025b6:	d005      	beq.n	80025c4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <FLASH_WaitForLastOperation+0x7c>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	2204      	movs	r2, #4
 80025be:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d103      	bne.n	80025cc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80025c4:	f000 f80a 	bl	80025dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	0018      	movs	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b004      	add	sp, #16
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	40022000 	.word	0x40022000

080025dc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80025e6:	4b13      	ldr	r3, [pc, #76]	; (8002634 <FLASH_SetErrorCode+0x58>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2210      	movs	r2, #16
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b10      	cmp	r3, #16
 80025f0:	d109      	bne.n	8002606 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <FLASH_SetErrorCode+0x5c>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	2202      	movs	r2, #2
 80025f8:	431a      	orrs	r2, r3
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <FLASH_SetErrorCode+0x5c>)
 80025fc:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2210      	movs	r2, #16
 8002602:	4313      	orrs	r3, r2
 8002604:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <FLASH_SetErrorCode+0x58>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2204      	movs	r2, #4
 800260c:	4013      	ands	r3, r2
 800260e:	2b04      	cmp	r3, #4
 8002610:	d109      	bne.n	8002626 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <FLASH_SetErrorCode+0x5c>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	2201      	movs	r2, #1
 8002618:	431a      	orrs	r2, r3
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <FLASH_SetErrorCode+0x5c>)
 800261c:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2204      	movs	r2, #4
 8002622:	4313      	orrs	r3, r2
 8002624:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002626:	4b03      	ldr	r3, [pc, #12]	; (8002634 <FLASH_SetErrorCode+0x58>)
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	60da      	str	r2, [r3, #12]
}  
 800262c:	46c0      	nop			; (mov r8, r8)
 800262e:	46bd      	mov	sp, r7
 8002630:	b002      	add	sp, #8
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40022000 	.word	0x40022000
 8002638:	200001f0 	.word	0x200001f0

0800263c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800263c:	b5b0      	push	{r4, r5, r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002646:	230f      	movs	r3, #15
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002652:	4b32      	ldr	r3, [pc, #200]	; (800271c <HAL_FLASHEx_Erase+0xe0>)
 8002654:	7e1b      	ldrb	r3, [r3, #24]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_FLASHEx_Erase+0x22>
 800265a:	2302      	movs	r3, #2
 800265c:	e05a      	b.n	8002714 <HAL_FLASHEx_Erase+0xd8>
 800265e:	4b2f      	ldr	r3, [pc, #188]	; (800271c <HAL_FLASHEx_Erase+0xe0>)
 8002660:	2201      	movs	r2, #1
 8002662:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d116      	bne.n	800269a <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800266c:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <HAL_FLASHEx_Erase+0xe4>)
 800266e:	0018      	movs	r0, r3
 8002670:	f7ff ff74 	bl	800255c <FLASH_WaitForLastOperation>
 8002674:	1e03      	subs	r3, r0, #0
 8002676:	d147      	bne.n	8002708 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002678:	f000 f856 	bl	8002728 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800267c:	230f      	movs	r3, #15
 800267e:	18fc      	adds	r4, r7, r3
 8002680:	4b27      	ldr	r3, [pc, #156]	; (8002720 <HAL_FLASHEx_Erase+0xe4>)
 8002682:	0018      	movs	r0, r3
 8002684:	f7ff ff6a 	bl	800255c <FLASH_WaitForLastOperation>
 8002688:	0003      	movs	r3, r0
 800268a:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800268c:	4b25      	ldr	r3, [pc, #148]	; (8002724 <HAL_FLASHEx_Erase+0xe8>)
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	4b24      	ldr	r3, [pc, #144]	; (8002724 <HAL_FLASHEx_Erase+0xe8>)
 8002692:	2104      	movs	r1, #4
 8002694:	438a      	bics	r2, r1
 8002696:	611a      	str	r2, [r3, #16]
 8002698:	e036      	b.n	8002708 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800269a:	4b21      	ldr	r3, [pc, #132]	; (8002720 <HAL_FLASHEx_Erase+0xe4>)
 800269c:	0018      	movs	r0, r3
 800269e:	f7ff ff5d 	bl	800255c <FLASH_WaitForLastOperation>
 80026a2:	1e03      	subs	r3, r0, #0
 80026a4:	d130      	bne.n	8002708 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2201      	movs	r2, #1
 80026aa:	4252      	negs	r2, r2
 80026ac:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	e01f      	b.n	80026f6 <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 f84d 	bl	8002758 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026be:	250f      	movs	r5, #15
 80026c0:	197c      	adds	r4, r7, r5
 80026c2:	4b17      	ldr	r3, [pc, #92]	; (8002720 <HAL_FLASHEx_Erase+0xe4>)
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7ff ff49 	bl	800255c <FLASH_WaitForLastOperation>
 80026ca:	0003      	movs	r3, r0
 80026cc:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_FLASHEx_Erase+0xe8>)
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	4b14      	ldr	r3, [pc, #80]	; (8002724 <HAL_FLASHEx_Erase+0xe8>)
 80026d4:	2102      	movs	r1, #2
 80026d6:	438a      	bics	r2, r1
 80026d8:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 80026da:	197b      	adds	r3, r7, r5
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	601a      	str	r2, [r3, #0]
            break;
 80026e8:	e00e      	b.n	8002708 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2280      	movs	r2, #128	; 0x80
 80026ee:	00d2      	lsls	r2, r2, #3
 80026f0:	4694      	mov	ip, r2
 80026f2:	4463      	add	r3, ip
 80026f4:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	029a      	lsls	r2, r3, #10
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	d3d6      	bcc.n	80026b6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <HAL_FLASHEx_Erase+0xe0>)
 800270a:	2200      	movs	r2, #0
 800270c:	761a      	strb	r2, [r3, #24]

  return status;
 800270e:	230f      	movs	r3, #15
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	781b      	ldrb	r3, [r3, #0]
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b004      	add	sp, #16
 800271a:	bdb0      	pop	{r4, r5, r7, pc}
 800271c:	200001f0 	.word	0x200001f0
 8002720:	0000c350 	.word	0x0000c350
 8002724:	40022000 	.word	0x40022000

08002728 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800272c:	4b08      	ldr	r3, [pc, #32]	; (8002750 <FLASH_MassErase+0x28>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <FLASH_MassErase+0x2c>)
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <FLASH_MassErase+0x2c>)
 8002738:	2104      	movs	r1, #4
 800273a:	430a      	orrs	r2, r1
 800273c:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <FLASH_MassErase+0x2c>)
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	4b04      	ldr	r3, [pc, #16]	; (8002754 <FLASH_MassErase+0x2c>)
 8002744:	2140      	movs	r1, #64	; 0x40
 8002746:	430a      	orrs	r2, r1
 8002748:	611a      	str	r2, [r3, #16]
}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	200001f0 	.word	0x200001f0
 8002754:	40022000 	.word	0x40022000

08002758 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <FLASH_PageErase+0x34>)
 8002762:	2200      	movs	r2, #0
 8002764:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <FLASH_PageErase+0x38>)
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <FLASH_PageErase+0x38>)
 800276c:	2102      	movs	r1, #2
 800276e:	430a      	orrs	r2, r1
 8002770:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <FLASH_PageErase+0x38>)
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <FLASH_PageErase+0x38>)
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <FLASH_PageErase+0x38>)
 800277e:	2140      	movs	r1, #64	; 0x40
 8002780:	430a      	orrs	r2, r1
 8002782:	611a      	str	r2, [r3, #16]
}
 8002784:	46c0      	nop			; (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	b002      	add	sp, #8
 800278a:	bd80      	pop	{r7, pc}
 800278c:	200001f0 	.word	0x200001f0
 8002790:	40022000 	.word	0x40022000

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002794:	b580      	push	{r7, lr}
 8002796:	b086      	sub	sp, #24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027a2:	e14f      	b.n	8002a44 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2101      	movs	r1, #1
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4091      	lsls	r1, r2
 80027ae:	000a      	movs	r2, r1
 80027b0:	4013      	ands	r3, r2
 80027b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d100      	bne.n	80027bc <HAL_GPIO_Init+0x28>
 80027ba:	e140      	b.n	8002a3e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d003      	beq.n	80027cc <HAL_GPIO_Init+0x38>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b12      	cmp	r3, #18
 80027ca:	d123      	bne.n	8002814 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	08da      	lsrs	r2, r3, #3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3208      	adds	r2, #8
 80027d4:	0092      	lsls	r2, r2, #2
 80027d6:	58d3      	ldr	r3, [r2, r3]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2207      	movs	r2, #7
 80027de:	4013      	ands	r3, r2
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	220f      	movs	r2, #15
 80027e4:	409a      	lsls	r2, r3
 80027e6:	0013      	movs	r3, r2
 80027e8:	43da      	mvns	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4013      	ands	r3, r2
 80027ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	691a      	ldr	r2, [r3, #16]
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	2107      	movs	r1, #7
 80027f8:	400b      	ands	r3, r1
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	409a      	lsls	r2, r3
 80027fe:	0013      	movs	r3, r2
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4313      	orrs	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	08da      	lsrs	r2, r3, #3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	3208      	adds	r2, #8
 800280e:	0092      	lsls	r2, r2, #2
 8002810:	6939      	ldr	r1, [r7, #16]
 8002812:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	2203      	movs	r2, #3
 8002820:	409a      	lsls	r2, r3
 8002822:	0013      	movs	r3, r2
 8002824:	43da      	mvns	r2, r3
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2203      	movs	r2, #3
 8002832:	401a      	ands	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	409a      	lsls	r2, r3
 800283a:	0013      	movs	r3, r2
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b01      	cmp	r3, #1
 800284e:	d00b      	beq.n	8002868 <HAL_GPIO_Init+0xd4>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d007      	beq.n	8002868 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800285c:	2b11      	cmp	r3, #17
 800285e:	d003      	beq.n	8002868 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b12      	cmp	r3, #18
 8002866:	d130      	bne.n	80028ca <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	2203      	movs	r2, #3
 8002874:	409a      	lsls	r2, r3
 8002876:	0013      	movs	r3, r2
 8002878:	43da      	mvns	r2, r3
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68da      	ldr	r2, [r3, #12]
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	409a      	lsls	r2, r3
 800288a:	0013      	movs	r3, r2
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	4313      	orrs	r3, r2
 8002890:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800289e:	2201      	movs	r2, #1
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	409a      	lsls	r2, r3
 80028a4:	0013      	movs	r3, r2
 80028a6:	43da      	mvns	r2, r3
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4013      	ands	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	2201      	movs	r2, #1
 80028b6:	401a      	ands	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	409a      	lsls	r2, r3
 80028bc:	0013      	movs	r3, r2
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	2203      	movs	r2, #3
 80028d6:	409a      	lsls	r2, r3
 80028d8:	0013      	movs	r3, r2
 80028da:	43da      	mvns	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4013      	ands	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	409a      	lsls	r2, r3
 80028ec:	0013      	movs	r3, r2
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	055b      	lsls	r3, r3, #21
 8002902:	4013      	ands	r3, r2
 8002904:	d100      	bne.n	8002908 <HAL_GPIO_Init+0x174>
 8002906:	e09a      	b.n	8002a3e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002908:	4b54      	ldr	r3, [pc, #336]	; (8002a5c <HAL_GPIO_Init+0x2c8>)
 800290a:	699a      	ldr	r2, [r3, #24]
 800290c:	4b53      	ldr	r3, [pc, #332]	; (8002a5c <HAL_GPIO_Init+0x2c8>)
 800290e:	2101      	movs	r1, #1
 8002910:	430a      	orrs	r2, r1
 8002912:	619a      	str	r2, [r3, #24]
 8002914:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <HAL_GPIO_Init+0x2c8>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2201      	movs	r2, #1
 800291a:	4013      	ands	r3, r2
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002920:	4a4f      	ldr	r2, [pc, #316]	; (8002a60 <HAL_GPIO_Init+0x2cc>)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	3302      	adds	r3, #2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	589b      	ldr	r3, [r3, r2]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2203      	movs	r2, #3
 8002932:	4013      	ands	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	220f      	movs	r2, #15
 8002938:	409a      	lsls	r2, r3
 800293a:	0013      	movs	r3, r2
 800293c:	43da      	mvns	r2, r3
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	2390      	movs	r3, #144	; 0x90
 8002948:	05db      	lsls	r3, r3, #23
 800294a:	429a      	cmp	r2, r3
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0x1e2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a44      	ldr	r2, [pc, #272]	; (8002a64 <HAL_GPIO_Init+0x2d0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_GPIO_Init+0x1de>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a43      	ldr	r2, [pc, #268]	; (8002a68 <HAL_GPIO_Init+0x2d4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <HAL_GPIO_Init+0x1da>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a42      	ldr	r2, [pc, #264]	; (8002a6c <HAL_GPIO_Init+0x2d8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_GPIO_Init+0x1d6>
 8002966:	2303      	movs	r3, #3
 8002968:	e006      	b.n	8002978 <HAL_GPIO_Init+0x1e4>
 800296a:	2305      	movs	r3, #5
 800296c:	e004      	b.n	8002978 <HAL_GPIO_Init+0x1e4>
 800296e:	2302      	movs	r3, #2
 8002970:	e002      	b.n	8002978 <HAL_GPIO_Init+0x1e4>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_GPIO_Init+0x1e4>
 8002976:	2300      	movs	r3, #0
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	2103      	movs	r1, #3
 800297c:	400a      	ands	r2, r1
 800297e:	0092      	lsls	r2, r2, #2
 8002980:	4093      	lsls	r3, r2
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002988:	4935      	ldr	r1, [pc, #212]	; (8002a60 <HAL_GPIO_Init+0x2cc>)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3302      	adds	r3, #2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002996:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	43da      	mvns	r2, r3
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4013      	ands	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	025b      	lsls	r3, r3, #9
 80029ae:	4013      	ands	r3, r2
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80029ba:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80029c0:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	43da      	mvns	r2, r3
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	029b      	lsls	r3, r3, #10
 80029d8:	4013      	ands	r3, r2
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029e4:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029ea:	4b21      	ldr	r3, [pc, #132]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	43da      	mvns	r2, r3
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	2380      	movs	r3, #128	; 0x80
 8002a00:	035b      	lsls	r3, r3, #13
 8002a02:	4013      	ands	r3, r2
 8002a04:	d003      	beq.n	8002a0e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a0e:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002a14:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	039b      	lsls	r3, r3, #14
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d003      	beq.n	8002a38 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4313      	orrs	r3, r2
 8002a36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a38:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <HAL_GPIO_Init+0x2dc>)
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	3301      	adds	r3, #1
 8002a42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	40da      	lsrs	r2, r3
 8002a4c:	1e13      	subs	r3, r2, #0
 8002a4e:	d000      	beq.n	8002a52 <HAL_GPIO_Init+0x2be>
 8002a50:	e6a8      	b.n	80027a4 <HAL_GPIO_Init+0x10>
  } 
}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b006      	add	sp, #24
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40010000 	.word	0x40010000
 8002a64:	48000400 	.word	0x48000400
 8002a68:	48000800 	.word	0x48000800
 8002a6c:	48000c00 	.word	0x48000c00
 8002a70:	40010400 	.word	0x40010400

08002a74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	000a      	movs	r2, r1
 8002a7e:	1cbb      	adds	r3, r7, #2
 8002a80:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	1cba      	adds	r2, r7, #2
 8002a88:	8812      	ldrh	r2, [r2, #0]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002a8e:	230f      	movs	r3, #15
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	2201      	movs	r2, #1
 8002a94:	701a      	strb	r2, [r3, #0]
 8002a96:	e003      	b.n	8002aa0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a98:	230f      	movs	r3, #15
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002aa0:	230f      	movs	r3, #15
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	781b      	ldrb	r3, [r3, #0]
  }
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	b004      	add	sp, #16
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	0008      	movs	r0, r1
 8002ab8:	0011      	movs	r1, r2
 8002aba:	1cbb      	adds	r3, r7, #2
 8002abc:	1c02      	adds	r2, r0, #0
 8002abe:	801a      	strh	r2, [r3, #0]
 8002ac0:	1c7b      	adds	r3, r7, #1
 8002ac2:	1c0a      	adds	r2, r1, #0
 8002ac4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac6:	1c7b      	adds	r3, r7, #1
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d004      	beq.n	8002ad8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ace:	1cbb      	adds	r3, r7, #2
 8002ad0:	881a      	ldrh	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ad6:	e003      	b.n	8002ae0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ad8:	1cbb      	adds	r3, r7, #2
 8002ada:	881a      	ldrh	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b002      	add	sp, #8
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	0002      	movs	r2, r0
 8002af0:	1dbb      	adds	r3, r7, #6
 8002af2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002af4:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	1dba      	adds	r2, r7, #6
 8002afa:	8812      	ldrh	r2, [r2, #0]
 8002afc:	4013      	ands	r3, r2
 8002afe:	d008      	beq.n	8002b12 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002b02:	1dba      	adds	r2, r7, #6
 8002b04:	8812      	ldrh	r2, [r2, #0]
 8002b06:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b08:	1dbb      	adds	r3, r7, #6
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f000 f807 	bl	8002b20 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	46bd      	mov	sp, r7
 8002b16:	b002      	add	sp, #8
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	46c0      	nop			; (mov r8, r8)
 8002b1c:	40010400 	.word	0x40010400

08002b20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	0002      	movs	r2, r0
 8002b28:	1dbb      	adds	r3, r7, #6
 8002b2a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b002      	add	sp, #8
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b088      	sub	sp, #32
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e303      	b.n	800314e <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d100      	bne.n	8002b52 <HAL_RCC_OscConfig+0x1e>
 8002b50:	e08d      	b.n	8002c6e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002b52:	4bc4      	ldr	r3, [pc, #784]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	220c      	movs	r2, #12
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b04      	cmp	r3, #4
 8002b5c:	d00e      	beq.n	8002b7c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b5e:	4bc1      	ldr	r3, [pc, #772]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	220c      	movs	r2, #12
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d116      	bne.n	8002b98 <HAL_RCC_OscConfig+0x64>
 8002b6a:	4bbe      	ldr	r3, [pc, #760]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	025b      	lsls	r3, r3, #9
 8002b72:	401a      	ands	r2, r3
 8002b74:	2380      	movs	r3, #128	; 0x80
 8002b76:	025b      	lsls	r3, r3, #9
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d10d      	bne.n	8002b98 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	4bb9      	ldr	r3, [pc, #740]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	029b      	lsls	r3, r3, #10
 8002b84:	4013      	ands	r3, r2
 8002b86:	d100      	bne.n	8002b8a <HAL_RCC_OscConfig+0x56>
 8002b88:	e070      	b.n	8002c6c <HAL_RCC_OscConfig+0x138>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d000      	beq.n	8002b94 <HAL_RCC_OscConfig+0x60>
 8002b92:	e06b      	b.n	8002c6c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e2da      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x7c>
 8002ba0:	4bb0      	ldr	r3, [pc, #704]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4baf      	ldr	r3, [pc, #700]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002ba6:	2180      	movs	r1, #128	; 0x80
 8002ba8:	0249      	lsls	r1, r1, #9
 8002baa:	430a      	orrs	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	e02f      	b.n	8002c10 <HAL_RCC_OscConfig+0xdc>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10c      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x9e>
 8002bb8:	4baa      	ldr	r3, [pc, #680]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4ba9      	ldr	r3, [pc, #676]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002bbe:	49aa      	ldr	r1, [pc, #680]	; (8002e68 <HAL_RCC_OscConfig+0x334>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	4ba7      	ldr	r3, [pc, #668]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	4ba6      	ldr	r3, [pc, #664]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002bca:	49a8      	ldr	r1, [pc, #672]	; (8002e6c <HAL_RCC_OscConfig+0x338>)
 8002bcc:	400a      	ands	r2, r1
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	e01e      	b.n	8002c10 <HAL_RCC_OscConfig+0xdc>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	2b05      	cmp	r3, #5
 8002bd8:	d10e      	bne.n	8002bf8 <HAL_RCC_OscConfig+0xc4>
 8002bda:	4ba2      	ldr	r3, [pc, #648]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	4ba1      	ldr	r3, [pc, #644]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002be0:	2180      	movs	r1, #128	; 0x80
 8002be2:	02c9      	lsls	r1, r1, #11
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	4b9e      	ldr	r3, [pc, #632]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b9d      	ldr	r3, [pc, #628]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002bee:	2180      	movs	r1, #128	; 0x80
 8002bf0:	0249      	lsls	r1, r1, #9
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCC_OscConfig+0xdc>
 8002bf8:	4b9a      	ldr	r3, [pc, #616]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4b99      	ldr	r3, [pc, #612]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002bfe:	499a      	ldr	r1, [pc, #616]	; (8002e68 <HAL_RCC_OscConfig+0x334>)
 8002c00:	400a      	ands	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	4b97      	ldr	r3, [pc, #604]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b96      	ldr	r3, [pc, #600]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002c0a:	4998      	ldr	r1, [pc, #608]	; (8002e6c <HAL_RCC_OscConfig+0x338>)
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d014      	beq.n	8002c42 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7ff fab0 	bl	800217c <HAL_GetTick>
 8002c1c:	0003      	movs	r3, r0
 8002c1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c22:	f7ff faab 	bl	800217c <HAL_GetTick>
 8002c26:	0002      	movs	r2, r0
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b64      	cmp	r3, #100	; 0x64
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e28c      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c34:	4b8b      	ldr	r3, [pc, #556]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	029b      	lsls	r3, r3, #10
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0xee>
 8002c40:	e015      	b.n	8002c6e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c42:	f7ff fa9b 	bl	800217c <HAL_GetTick>
 8002c46:	0003      	movs	r3, r0
 8002c48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c4c:	f7ff fa96 	bl	800217c <HAL_GetTick>
 8002c50:	0002      	movs	r2, r0
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b64      	cmp	r3, #100	; 0x64
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e277      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5e:	4b81      	ldr	r3, [pc, #516]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	029b      	lsls	r3, r3, #10
 8002c66:	4013      	ands	r3, r2
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x118>
 8002c6a:	e000      	b.n	8002c6e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c6c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2202      	movs	r2, #2
 8002c74:	4013      	ands	r3, r2
 8002c76:	d100      	bne.n	8002c7a <HAL_RCC_OscConfig+0x146>
 8002c78:	e069      	b.n	8002d4e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002c7a:	4b7a      	ldr	r3, [pc, #488]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	220c      	movs	r2, #12
 8002c80:	4013      	ands	r3, r2
 8002c82:	d00b      	beq.n	8002c9c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002c84:	4b77      	ldr	r3, [pc, #476]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	220c      	movs	r2, #12
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d11c      	bne.n	8002cca <HAL_RCC_OscConfig+0x196>
 8002c90:	4b74      	ldr	r3, [pc, #464]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	2380      	movs	r3, #128	; 0x80
 8002c96:	025b      	lsls	r3, r3, #9
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d116      	bne.n	8002cca <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9c:	4b71      	ldr	r3, [pc, #452]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d005      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x17e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e24d      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4b6c      	ldr	r3, [pc, #432]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	22f8      	movs	r2, #248	; 0xf8
 8002cb8:	4393      	bics	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	00da      	lsls	r2, r3, #3
 8002cc2:	4b68      	ldr	r3, [pc, #416]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc8:	e041      	b.n	8002d4e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d024      	beq.n	8002d1c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd2:	4b64      	ldr	r3, [pc, #400]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b63      	ldr	r3, [pc, #396]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002cd8:	2101      	movs	r1, #1
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cde:	f7ff fa4d 	bl	800217c <HAL_GetTick>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce8:	f7ff fa48 	bl	800217c <HAL_GetTick>
 8002cec:	0002      	movs	r2, r0
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e229      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfa:	4b5a      	ldr	r3, [pc, #360]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	4013      	ands	r3, r2
 8002d02:	d0f1      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d04:	4b57      	ldr	r3, [pc, #348]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	22f8      	movs	r2, #248	; 0xf8
 8002d0a:	4393      	bics	r3, r2
 8002d0c:	0019      	movs	r1, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	00da      	lsls	r2, r3, #3
 8002d14:	4b53      	ldr	r3, [pc, #332]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002d16:	430a      	orrs	r2, r1
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	e018      	b.n	8002d4e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d1c:	4b51      	ldr	r3, [pc, #324]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4b50      	ldr	r3, [pc, #320]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002d22:	2101      	movs	r1, #1
 8002d24:	438a      	bics	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7ff fa28 	bl	800217c <HAL_GetTick>
 8002d2c:	0003      	movs	r3, r0
 8002d2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d32:	f7ff fa23 	bl	800217c <HAL_GetTick>
 8002d36:	0002      	movs	r2, r0
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e204      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d44:	4b47      	ldr	r3, [pc, #284]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d1f1      	bne.n	8002d32 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2208      	movs	r2, #8
 8002d54:	4013      	ands	r3, r2
 8002d56:	d036      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69db      	ldr	r3, [r3, #28]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d019      	beq.n	8002d94 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d60:	4b40      	ldr	r3, [pc, #256]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002d62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d64:	4b3f      	ldr	r3, [pc, #252]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002d66:	2101      	movs	r1, #1
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d6c:	f7ff fa06 	bl	800217c <HAL_GetTick>
 8002d70:	0003      	movs	r3, r0
 8002d72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d76:	f7ff fa01 	bl	800217c <HAL_GetTick>
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e1e2      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d88:	4b36      	ldr	r3, [pc, #216]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d0f1      	beq.n	8002d76 <HAL_RCC_OscConfig+0x242>
 8002d92:	e018      	b.n	8002dc6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d94:	4b33      	ldr	r3, [pc, #204]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002d96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d98:	4b32      	ldr	r3, [pc, #200]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	438a      	bics	r2, r1
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da0:	f7ff f9ec 	bl	800217c <HAL_GetTick>
 8002da4:	0003      	movs	r3, r0
 8002da6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002daa:	f7ff f9e7 	bl	800217c <HAL_GetTick>
 8002dae:	0002      	movs	r2, r0
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e1c8      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dbc:	4b29      	ldr	r3, [pc, #164]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d1f1      	bne.n	8002daa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2204      	movs	r2, #4
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d100      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x29e>
 8002dd0:	e0b6      	b.n	8002f40 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd2:	231f      	movs	r3, #31
 8002dd4:	18fb      	adds	r3, r7, r3
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dda:	4b22      	ldr	r3, [pc, #136]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002ddc:	69da      	ldr	r2, [r3, #28]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	055b      	lsls	r3, r3, #21
 8002de2:	4013      	ands	r3, r2
 8002de4:	d111      	bne.n	8002e0a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de6:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	4b1e      	ldr	r3, [pc, #120]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002dec:	2180      	movs	r1, #128	; 0x80
 8002dee:	0549      	lsls	r1, r1, #21
 8002df0:	430a      	orrs	r2, r1
 8002df2:	61da      	str	r2, [r3, #28]
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	2380      	movs	r3, #128	; 0x80
 8002dfa:	055b      	lsls	r3, r3, #21
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
 8002e00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e02:	231f      	movs	r3, #31
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0a:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <HAL_RCC_OscConfig+0x33c>)
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	2380      	movs	r3, #128	; 0x80
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4013      	ands	r3, r2
 8002e14:	d11a      	bne.n	8002e4c <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e16:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <HAL_RCC_OscConfig+0x33c>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <HAL_RCC_OscConfig+0x33c>)
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	0049      	lsls	r1, r1, #1
 8002e20:	430a      	orrs	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e24:	f7ff f9aa 	bl	800217c <HAL_GetTick>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2e:	f7ff f9a5 	bl	800217c <HAL_GetTick>
 8002e32:	0002      	movs	r2, r0
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b64      	cmp	r3, #100	; 0x64
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e186      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e40:	4b0b      	ldr	r3, [pc, #44]	; (8002e70 <HAL_RCC_OscConfig+0x33c>)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d10f      	bne.n	8002e74 <HAL_RCC_OscConfig+0x340>
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002e56:	6a1a      	ldr	r2, [r3, #32]
 8002e58:	4b02      	ldr	r3, [pc, #8]	; (8002e64 <HAL_RCC_OscConfig+0x330>)
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	621a      	str	r2, [r3, #32]
 8002e60:	e036      	b.n	8002ed0 <HAL_RCC_OscConfig+0x39c>
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	40021000 	.word	0x40021000
 8002e68:	fffeffff 	.word	0xfffeffff
 8002e6c:	fffbffff 	.word	0xfffbffff
 8002e70:	40007000 	.word	0x40007000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10c      	bne.n	8002e96 <HAL_RCC_OscConfig+0x362>
 8002e7c:	4bb6      	ldr	r3, [pc, #728]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002e7e:	6a1a      	ldr	r2, [r3, #32]
 8002e80:	4bb5      	ldr	r3, [pc, #724]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002e82:	2101      	movs	r1, #1
 8002e84:	438a      	bics	r2, r1
 8002e86:	621a      	str	r2, [r3, #32]
 8002e88:	4bb3      	ldr	r3, [pc, #716]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002e8a:	6a1a      	ldr	r2, [r3, #32]
 8002e8c:	4bb2      	ldr	r3, [pc, #712]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002e8e:	2104      	movs	r1, #4
 8002e90:	438a      	bics	r2, r1
 8002e92:	621a      	str	r2, [r3, #32]
 8002e94:	e01c      	b.n	8002ed0 <HAL_RCC_OscConfig+0x39c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x384>
 8002e9e:	4bae      	ldr	r3, [pc, #696]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002ea0:	6a1a      	ldr	r2, [r3, #32]
 8002ea2:	4bad      	ldr	r3, [pc, #692]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002ea4:	2104      	movs	r1, #4
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	621a      	str	r2, [r3, #32]
 8002eaa:	4bab      	ldr	r3, [pc, #684]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002eac:	6a1a      	ldr	r2, [r3, #32]
 8002eae:	4baa      	ldr	r3, [pc, #680]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	621a      	str	r2, [r3, #32]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0x39c>
 8002eb8:	4ba7      	ldr	r3, [pc, #668]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002eba:	6a1a      	ldr	r2, [r3, #32]
 8002ebc:	4ba6      	ldr	r3, [pc, #664]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	438a      	bics	r2, r1
 8002ec2:	621a      	str	r2, [r3, #32]
 8002ec4:	4ba4      	ldr	r3, [pc, #656]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002ec6:	6a1a      	ldr	r2, [r3, #32]
 8002ec8:	4ba3      	ldr	r3, [pc, #652]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002eca:	2104      	movs	r1, #4
 8002ecc:	438a      	bics	r2, r1
 8002ece:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d014      	beq.n	8002f02 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed8:	f7ff f950 	bl	800217c <HAL_GetTick>
 8002edc:	0003      	movs	r3, r0
 8002ede:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee0:	e009      	b.n	8002ef6 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7ff f94b 	bl	800217c <HAL_GetTick>
 8002ee6:	0002      	movs	r2, r0
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	4a9b      	ldr	r2, [pc, #620]	; (800315c <HAL_RCC_OscConfig+0x628>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e12b      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ef6:	4b98      	ldr	r3, [pc, #608]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	2202      	movs	r2, #2
 8002efc:	4013      	ands	r3, r2
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x3ae>
 8002f00:	e013      	b.n	8002f2a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f02:	f7ff f93b 	bl	800217c <HAL_GetTick>
 8002f06:	0003      	movs	r3, r0
 8002f08:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f0a:	e009      	b.n	8002f20 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0c:	f7ff f936 	bl	800217c <HAL_GetTick>
 8002f10:	0002      	movs	r2, r0
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	4a91      	ldr	r2, [pc, #580]	; (800315c <HAL_RCC_OscConfig+0x628>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e116      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f20:	4b8d      	ldr	r3, [pc, #564]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002f22:	6a1b      	ldr	r3, [r3, #32]
 8002f24:	2202      	movs	r2, #2
 8002f26:	4013      	ands	r3, r2
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f2a:	231f      	movs	r3, #31
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f34:	4b88      	ldr	r3, [pc, #544]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	4b87      	ldr	r3, [pc, #540]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002f3a:	4989      	ldr	r1, [pc, #548]	; (8003160 <HAL_RCC_OscConfig+0x62c>)
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2210      	movs	r2, #16
 8002f46:	4013      	ands	r3, r2
 8002f48:	d063      	beq.n	8003012 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d12a      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f52:	4b81      	ldr	r3, [pc, #516]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f56:	4b80      	ldr	r3, [pc, #512]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002f58:	2104      	movs	r1, #4
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002f5e:	4b7e      	ldr	r3, [pc, #504]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f62:	4b7d      	ldr	r3, [pc, #500]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002f64:	2101      	movs	r1, #1
 8002f66:	430a      	orrs	r2, r1
 8002f68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6a:	f7ff f907 	bl	800217c <HAL_GetTick>
 8002f6e:	0003      	movs	r3, r0
 8002f70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f74:	f7ff f902 	bl	800217c <HAL_GetTick>
 8002f78:	0002      	movs	r2, r0
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e0e3      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002f86:	4b74      	ldr	r3, [pc, #464]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d0f1      	beq.n	8002f74 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f90:	4b71      	ldr	r3, [pc, #452]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f94:	22f8      	movs	r2, #248	; 0xf8
 8002f96:	4393      	bics	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	00da      	lsls	r2, r3, #3
 8002fa0:	4b6d      	ldr	r3, [pc, #436]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fa6:	e034      	b.n	8003012 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	3305      	adds	r3, #5
 8002fae:	d111      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002fb0:	4b69      	ldr	r3, [pc, #420]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002fb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fb4:	4b68      	ldr	r3, [pc, #416]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002fb6:	2104      	movs	r1, #4
 8002fb8:	438a      	bics	r2, r1
 8002fba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002fbc:	4b66      	ldr	r3, [pc, #408]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc0:	22f8      	movs	r2, #248	; 0xf8
 8002fc2:	4393      	bics	r3, r2
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	00da      	lsls	r2, r3, #3
 8002fcc:	4b62      	ldr	r3, [pc, #392]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fd2:	e01e      	b.n	8003012 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002fd4:	4b60      	ldr	r3, [pc, #384]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd8:	4b5f      	ldr	r3, [pc, #380]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002fda:	2104      	movs	r1, #4
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002fe0:	4b5d      	ldr	r3, [pc, #372]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe4:	4b5c      	ldr	r3, [pc, #368]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	438a      	bics	r2, r1
 8002fea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fec:	f7ff f8c6 	bl	800217c <HAL_GetTick>
 8002ff0:	0003      	movs	r3, r0
 8002ff2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ff6:	f7ff f8c1 	bl	800217c <HAL_GetTick>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e0a2      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003008:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 800300a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300c:	2202      	movs	r2, #2
 800300e:	4013      	ands	r3, r2
 8003010:	d1f1      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d100      	bne.n	800301c <HAL_RCC_OscConfig+0x4e8>
 800301a:	e097      	b.n	800314c <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800301c:	4b4e      	ldr	r3, [pc, #312]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	220c      	movs	r2, #12
 8003022:	4013      	ands	r3, r2
 8003024:	2b08      	cmp	r3, #8
 8003026:	d100      	bne.n	800302a <HAL_RCC_OscConfig+0x4f6>
 8003028:	e06b      	b.n	8003102 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	2b02      	cmp	r3, #2
 8003030:	d14c      	bne.n	80030cc <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003032:	4b49      	ldr	r3, [pc, #292]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b48      	ldr	r3, [pc, #288]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8003038:	494a      	ldr	r1, [pc, #296]	; (8003164 <HAL_RCC_OscConfig+0x630>)
 800303a:	400a      	ands	r2, r1
 800303c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7ff f89d 	bl	800217c <HAL_GetTick>
 8003042:	0003      	movs	r3, r0
 8003044:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003048:	f7ff f898 	bl	800217c <HAL_GetTick>
 800304c:	0002      	movs	r2, r0
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e079      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305a:	4b3f      	ldr	r3, [pc, #252]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	049b      	lsls	r3, r3, #18
 8003062:	4013      	ands	r3, r2
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003066:	4b3c      	ldr	r3, [pc, #240]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	220f      	movs	r2, #15
 800306c:	4393      	bics	r3, r2
 800306e:	0019      	movs	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003074:	4b38      	ldr	r3, [pc, #224]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8003076:	430a      	orrs	r2, r1
 8003078:	62da      	str	r2, [r3, #44]	; 0x2c
 800307a:	4b37      	ldr	r3, [pc, #220]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	4a3a      	ldr	r2, [pc, #232]	; (8003168 <HAL_RCC_OscConfig+0x634>)
 8003080:	4013      	ands	r3, r2
 8003082:	0019      	movs	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	431a      	orrs	r2, r3
 800308e:	4b32      	ldr	r3, [pc, #200]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003094:	4b30      	ldr	r3, [pc, #192]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 800309a:	2180      	movs	r1, #128	; 0x80
 800309c:	0449      	lsls	r1, r1, #17
 800309e:	430a      	orrs	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a2:	f7ff f86b 	bl	800217c <HAL_GetTick>
 80030a6:	0003      	movs	r3, r0
 80030a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ac:	f7ff f866 	bl	800217c <HAL_GetTick>
 80030b0:	0002      	movs	r2, r0
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e047      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	049b      	lsls	r3, r3, #18
 80030c6:	4013      	ands	r3, r2
 80030c8:	d0f0      	beq.n	80030ac <HAL_RCC_OscConfig+0x578>
 80030ca:	e03f      	b.n	800314c <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030cc:	4b22      	ldr	r3, [pc, #136]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b21      	ldr	r3, [pc, #132]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 80030d2:	4924      	ldr	r1, [pc, #144]	; (8003164 <HAL_RCC_OscConfig+0x630>)
 80030d4:	400a      	ands	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7ff f850 	bl	800217c <HAL_GetTick>
 80030dc:	0003      	movs	r3, r0
 80030de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e2:	f7ff f84b 	bl	800217c <HAL_GetTick>
 80030e6:	0002      	movs	r2, r0
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e02c      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030f4:	4b18      	ldr	r3, [pc, #96]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	049b      	lsls	r3, r3, #18
 80030fc:	4013      	ands	r3, r2
 80030fe:	d1f0      	bne.n	80030e2 <HAL_RCC_OscConfig+0x5ae>
 8003100:	e024      	b.n	800314c <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d101      	bne.n	800310e <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e01f      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800310e:	4b12      	ldr	r3, [pc, #72]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003114:	4b10      	ldr	r3, [pc, #64]	; (8003158 <HAL_RCC_OscConfig+0x624>)
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	025b      	lsls	r3, r3, #9
 8003120:	401a      	ands	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	429a      	cmp	r2, r3
 8003128:	d10e      	bne.n	8003148 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	220f      	movs	r2, #15
 800312e:	401a      	ands	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d107      	bne.n	8003148 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	23f0      	movs	r3, #240	; 0xf0
 800313c:	039b      	lsls	r3, r3, #14
 800313e:	401a      	ands	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e000      	b.n	800314e <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b008      	add	sp, #32
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	40021000 	.word	0x40021000
 800315c:	00001388 	.word	0x00001388
 8003160:	efffffff 	.word	0xefffffff
 8003164:	feffffff 	.word	0xfeffffff
 8003168:	ffc2ffff 	.word	0xffc2ffff

0800316c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0b3      	b.n	80032e8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003180:	4b5b      	ldr	r3, [pc, #364]	; (80032f0 <HAL_RCC_ClockConfig+0x184>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2201      	movs	r2, #1
 8003186:	4013      	ands	r3, r2
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d911      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b58      	ldr	r3, [pc, #352]	; (80032f0 <HAL_RCC_ClockConfig+0x184>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2201      	movs	r2, #1
 8003194:	4393      	bics	r3, r2
 8003196:	0019      	movs	r1, r3
 8003198:	4b55      	ldr	r3, [pc, #340]	; (80032f0 <HAL_RCC_ClockConfig+0x184>)
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a0:	4b53      	ldr	r3, [pc, #332]	; (80032f0 <HAL_RCC_ClockConfig+0x184>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2201      	movs	r2, #1
 80031a6:	4013      	ands	r3, r2
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d001      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e09a      	b.n	80032e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2202      	movs	r2, #2
 80031b8:	4013      	ands	r3, r2
 80031ba:	d015      	beq.n	80031e8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2204      	movs	r2, #4
 80031c2:	4013      	ands	r3, r2
 80031c4:	d006      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80031c6:	4b4b      	ldr	r3, [pc, #300]	; (80032f4 <HAL_RCC_ClockConfig+0x188>)
 80031c8:	685a      	ldr	r2, [r3, #4]
 80031ca:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <HAL_RCC_ClockConfig+0x188>)
 80031cc:	21e0      	movs	r1, #224	; 0xe0
 80031ce:	00c9      	lsls	r1, r1, #3
 80031d0:	430a      	orrs	r2, r1
 80031d2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d4:	4b47      	ldr	r3, [pc, #284]	; (80032f4 <HAL_RCC_ClockConfig+0x188>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	22f0      	movs	r2, #240	; 0xf0
 80031da:	4393      	bics	r3, r2
 80031dc:	0019      	movs	r1, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689a      	ldr	r2, [r3, #8]
 80031e2:	4b44      	ldr	r3, [pc, #272]	; (80032f4 <HAL_RCC_ClockConfig+0x188>)
 80031e4:	430a      	orrs	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2201      	movs	r2, #1
 80031ee:	4013      	ands	r3, r2
 80031f0:	d040      	beq.n	8003274 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d107      	bne.n	800320a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fa:	4b3e      	ldr	r3, [pc, #248]	; (80032f4 <HAL_RCC_ClockConfig+0x188>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	2380      	movs	r3, #128	; 0x80
 8003200:	029b      	lsls	r3, r3, #10
 8003202:	4013      	ands	r3, r2
 8003204:	d114      	bne.n	8003230 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e06e      	b.n	80032e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d107      	bne.n	8003222 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003212:	4b38      	ldr	r3, [pc, #224]	; (80032f4 <HAL_RCC_ClockConfig+0x188>)
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	049b      	lsls	r3, r3, #18
 800321a:	4013      	ands	r3, r2
 800321c:	d108      	bne.n	8003230 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e062      	b.n	80032e8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003222:	4b34      	ldr	r3, [pc, #208]	; (80032f4 <HAL_RCC_ClockConfig+0x188>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2202      	movs	r2, #2
 8003228:	4013      	ands	r3, r2
 800322a:	d101      	bne.n	8003230 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e05b      	b.n	80032e8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003230:	4b30      	ldr	r3, [pc, #192]	; (80032f4 <HAL_RCC_ClockConfig+0x188>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2203      	movs	r2, #3
 8003236:	4393      	bics	r3, r2
 8003238:	0019      	movs	r1, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	4b2d      	ldr	r3, [pc, #180]	; (80032f4 <HAL_RCC_ClockConfig+0x188>)
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003244:	f7fe ff9a 	bl	800217c <HAL_GetTick>
 8003248:	0003      	movs	r3, r0
 800324a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800324c:	e009      	b.n	8003262 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324e:	f7fe ff95 	bl	800217c <HAL_GetTick>
 8003252:	0002      	movs	r2, r0
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	4a27      	ldr	r2, [pc, #156]	; (80032f8 <HAL_RCC_ClockConfig+0x18c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e042      	b.n	80032e8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003262:	4b24      	ldr	r3, [pc, #144]	; (80032f4 <HAL_RCC_ClockConfig+0x188>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	220c      	movs	r2, #12
 8003268:	401a      	ands	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	429a      	cmp	r2, r3
 8003272:	d1ec      	bne.n	800324e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003274:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <HAL_RCC_ClockConfig+0x184>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2201      	movs	r2, #1
 800327a:	4013      	ands	r3, r2
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d211      	bcs.n	80032a6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <HAL_RCC_ClockConfig+0x184>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2201      	movs	r2, #1
 8003288:	4393      	bics	r3, r2
 800328a:	0019      	movs	r1, r3
 800328c:	4b18      	ldr	r3, [pc, #96]	; (80032f0 <HAL_RCC_ClockConfig+0x184>)
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003294:	4b16      	ldr	r3, [pc, #88]	; (80032f0 <HAL_RCC_ClockConfig+0x184>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2201      	movs	r2, #1
 800329a:	4013      	ands	r3, r2
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d001      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e020      	b.n	80032e8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2204      	movs	r2, #4
 80032ac:	4013      	ands	r3, r2
 80032ae:	d009      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80032b0:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <HAL_RCC_ClockConfig+0x188>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	4a11      	ldr	r2, [pc, #68]	; (80032fc <HAL_RCC_ClockConfig+0x190>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	0019      	movs	r1, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <HAL_RCC_ClockConfig+0x188>)
 80032c0:	430a      	orrs	r2, r1
 80032c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80032c4:	f000 f820 	bl	8003308 <HAL_RCC_GetSysClockFreq>
 80032c8:	0001      	movs	r1, r0
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <HAL_RCC_ClockConfig+0x188>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	220f      	movs	r2, #15
 80032d2:	4013      	ands	r3, r2
 80032d4:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <HAL_RCC_ClockConfig+0x194>)
 80032d6:	5cd3      	ldrb	r3, [r2, r3]
 80032d8:	000a      	movs	r2, r1
 80032da:	40da      	lsrs	r2, r3
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_RCC_ClockConfig+0x198>)
 80032de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7fe ff05 	bl	80020f0 <HAL_InitTick>
  
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	0018      	movs	r0, r3
 80032ea:	46bd      	mov	sp, r7
 80032ec:	b004      	add	sp, #16
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40022000 	.word	0x40022000
 80032f4:	40021000 	.word	0x40021000
 80032f8:	00001388 	.word	0x00001388
 80032fc:	fffff8ff 	.word	0xfffff8ff
 8003300:	08003c0c 	.word	0x08003c0c
 8003304:	20000090 	.word	0x20000090

08003308 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003308:	b590      	push	{r4, r7, lr}
 800330a:	b08f      	sub	sp, #60	; 0x3c
 800330c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800330e:	2314      	movs	r3, #20
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	4a2b      	ldr	r2, [pc, #172]	; (80033c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003314:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003316:	c313      	stmia	r3!, {r0, r1, r4}
 8003318:	6812      	ldr	r2, [r2, #0]
 800331a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800331c:	1d3b      	adds	r3, r7, #4
 800331e:	4a29      	ldr	r2, [pc, #164]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003320:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003322:	c313      	stmia	r3!, {r0, r1, r4}
 8003324:	6812      	ldr	r2, [r2, #0]
 8003326:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800332c:	2300      	movs	r3, #0
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003330:	2300      	movs	r3, #0
 8003332:	637b      	str	r3, [r7, #52]	; 0x34
 8003334:	2300      	movs	r3, #0
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800333c:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003344:	220c      	movs	r2, #12
 8003346:	4013      	ands	r3, r2
 8003348:	2b04      	cmp	r3, #4
 800334a:	d002      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0x4a>
 800334c:	2b08      	cmp	r3, #8
 800334e:	d003      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x50>
 8003350:	e02d      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003352:	4b1e      	ldr	r3, [pc, #120]	; (80033cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003354:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003356:	e02d      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335a:	0c9b      	lsrs	r3, r3, #18
 800335c:	220f      	movs	r2, #15
 800335e:	4013      	ands	r3, r2
 8003360:	2214      	movs	r2, #20
 8003362:	18ba      	adds	r2, r7, r2
 8003364:	5cd3      	ldrb	r3, [r2, r3]
 8003366:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003368:	4b17      	ldr	r3, [pc, #92]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	220f      	movs	r2, #15
 800336e:	4013      	ands	r3, r2
 8003370:	1d3a      	adds	r2, r7, #4
 8003372:	5cd3      	ldrb	r3, [r2, r3]
 8003374:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	025b      	lsls	r3, r3, #9
 800337c:	4013      	ands	r3, r2
 800337e:	d009      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003382:	4812      	ldr	r0, [pc, #72]	; (80033cc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003384:	f7fc fec0 	bl	8000108 <__udivsi3>
 8003388:	0003      	movs	r3, r0
 800338a:	001a      	movs	r2, r3
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	4353      	muls	r3, r2
 8003390:	637b      	str	r3, [r7, #52]	; 0x34
 8003392:	e009      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003396:	000a      	movs	r2, r1
 8003398:	0152      	lsls	r2, r2, #5
 800339a:	1a52      	subs	r2, r2, r1
 800339c:	0193      	lsls	r3, r2, #6
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	185b      	adds	r3, r3, r1
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80033a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033ac:	e002      	b.n	80033b4 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033ae:	4b07      	ldr	r3, [pc, #28]	; (80033cc <HAL_RCC_GetSysClockFreq+0xc4>)
 80033b0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80033b2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80033b6:	0018      	movs	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b00f      	add	sp, #60	; 0x3c
 80033bc:	bd90      	pop	{r4, r7, pc}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	08003bc4 	.word	0x08003bc4
 80033c4:	08003bd4 	.word	0x08003bd4
 80033c8:	40021000 	.word	0x40021000
 80033cc:	007a1200 	.word	0x007a1200

080033d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e01e      	b.n	8003420 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	223d      	movs	r2, #61	; 0x3d
 80033e6:	5c9b      	ldrb	r3, [r3, r2]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d107      	bne.n	80033fe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	223c      	movs	r2, #60	; 0x3c
 80033f2:	2100      	movs	r1, #0
 80033f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7fe fae5 	bl	80019c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	223d      	movs	r2, #61	; 0x3d
 8003402:	2102      	movs	r1, #2
 8003404:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3304      	adds	r3, #4
 800340e:	0019      	movs	r1, r3
 8003410:	0010      	movs	r0, r2
 8003412:	f000 fa27 	bl	8003864 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	223d      	movs	r2, #61	; 0x3d
 800341a:	2101      	movs	r1, #1
 800341c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	0018      	movs	r0, r3
 8003422:	46bd      	mov	sp, r7
 8003424:	b002      	add	sp, #8
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2101      	movs	r1, #1
 800343c:	430a      	orrs	r2, r1
 800343e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2207      	movs	r2, #7
 8003448:	4013      	ands	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2b06      	cmp	r3, #6
 8003450:	d007      	beq.n	8003462 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2101      	movs	r1, #1
 800345e:	430a      	orrs	r2, r1
 8003460:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003462:	2300      	movs	r3, #0
}
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	b004      	add	sp, #16
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2202      	movs	r2, #2
 800347c:	4013      	ands	r3, r2
 800347e:	2b02      	cmp	r3, #2
 8003480:	d124      	bne.n	80034cc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2202      	movs	r2, #2
 800348a:	4013      	ands	r3, r2
 800348c:	2b02      	cmp	r3, #2
 800348e:	d11d      	bne.n	80034cc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2203      	movs	r2, #3
 8003496:	4252      	negs	r2, r2
 8003498:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2203      	movs	r2, #3
 80034a8:	4013      	ands	r3, r2
 80034aa:	d004      	beq.n	80034b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	0018      	movs	r0, r3
 80034b0:	f000 f9c0 	bl	8003834 <HAL_TIM_IC_CaptureCallback>
 80034b4:	e007      	b.n	80034c6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f000 f9b3 	bl	8003824 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0018      	movs	r0, r3
 80034c2:	f000 f9bf 	bl	8003844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	2204      	movs	r2, #4
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b04      	cmp	r3, #4
 80034d8:	d125      	bne.n	8003526 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2204      	movs	r2, #4
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b04      	cmp	r3, #4
 80034e6:	d11e      	bne.n	8003526 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2205      	movs	r2, #5
 80034ee:	4252      	negs	r2, r2
 80034f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	23c0      	movs	r3, #192	; 0xc0
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4013      	ands	r3, r2
 8003504:	d004      	beq.n	8003510 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	0018      	movs	r0, r3
 800350a:	f000 f993 	bl	8003834 <HAL_TIM_IC_CaptureCallback>
 800350e:	e007      	b.n	8003520 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	0018      	movs	r0, r3
 8003514:	f000 f986 	bl	8003824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	0018      	movs	r0, r3
 800351c:	f000 f992 	bl	8003844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2208      	movs	r2, #8
 800352e:	4013      	ands	r3, r2
 8003530:	2b08      	cmp	r3, #8
 8003532:	d124      	bne.n	800357e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2208      	movs	r2, #8
 800353c:	4013      	ands	r3, r2
 800353e:	2b08      	cmp	r3, #8
 8003540:	d11d      	bne.n	800357e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2209      	movs	r2, #9
 8003548:	4252      	negs	r2, r2
 800354a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2204      	movs	r2, #4
 8003550:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	2203      	movs	r2, #3
 800355a:	4013      	ands	r3, r2
 800355c:	d004      	beq.n	8003568 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	0018      	movs	r0, r3
 8003562:	f000 f967 	bl	8003834 <HAL_TIM_IC_CaptureCallback>
 8003566:	e007      	b.n	8003578 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	0018      	movs	r0, r3
 800356c:	f000 f95a 	bl	8003824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	0018      	movs	r0, r3
 8003574:	f000 f966 	bl	8003844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2210      	movs	r2, #16
 8003586:	4013      	ands	r3, r2
 8003588:	2b10      	cmp	r3, #16
 800358a:	d125      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2210      	movs	r2, #16
 8003594:	4013      	ands	r3, r2
 8003596:	2b10      	cmp	r3, #16
 8003598:	d11e      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2211      	movs	r2, #17
 80035a0:	4252      	negs	r2, r2
 80035a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2208      	movs	r2, #8
 80035a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	69da      	ldr	r2, [r3, #28]
 80035b0:	23c0      	movs	r3, #192	; 0xc0
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4013      	ands	r3, r2
 80035b6:	d004      	beq.n	80035c2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f000 f93a 	bl	8003834 <HAL_TIM_IC_CaptureCallback>
 80035c0:	e007      	b.n	80035d2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f000 f92d 	bl	8003824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f000 f939 	bl	8003844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2201      	movs	r2, #1
 80035e0:	4013      	ands	r3, r2
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d10f      	bne.n	8003606 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	4013      	ands	r3, r2
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d108      	bne.n	8003606 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2202      	movs	r2, #2
 80035fa:	4252      	negs	r2, r2
 80035fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	0018      	movs	r0, r3
 8003602:	f000 f907 	bl	8003814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	2280      	movs	r2, #128	; 0x80
 800360e:	4013      	ands	r3, r2
 8003610:	2b80      	cmp	r3, #128	; 0x80
 8003612:	d10f      	bne.n	8003634 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2280      	movs	r2, #128	; 0x80
 800361c:	4013      	ands	r3, r2
 800361e:	2b80      	cmp	r3, #128	; 0x80
 8003620:	d108      	bne.n	8003634 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2281      	movs	r2, #129	; 0x81
 8003628:	4252      	negs	r2, r2
 800362a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	0018      	movs	r0, r3
 8003630:	f000 fa88 	bl	8003b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	2240      	movs	r2, #64	; 0x40
 800363c:	4013      	ands	r3, r2
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d10f      	bne.n	8003662 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2240      	movs	r2, #64	; 0x40
 800364a:	4013      	ands	r3, r2
 800364c:	2b40      	cmp	r3, #64	; 0x40
 800364e:	d108      	bne.n	8003662 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2241      	movs	r2, #65	; 0x41
 8003656:	4252      	negs	r2, r2
 8003658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	0018      	movs	r0, r3
 800365e:	f000 f8f9 	bl	8003854 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2220      	movs	r2, #32
 800366a:	4013      	ands	r3, r2
 800366c:	2b20      	cmp	r3, #32
 800366e:	d10f      	bne.n	8003690 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2220      	movs	r2, #32
 8003678:	4013      	ands	r3, r2
 800367a:	2b20      	cmp	r3, #32
 800367c:	d108      	bne.n	8003690 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2221      	movs	r2, #33	; 0x21
 8003684:	4252      	negs	r2, r2
 8003686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	0018      	movs	r0, r3
 800368c:	f000 fa52 	bl	8003b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b002      	add	sp, #8
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	223c      	movs	r2, #60	; 0x3c
 80036a6:	5c9b      	ldrb	r3, [r3, r2]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_TIM_ConfigClockSource+0x18>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e0ab      	b.n	8003808 <HAL_TIM_ConfigClockSource+0x170>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	223c      	movs	r2, #60	; 0x3c
 80036b4:	2101      	movs	r1, #1
 80036b6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	223d      	movs	r2, #61	; 0x3d
 80036bc:	2102      	movs	r1, #2
 80036be:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2277      	movs	r2, #119	; 0x77
 80036cc:	4393      	bics	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a4f      	ldr	r2, [pc, #316]	; (8003810 <HAL_TIM_ConfigClockSource+0x178>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b40      	cmp	r3, #64	; 0x40
 80036e6:	d100      	bne.n	80036ea <HAL_TIM_ConfigClockSource+0x52>
 80036e8:	e06b      	b.n	80037c2 <HAL_TIM_ConfigClockSource+0x12a>
 80036ea:	d80e      	bhi.n	800370a <HAL_TIM_ConfigClockSource+0x72>
 80036ec:	2b10      	cmp	r3, #16
 80036ee:	d100      	bne.n	80036f2 <HAL_TIM_ConfigClockSource+0x5a>
 80036f0:	e077      	b.n	80037e2 <HAL_TIM_ConfigClockSource+0x14a>
 80036f2:	d803      	bhi.n	80036fc <HAL_TIM_ConfigClockSource+0x64>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d100      	bne.n	80036fa <HAL_TIM_ConfigClockSource+0x62>
 80036f8:	e073      	b.n	80037e2 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80036fa:	e07c      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d100      	bne.n	8003702 <HAL_TIM_ConfigClockSource+0x6a>
 8003700:	e06f      	b.n	80037e2 <HAL_TIM_ConfigClockSource+0x14a>
 8003702:	2b30      	cmp	r3, #48	; 0x30
 8003704:	d100      	bne.n	8003708 <HAL_TIM_ConfigClockSource+0x70>
 8003706:	e06c      	b.n	80037e2 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8003708:	e075      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800370a:	2b70      	cmp	r3, #112	; 0x70
 800370c:	d00e      	beq.n	800372c <HAL_TIM_ConfigClockSource+0x94>
 800370e:	d804      	bhi.n	800371a <HAL_TIM_ConfigClockSource+0x82>
 8003710:	2b50      	cmp	r3, #80	; 0x50
 8003712:	d036      	beq.n	8003782 <HAL_TIM_ConfigClockSource+0xea>
 8003714:	2b60      	cmp	r3, #96	; 0x60
 8003716:	d044      	beq.n	80037a2 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8003718:	e06d      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 800371a:	2280      	movs	r2, #128	; 0x80
 800371c:	0152      	lsls	r2, r2, #5
 800371e:	4293      	cmp	r3, r2
 8003720:	d068      	beq.n	80037f4 <HAL_TIM_ConfigClockSource+0x15c>
 8003722:	2280      	movs	r2, #128	; 0x80
 8003724:	0192      	lsls	r2, r2, #6
 8003726:	4293      	cmp	r3, r2
 8003728:	d017      	beq.n	800375a <HAL_TIM_ConfigClockSource+0xc2>
      break;
 800372a:	e064      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	6899      	ldr	r1, [r3, #8]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f000 f982 	bl	8003a44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2277      	movs	r2, #119	; 0x77
 800374c:	4313      	orrs	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	609a      	str	r2, [r3, #8]
      break;
 8003758:	e04d      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	6899      	ldr	r1, [r3, #8]
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f000 f96b 	bl	8003a44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2180      	movs	r1, #128	; 0x80
 800377a:	01c9      	lsls	r1, r1, #7
 800377c:	430a      	orrs	r2, r1
 800377e:	609a      	str	r2, [r3, #8]
      break;
 8003780:	e039      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6818      	ldr	r0, [r3, #0]
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6859      	ldr	r1, [r3, #4]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	001a      	movs	r2, r3
 8003790:	f000 f8de 	bl	8003950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2150      	movs	r1, #80	; 0x50
 800379a:	0018      	movs	r0, r3
 800379c:	f000 f938 	bl	8003a10 <TIM_ITRx_SetConfig>
      break;
 80037a0:	e029      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	6859      	ldr	r1, [r3, #4]
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	001a      	movs	r2, r3
 80037b0:	f000 f8fc 	bl	80039ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2160      	movs	r1, #96	; 0x60
 80037ba:	0018      	movs	r0, r3
 80037bc:	f000 f928 	bl	8003a10 <TIM_ITRx_SetConfig>
      break;
 80037c0:	e019      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6818      	ldr	r0, [r3, #0]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	6859      	ldr	r1, [r3, #4]
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	001a      	movs	r2, r3
 80037d0:	f000 f8be 	bl	8003950 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2140      	movs	r1, #64	; 0x40
 80037da:	0018      	movs	r0, r3
 80037dc:	f000 f918 	bl	8003a10 <TIM_ITRx_SetConfig>
      break;
 80037e0:	e009      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	0019      	movs	r1, r3
 80037ec:	0010      	movs	r0, r2
 80037ee:	f000 f90f 	bl	8003a10 <TIM_ITRx_SetConfig>
      break;
 80037f2:	e000      	b.n	80037f6 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80037f4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	223d      	movs	r2, #61	; 0x3d
 80037fa:	2101      	movs	r1, #1
 80037fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	223c      	movs	r2, #60	; 0x3c
 8003802:	2100      	movs	r1, #0
 8003804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b004      	add	sp, #16
 800380e:	bd80      	pop	{r7, pc}
 8003810:	ffff00ff 	.word	0xffff00ff

08003814 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800381c:	46c0      	nop			; (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b002      	add	sp, #8
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800383c:	46c0      	nop			; (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	b002      	add	sp, #8
 8003842:	bd80      	pop	{r7, pc}

08003844 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800384c:	46c0      	nop			; (mov r8, r8)
 800384e:	46bd      	mov	sp, r7
 8003850:	b002      	add	sp, #8
 8003852:	bd80      	pop	{r7, pc}

08003854 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}

08003864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a2f      	ldr	r2, [pc, #188]	; (8003934 <TIM_Base_SetConfig+0xd0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_Base_SetConfig+0x20>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a2e      	ldr	r2, [pc, #184]	; (8003938 <TIM_Base_SetConfig+0xd4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d108      	bne.n	8003896 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2270      	movs	r2, #112	; 0x70
 8003888:	4393      	bics	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a26      	ldr	r2, [pc, #152]	; (8003934 <TIM_Base_SetConfig+0xd0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <TIM_Base_SetConfig+0x62>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a25      	ldr	r2, [pc, #148]	; (8003938 <TIM_Base_SetConfig+0xd4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00f      	beq.n	80038c6 <TIM_Base_SetConfig+0x62>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a24      	ldr	r2, [pc, #144]	; (800393c <TIM_Base_SetConfig+0xd8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00b      	beq.n	80038c6 <TIM_Base_SetConfig+0x62>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a23      	ldr	r2, [pc, #140]	; (8003940 <TIM_Base_SetConfig+0xdc>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d007      	beq.n	80038c6 <TIM_Base_SetConfig+0x62>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a22      	ldr	r2, [pc, #136]	; (8003944 <TIM_Base_SetConfig+0xe0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d003      	beq.n	80038c6 <TIM_Base_SetConfig+0x62>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a21      	ldr	r2, [pc, #132]	; (8003948 <TIM_Base_SetConfig+0xe4>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d108      	bne.n	80038d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4a20      	ldr	r2, [pc, #128]	; (800394c <TIM_Base_SetConfig+0xe8>)
 80038ca:	4013      	ands	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2280      	movs	r2, #128	; 0x80
 80038dc:	4393      	bics	r3, r2
 80038de:	001a      	movs	r2, r3
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a0c      	ldr	r2, [pc, #48]	; (8003934 <TIM_Base_SetConfig+0xd0>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d00b      	beq.n	800391e <TIM_Base_SetConfig+0xba>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a0d      	ldr	r2, [pc, #52]	; (8003940 <TIM_Base_SetConfig+0xdc>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d007      	beq.n	800391e <TIM_Base_SetConfig+0xba>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <TIM_Base_SetConfig+0xe0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d003      	beq.n	800391e <TIM_Base_SetConfig+0xba>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <TIM_Base_SetConfig+0xe4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d103      	bne.n	8003926 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	615a      	str	r2, [r3, #20]
}
 800392c:	46c0      	nop			; (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b004      	add	sp, #16
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40012c00 	.word	0x40012c00
 8003938:	40000400 	.word	0x40000400
 800393c:	40002000 	.word	0x40002000
 8003940:	40014000 	.word	0x40014000
 8003944:	40014400 	.word	0x40014400
 8003948:	40014800 	.word	0x40014800
 800394c:	fffffcff 	.word	0xfffffcff

08003950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	2201      	movs	r2, #1
 8003968:	4393      	bics	r3, r2
 800396a:	001a      	movs	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	22f0      	movs	r2, #240	; 0xf0
 800397a:	4393      	bics	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	693a      	ldr	r2, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	220a      	movs	r2, #10
 800398c:	4393      	bics	r3, r2
 800398e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	621a      	str	r2, [r3, #32]
}
 80039a4:	46c0      	nop			; (mov r8, r8)
 80039a6:	46bd      	mov	sp, r7
 80039a8:	b006      	add	sp, #24
 80039aa:	bd80      	pop	{r7, pc}

080039ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	2210      	movs	r2, #16
 80039be:	4393      	bics	r3, r2
 80039c0:	001a      	movs	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	4a0d      	ldr	r2, [pc, #52]	; (8003a0c <TIM_TI2_ConfigInputStage+0x60>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	031b      	lsls	r3, r3, #12
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	22a0      	movs	r2, #160	; 0xa0
 80039e8:	4393      	bics	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	621a      	str	r2, [r3, #32]
}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	46bd      	mov	sp, r7
 8003a06:	b006      	add	sp, #24
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	ffff0fff 	.word	0xffff0fff

08003a10 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2270      	movs	r2, #112	; 0x70
 8003a24:	4393      	bics	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a28:	683a      	ldr	r2, [r7, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	2207      	movs	r2, #7
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	609a      	str	r2, [r3, #8]
}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b004      	add	sp, #16
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	4a09      	ldr	r2, [pc, #36]	; (8003a80 <TIM_ETR_SetConfig+0x3c>)
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	021a      	lsls	r2, r3, #8
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	431a      	orrs	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	609a      	str	r2, [r3, #8]
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b006      	add	sp, #24
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	ffff00ff 	.word	0xffff00ff

08003a84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	223c      	movs	r2, #60	; 0x3c
 8003a92:	5c9b      	ldrb	r3, [r3, r2]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e041      	b.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	223c      	movs	r2, #60	; 0x3c
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	223d      	movs	r2, #61	; 0x3d
 8003aa8:	2102      	movs	r1, #2
 8003aaa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2270      	movs	r2, #112	; 0x70
 8003ac0:	4393      	bics	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a13      	ldr	r2, [pc, #76]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d009      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a11      	ldr	r2, [pc, #68]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d004      	beq.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a10      	ldr	r2, [pc, #64]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d10c      	bne.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2280      	movs	r2, #128	; 0x80
 8003af8:	4393      	bics	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	223d      	movs	r2, #61	; 0x3d
 8003b12:	2101      	movs	r1, #1
 8003b14:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	223c      	movs	r2, #60	; 0x3c
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	0018      	movs	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b004      	add	sp, #16
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40012c00 	.word	0x40012c00
 8003b2c:	40000400 	.word	0x40000400
 8003b30:	40014000 	.word	0x40014000

08003b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b002      	add	sp, #8
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b4c:	46c0      	nop			; (mov r8, r8)
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	b002      	add	sp, #8
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <__libc_init_array>:
 8003b54:	b570      	push	{r4, r5, r6, lr}
 8003b56:	2600      	movs	r6, #0
 8003b58:	4d0c      	ldr	r5, [pc, #48]	; (8003b8c <__libc_init_array+0x38>)
 8003b5a:	4c0d      	ldr	r4, [pc, #52]	; (8003b90 <__libc_init_array+0x3c>)
 8003b5c:	1b64      	subs	r4, r4, r5
 8003b5e:	10a4      	asrs	r4, r4, #2
 8003b60:	42a6      	cmp	r6, r4
 8003b62:	d109      	bne.n	8003b78 <__libc_init_array+0x24>
 8003b64:	2600      	movs	r6, #0
 8003b66:	f000 f821 	bl	8003bac <_init>
 8003b6a:	4d0a      	ldr	r5, [pc, #40]	; (8003b94 <__libc_init_array+0x40>)
 8003b6c:	4c0a      	ldr	r4, [pc, #40]	; (8003b98 <__libc_init_array+0x44>)
 8003b6e:	1b64      	subs	r4, r4, r5
 8003b70:	10a4      	asrs	r4, r4, #2
 8003b72:	42a6      	cmp	r6, r4
 8003b74:	d105      	bne.n	8003b82 <__libc_init_array+0x2e>
 8003b76:	bd70      	pop	{r4, r5, r6, pc}
 8003b78:	00b3      	lsls	r3, r6, #2
 8003b7a:	58eb      	ldr	r3, [r5, r3]
 8003b7c:	4798      	blx	r3
 8003b7e:	3601      	adds	r6, #1
 8003b80:	e7ee      	b.n	8003b60 <__libc_init_array+0xc>
 8003b82:	00b3      	lsls	r3, r6, #2
 8003b84:	58eb      	ldr	r3, [r5, r3]
 8003b86:	4798      	blx	r3
 8003b88:	3601      	adds	r6, #1
 8003b8a:	e7f2      	b.n	8003b72 <__libc_init_array+0x1e>
 8003b8c:	08003c1c 	.word	0x08003c1c
 8003b90:	08003c1c 	.word	0x08003c1c
 8003b94:	08003c1c 	.word	0x08003c1c
 8003b98:	08003c20 	.word	0x08003c20

08003b9c <memset>:
 8003b9c:	0003      	movs	r3, r0
 8003b9e:	1812      	adds	r2, r2, r0
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d100      	bne.n	8003ba6 <memset+0xa>
 8003ba4:	4770      	bx	lr
 8003ba6:	7019      	strb	r1, [r3, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	e7f9      	b.n	8003ba0 <memset+0x4>

08003bac <_init>:
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	46c0      	nop			; (mov r8, r8)
 8003bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb2:	bc08      	pop	{r3}
 8003bb4:	469e      	mov	lr, r3
 8003bb6:	4770      	bx	lr

08003bb8 <_fini>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	46c0      	nop			; (mov r8, r8)
 8003bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bbe:	bc08      	pop	{r3}
 8003bc0:	469e      	mov	lr, r3
 8003bc2:	4770      	bx	lr

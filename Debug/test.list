
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e98  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fb0  08003fb0  00020100  2**0
                  CONTENTS
  4 .ARM          00000000  08003fb0  08003fb0  00020100  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fb0  08003fb0  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fb0  08003fb0  00013fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fb4  08003fb4  00013fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08003fb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  20000100  080040b8  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  080040b8  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009910  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c81  00000000  00000000  00029a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000af8  00000000  00000000  0002b6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a00  00000000  00000000  0002c1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000c554  00000000  00000000  0002cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008dcd  00000000  00000000  0003910c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00049cc6  00000000  00000000  00041ed9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0008bb9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002804  00000000  00000000  0008bc1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000100 	.word	0x20000100
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f40 	.word	0x08003f40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000104 	.word	0x20000104
 8000104:	08003f40 	.word	0x08003f40

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <time_to_array>:
uint8_t end_display_flag;
uint8_t PP_Out_Time_Flag,OCB_Out_Time_Flag,CTO_Out_Time_Flag,RO_Out_Time_Flag;



uint8_t* time_to_array(uint32_t time){
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	uint8_t* result =calloc(0,sizeof( *result));
 80003fc:	2101      	movs	r1, #1
 80003fe:	2000      	movs	r0, #0
 8000400:	f003 fc8e 	bl	8003d20 <calloc>
 8000404:	0003      	movs	r3, r0
 8000406:	60fb      	str	r3, [r7, #12]
	int hour = time/60;
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	213c      	movs	r1, #60	; 0x3c
 800040c:	0018      	movs	r0, r3
 800040e:	f7ff fe7b 	bl	8000108 <__udivsi3>
 8000412:	0003      	movs	r3, r0
 8000414:	60bb      	str	r3, [r7, #8]
	*result= to_mess(hour/100);
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	2164      	movs	r1, #100	; 0x64
 800041a:	0018      	movs	r0, r3
 800041c:	f7ff fefe 	bl	800021c <__divsi3>
 8000420:	0003      	movs	r3, r0
 8000422:	0018      	movs	r0, r3
 8000424:	f000 f82a 	bl	800047c <to_mess>
 8000428:	0003      	movs	r3, r0
 800042a:	001a      	movs	r2, r3
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	701a      	strb	r2, [r3, #0]
	*(result+1)=to_mess((hour%100)/10);
 8000430:	68bb      	ldr	r3, [r7, #8]
 8000432:	2164      	movs	r1, #100	; 0x64
 8000434:	0018      	movs	r0, r3
 8000436:	f7ff ffd7 	bl	80003e8 <__aeabi_idivmod>
 800043a:	000b      	movs	r3, r1
 800043c:	210a      	movs	r1, #10
 800043e:	0018      	movs	r0, r3
 8000440:	f7ff feec 	bl	800021c <__divsi3>
 8000444:	0003      	movs	r3, r0
 8000446:	001a      	movs	r2, r3
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	1c5c      	adds	r4, r3, #1
 800044c:	0010      	movs	r0, r2
 800044e:	f000 f815 	bl	800047c <to_mess>
 8000452:	0003      	movs	r3, r0
 8000454:	7023      	strb	r3, [r4, #0]
	*(result+2)=to_mess(hour%10);
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	210a      	movs	r1, #10
 800045a:	0018      	movs	r0, r3
 800045c:	f7ff ffc4 	bl	80003e8 <__aeabi_idivmod>
 8000460:	000b      	movs	r3, r1
 8000462:	001a      	movs	r2, r3
 8000464:	68fb      	ldr	r3, [r7, #12]
 8000466:	1c9c      	adds	r4, r3, #2
 8000468:	0010      	movs	r0, r2
 800046a:	f000 f807 	bl	800047c <to_mess>
 800046e:	0003      	movs	r3, r0
 8000470:	7023      	strb	r3, [r4, #0]

	return result;
 8000472:	68fb      	ldr	r3, [r7, #12]
}
 8000474:	0018      	movs	r0, r3
 8000476:	46bd      	mov	sp, r7
 8000478:	b005      	add	sp, #20
 800047a:	bd90      	pop	{r4, r7, pc}

0800047c <to_mess>:

uint8_t to_mess(int value){
 800047c:	b580      	push	{r7, lr}
 800047e:	b084      	sub	sp, #16
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
		uint8_t result;
		switch (value) {
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2b09      	cmp	r3, #9
 8000488:	d837      	bhi.n	80004fa <to_mess+0x7e>
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	009a      	lsls	r2, r3, #2
 800048e:	4b1e      	ldr	r3, [pc, #120]	; (8000508 <to_mess+0x8c>)
 8000490:	18d3      	adds	r3, r2, r3
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	469f      	mov	pc, r3
			case 1:
				(result)=L_ONE;
 8000496:	230f      	movs	r3, #15
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	2230      	movs	r2, #48	; 0x30
 800049c:	701a      	strb	r2, [r3, #0]
				break;
 800049e:	e02c      	b.n	80004fa <to_mess+0x7e>
			case 2:
				(result)=L_TWO;
 80004a0:	230f      	movs	r3, #15
 80004a2:	18fb      	adds	r3, r7, r3
 80004a4:	226d      	movs	r2, #109	; 0x6d
 80004a6:	701a      	strb	r2, [r3, #0]
				break;
 80004a8:	e027      	b.n	80004fa <to_mess+0x7e>
			case 3:
				(result)=L_THREE;
 80004aa:	230f      	movs	r3, #15
 80004ac:	18fb      	adds	r3, r7, r3
 80004ae:	2279      	movs	r2, #121	; 0x79
 80004b0:	701a      	strb	r2, [r3, #0]
				break;
 80004b2:	e022      	b.n	80004fa <to_mess+0x7e>
			case 4:
				(result)=L_FOUR;
 80004b4:	230f      	movs	r3, #15
 80004b6:	18fb      	adds	r3, r7, r3
 80004b8:	2233      	movs	r2, #51	; 0x33
 80004ba:	701a      	strb	r2, [r3, #0]
				break;
 80004bc:	e01d      	b.n	80004fa <to_mess+0x7e>
			case 5:
				(result)=L_FIVE;
 80004be:	230f      	movs	r3, #15
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	225b      	movs	r2, #91	; 0x5b
 80004c4:	701a      	strb	r2, [r3, #0]
				break;
 80004c6:	e018      	b.n	80004fa <to_mess+0x7e>
			case 6:
				(result)=L_SIX;
 80004c8:	230f      	movs	r3, #15
 80004ca:	18fb      	adds	r3, r7, r3
 80004cc:	225f      	movs	r2, #95	; 0x5f
 80004ce:	701a      	strb	r2, [r3, #0]
				break;
 80004d0:	e013      	b.n	80004fa <to_mess+0x7e>
			case 7:
				(result)=L_SEVEN;
 80004d2:	230f      	movs	r3, #15
 80004d4:	18fb      	adds	r3, r7, r3
 80004d6:	2270      	movs	r2, #112	; 0x70
 80004d8:	701a      	strb	r2, [r3, #0]
				break;
 80004da:	e00e      	b.n	80004fa <to_mess+0x7e>
			case 8:
				(result)=L_EIGHT;
 80004dc:	230f      	movs	r3, #15
 80004de:	18fb      	adds	r3, r7, r3
 80004e0:	227f      	movs	r2, #127	; 0x7f
 80004e2:	701a      	strb	r2, [r3, #0]
				break;
 80004e4:	e009      	b.n	80004fa <to_mess+0x7e>
			case 9:
				(result)=L_NINE;
 80004e6:	230f      	movs	r3, #15
 80004e8:	18fb      	adds	r3, r7, r3
 80004ea:	227b      	movs	r2, #123	; 0x7b
 80004ec:	701a      	strb	r2, [r3, #0]
				break;
 80004ee:	e004      	b.n	80004fa <to_mess+0x7e>
			case 0:
				(result)=L_ZERO;
 80004f0:	230f      	movs	r3, #15
 80004f2:	18fb      	adds	r3, r7, r3
 80004f4:	227e      	movs	r2, #126	; 0x7e
 80004f6:	701a      	strb	r2, [r3, #0]
				break;
 80004f8:	46c0      	nop			; (mov r8, r8)
		}
		return result;
 80004fa:	230f      	movs	r3, #15
 80004fc:	18fb      	adds	r3, r7, r3
 80004fe:	781b      	ldrb	r3, [r3, #0]
}
 8000500:	0018      	movs	r0, r3
 8000502:	46bd      	mov	sp, r7
 8000504:	b004      	add	sp, #16
 8000506:	bd80      	pop	{r7, pc}
 8000508:	08003f78 	.word	0x08003f78

0800050c <increase_time>:

void increase_time(uint8_t* flag){
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	if (*flag) {
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d051      	beq.n	80005c0 <increase_time+0xb4>
		 //san xuat
			(RO_time++);
 800051c:	4b2a      	ldr	r3, [pc, #168]	; (80005c8 <increase_time+0xbc>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	1c5a      	adds	r2, r3, #1
 8000522:	4b29      	ldr	r3, [pc, #164]	; (80005c8 <increase_time+0xbc>)
 8000524:	601a      	str	r2, [r3, #0]
			(CTO_time++);
 8000526:	4b29      	ldr	r3, [pc, #164]	; (80005cc <increase_time+0xc0>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	1c5a      	adds	r2, r3, #1
 800052c:	4b27      	ldr	r3, [pc, #156]	; (80005cc <increase_time+0xc0>)
 800052e:	601a      	str	r2, [r3, #0]
			(OCB_time++);
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <increase_time+0xc4>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	1c5a      	adds	r2, r3, #1
 8000536:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <increase_time+0xc4>)
 8000538:	601a      	str	r2, [r3, #0]
			(PP1_time++);
 800053a:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <increase_time+0xc8>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	1c5a      	adds	r2, r3, #1
 8000540:	4b24      	ldr	r3, [pc, #144]	; (80005d4 <increase_time+0xc8>)
 8000542:	601a      	str	r2, [r3, #0]
//			(RO_time+=60);
//			(CTO_time+=60);
//			(OCB_time+=60);
//			(PP1_time+=60);

		*flag = 0;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
		PP1_time_p = time_to_array(PP1_time);
 800054a:	4b22      	ldr	r3, [pc, #136]	; (80005d4 <increase_time+0xc8>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	0018      	movs	r0, r3
 8000550:	f7ff ff50 	bl	80003f4 <time_to_array>
 8000554:	0002      	movs	r2, r0
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <increase_time+0xcc>)
 8000558:	601a      	str	r2, [r3, #0]
		OCB_time_p = time_to_array(OCB_time);
 800055a:	4b1d      	ldr	r3, [pc, #116]	; (80005d0 <increase_time+0xc4>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	0018      	movs	r0, r3
 8000560:	f7ff ff48 	bl	80003f4 <time_to_array>
 8000564:	0002      	movs	r2, r0
 8000566:	4b1d      	ldr	r3, [pc, #116]	; (80005dc <increase_time+0xd0>)
 8000568:	601a      	str	r2, [r3, #0]
		CTO_time_p = time_to_array(CTO_time);
 800056a:	4b18      	ldr	r3, [pc, #96]	; (80005cc <increase_time+0xc0>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	0018      	movs	r0, r3
 8000570:	f7ff ff40 	bl	80003f4 <time_to_array>
 8000574:	0002      	movs	r2, r0
 8000576:	4b1a      	ldr	r3, [pc, #104]	; (80005e0 <increase_time+0xd4>)
 8000578:	601a      	str	r2, [r3, #0]
		RO_time_p = time_to_array(RO_time);
 800057a:	4b13      	ldr	r3, [pc, #76]	; (80005c8 <increase_time+0xbc>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	0018      	movs	r0, r3
 8000580:	f7ff ff38 	bl	80003f4 <time_to_array>
 8000584:	0002      	movs	r2, r0
 8000586:	4b17      	ldr	r3, [pc, #92]	; (80005e4 <increase_time+0xd8>)
 8000588:	601a      	str	r2, [r3, #0]

		if(end_display_flag){
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <increase_time+0xdc>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d016      	beq.n	80005c0 <increase_time+0xb4>
			free(PP1_time_p);
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <increase_time+0xcc>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	0018      	movs	r0, r3
 8000598:	f003 fbf6 	bl	8003d88 <free>
			free(OCB_time_p);
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <increase_time+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	0018      	movs	r0, r3
 80005a2:	f003 fbf1 	bl	8003d88 <free>
			free(CTO_time_p);
 80005a6:	4b0e      	ldr	r3, [pc, #56]	; (80005e0 <increase_time+0xd4>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	0018      	movs	r0, r3
 80005ac:	f003 fbec 	bl	8003d88 <free>
			free(RO_time_p);
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <increase_time+0xd8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	0018      	movs	r0, r3
 80005b6:	f003 fbe7 	bl	8003d88 <free>
			end_display_flag =0;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	; (80005e8 <increase_time+0xdc>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]

		}
	}

}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b002      	add	sp, #8
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	200001ac 	.word	0x200001ac
 80005cc:	20000240 	.word	0x20000240
 80005d0:	20000190 	.word	0x20000190
 80005d4:	200001f8 	.word	0x200001f8
 80005d8:	20000198 	.word	0x20000198
 80005dc:	20000248 	.word	0x20000248
 80005e0:	200001b0 	.word	0x200001b0
 80005e4:	2000023c 	.word	0x2000023c
 80005e8:	2000018b 	.word	0x2000018b

080005ec <Ghi_data>:


void Ghi_data(uint32_t start_Adress, uint32_t End_Adress){
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b08e      	sub	sp, #56	; 0x38
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6278      	str	r0, [r7, #36]	; 0x24
 80005f4:	6239      	str	r1, [r7, #32]
	HAL_FLASH_Unlock();
 80005f6:	f001 fffd 	bl	80025f4 <HAL_FLASH_Unlock>
			FLASH_EraseInitTypeDef EraseInitStruct;
			EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80005fa:	210c      	movs	r1, #12
 80005fc:	2020      	movs	r0, #32
 80005fe:	183b      	adds	r3, r7, r0
 8000600:	185b      	adds	r3, r3, r1
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
			EraseInitStruct.PageAddress = start_Adress;
 8000606:	183b      	adds	r3, r7, r0
 8000608:	185b      	adds	r3, r3, r1
 800060a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800060c:	605a      	str	r2, [r3, #4]
			EraseInitStruct.NbPages = (End_Adress - start_Adress) / FLASH_PAGE_SIZE;
 800060e:	6a3a      	ldr	r2, [r7, #32]
 8000610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	0a9a      	lsrs	r2, r3, #10
 8000616:	183b      	adds	r3, r7, r0
 8000618:	185b      	adds	r3, r3, r1
 800061a:	609a      	str	r2, [r3, #8]
			uint32_t PAGEError = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 8000620:	2308      	movs	r3, #8
 8000622:	183a      	adds	r2, r7, r0
 8000624:	18d2      	adds	r2, r2, r3
 8000626:	183b      	adds	r3, r7, r0
 8000628:	185b      	adds	r3, r3, r1
 800062a:	0011      	movs	r1, r2
 800062c:	0018      	movs	r0, r3
 800062e:	f002 f8a1 	bl	8002774 <HAL_FLASHEx_Erase>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_Adress, PP1_time);
 8000632:	4b22      	ldr	r3, [pc, #136]	; (80006bc <Ghi_data+0xd0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	001c      	movs	r4, r3
 8000638:	2300      	movs	r3, #0
 800063a:	001d      	movs	r5, r3
 800063c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800063e:	0022      	movs	r2, r4
 8000640:	002b      	movs	r3, r5
 8000642:	2002      	movs	r0, #2
 8000644:	f001 ff40 	bl	80024c8 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_Adress + 4, OCB_time);
 8000648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064a:	1d19      	adds	r1, r3, #4
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <Ghi_data+0xd4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	61bb      	str	r3, [r7, #24]
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
 8000656:	69ba      	ldr	r2, [r7, #24]
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	2002      	movs	r0, #2
 800065c:	f001 ff34 	bl	80024c8 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_Adress + 8, CTO_time);
 8000660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000662:	3308      	adds	r3, #8
 8000664:	0019      	movs	r1, r3
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <Ghi_data+0xd8>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	613b      	str	r3, [r7, #16]
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	693a      	ldr	r2, [r7, #16]
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	2002      	movs	r0, #2
 8000676:	f001 ff27 	bl	80024c8 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_Adress + 12, RO_time);
 800067a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067c:	330c      	adds	r3, #12
 800067e:	0019      	movs	r1, r3
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <Ghi_data+0xdc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	60bb      	str	r3, [r7, #8]
 8000686:	2300      	movs	r3, #0
 8000688:	60fb      	str	r3, [r7, #12]
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2002      	movs	r0, #2
 8000690:	f001 ff1a 	bl	80024c8 <HAL_FLASH_Program>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, start_Adress + 16, Machine_time_run);
 8000694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000696:	3310      	adds	r3, #16
 8000698:	0019      	movs	r1, r3
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <Ghi_data+0xe0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2002      	movs	r0, #2
 80006aa:	f001 ff0d 	bl	80024c8 <HAL_FLASH_Program>
			HAL_FLASH_Lock();
 80006ae:	f001 ffc7 	bl	8002640 <HAL_FLASH_Lock>
}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b00e      	add	sp, #56	; 0x38
 80006b8:	bdb0      	pop	{r4, r5, r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	200001f8 	.word	0x200001f8
 80006c0:	20000190 	.word	0x20000190
 80006c4:	20000240 	.word	0x20000240
 80006c8:	200001ac 	.word	0x200001ac
 80006cc:	20000244 	.word	0x20000244

080006d0 <read_Flash>:

uint32_t read_Flash(uint32_t addr){
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
			uint32_t Flash_data;
			Flash_data = *(uint32_t*) addr;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	60fb      	str	r3, [r7, #12]
			return Flash_data;
 80006de:	68fb      	ldr	r3, [r7, #12]
}
 80006e0:	0018      	movs	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b004      	add	sp, #16
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <Controller_Display_Mess>:
static void Activate_Segment_E(int value);
static void Activate_Segment_F(int value);
static void Activate_Segment_G(int value);


void Controller_Display_Mess(uint8_t *mess,uint8_t* seven_segment_switch_flag,uint8_t* end_display_flag){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b088      	sub	sp, #32
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
	int i=0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
	*seven_segment_switch_flag=0;
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2200      	movs	r2, #0
 80006fc:	701a      	strb	r2, [r3, #0]
	while ( i < 3 && !(*end_display_flag)) {
 80006fe:	e02a      	b.n	8000756 <Controller_Display_Mess+0x6e>
		if(*seven_segment_switch_flag){
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d026      	beq.n	8000756 <Controller_Display_Mess+0x6e>
			Activate_LED7[i]();
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <Controller_Display_Mess+0x84>)
 800070a:	69fa      	ldr	r2, [r7, #28]
 800070c:	0092      	lsls	r2, r2, #2
 800070e:	58d3      	ldr	r3, [r2, r3]
 8000710:	4798      	blx	r3
		    for (int j = 6;  j >= 0 ;  j--){
 8000712:	2306      	movs	r3, #6
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	e012      	b.n	800073e <Controller_Display_Mess+0x56>
		    	int value = (*mess & (1 << j));
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	0019      	movs	r1, r3
 800071e:	2201      	movs	r2, #1
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	409a      	lsls	r2, r3
 8000724:	0013      	movs	r3, r2
 8000726:	400b      	ands	r3, r1
 8000728:	617b      	str	r3, [r7, #20]
		    	Activate_Segment[j](value);
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <Controller_Display_Mess+0x88>)
 800072c:	69ba      	ldr	r2, [r7, #24]
 800072e:	0092      	lsls	r2, r2, #2
 8000730:	58d3      	ldr	r3, [r2, r3]
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	0010      	movs	r0, r2
 8000736:	4798      	blx	r3
		    for (int j = 6;  j >= 0 ;  j--){
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	3b01      	subs	r3, #1
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	69bb      	ldr	r3, [r7, #24]
 8000740:	2b00      	cmp	r3, #0
 8000742:	dae9      	bge.n	8000718 <Controller_Display_Mess+0x30>
		    }
			*seven_segment_switch_flag=0;
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
			mess++;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	3301      	adds	r3, #1
 800074e:	60fb      	str	r3, [r7, #12]
	    	i++;
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	3301      	adds	r3, #1
 8000754:	61fb      	str	r3, [r7, #28]
	while ( i < 3 && !(*end_display_flag)) {
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	2b02      	cmp	r3, #2
 800075a:	dc03      	bgt.n	8000764 <Controller_Display_Mess+0x7c>
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d0cd      	beq.n	8000700 <Controller_Display_Mess+0x18>
	    }
	}
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b008      	add	sp, #32
 800076a:	bd80      	pop	{r7, pc}
 800076c:	20000000 	.word	0x20000000
 8000770:	2000000c 	.word	0x2000000c

08000774 <Activate_LED7_1>:
		Activate_Segment_C,
		Activate_Segment_B,
		Activate_Segment_A
};

void Activate_LED7_1(){
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED7_1_PORT, LED7_1_PIN, GPIO_PIN_SET);
 8000778:	2380      	movs	r3, #128	; 0x80
 800077a:	019b      	lsls	r3, r3, #6
 800077c:	480a      	ldr	r0, [pc, #40]	; (80007a8 <Activate_LED7_1+0x34>)
 800077e:	2201      	movs	r2, #1
 8000780:	0019      	movs	r1, r3
 8000782:	f002 fa30 	bl	8002be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_2_PORT, LED7_2_PIN, GPIO_PIN_RESET);
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	015b      	lsls	r3, r3, #5
 800078a:	4807      	ldr	r0, [pc, #28]	; (80007a8 <Activate_LED7_1+0x34>)
 800078c:	2200      	movs	r2, #0
 800078e:	0019      	movs	r1, r3
 8000790:	f002 fa29 	bl	8002be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_3_PORT, LED7_3_PIN, GPIO_PIN_RESET);
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	011b      	lsls	r3, r3, #4
 8000798:	4803      	ldr	r0, [pc, #12]	; (80007a8 <Activate_LED7_1+0x34>)
 800079a:	2200      	movs	r2, #0
 800079c:	0019      	movs	r1, r3
 800079e:	f002 fa22 	bl	8002be6 <HAL_GPIO_WritePin>
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	48000400 	.word	0x48000400

080007ac <Activate_LED7_2>:
void Activate_LED7_2(){
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED7_1_PORT, LED7_1_PIN, GPIO_PIN_RESET);
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	019b      	lsls	r3, r3, #6
 80007b4:	480a      	ldr	r0, [pc, #40]	; (80007e0 <Activate_LED7_2+0x34>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	0019      	movs	r1, r3
 80007ba:	f002 fa14 	bl	8002be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_2_PORT, LED7_2_PIN, GPIO_PIN_SET);
 80007be:	2380      	movs	r3, #128	; 0x80
 80007c0:	015b      	lsls	r3, r3, #5
 80007c2:	4807      	ldr	r0, [pc, #28]	; (80007e0 <Activate_LED7_2+0x34>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	0019      	movs	r1, r3
 80007c8:	f002 fa0d 	bl	8002be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_3_PORT, LED7_3_PIN, GPIO_PIN_RESET);
 80007cc:	2380      	movs	r3, #128	; 0x80
 80007ce:	011b      	lsls	r3, r3, #4
 80007d0:	4803      	ldr	r0, [pc, #12]	; (80007e0 <Activate_LED7_2+0x34>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	0019      	movs	r1, r3
 80007d6:	f002 fa06 	bl	8002be6 <HAL_GPIO_WritePin>
}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	48000400 	.word	0x48000400

080007e4 <Activate_LED7_3>:

void Activate_LED7_3(){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED7_1_PORT, LED7_1_PIN, GPIO_PIN_RESET);
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	019b      	lsls	r3, r3, #6
 80007ec:	480a      	ldr	r0, [pc, #40]	; (8000818 <Activate_LED7_3+0x34>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	0019      	movs	r1, r3
 80007f2:	f002 f9f8 	bl	8002be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_2_PORT, LED7_2_PIN, GPIO_PIN_RESET);
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	015b      	lsls	r3, r3, #5
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <Activate_LED7_3+0x34>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	0019      	movs	r1, r3
 8000800:	f002 f9f1 	bl	8002be6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_3_PORT, LED7_3_PIN, GPIO_PIN_SET);
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	011b      	lsls	r3, r3, #4
 8000808:	4803      	ldr	r0, [pc, #12]	; (8000818 <Activate_LED7_3+0x34>)
 800080a:	2201      	movs	r2, #1
 800080c:	0019      	movs	r1, r3
 800080e:	f002 f9ea 	bl	8002be6 <HAL_GPIO_WritePin>
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	48000400 	.word	0x48000400

0800081c <Activate_Segment_A>:

void Activate_Segment_A(int value){
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED7_A_PORT, LED7_A_PIN, value);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	01db      	lsls	r3, r3, #7
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <Activate_Segment_A+0x20>)
 800082e:	0019      	movs	r1, r3
 8000830:	f002 f9d9 	bl	8002be6 <HAL_GPIO_WritePin>
}
 8000834:	46c0      	nop			; (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b002      	add	sp, #8
 800083a:	bd80      	pop	{r7, pc}
 800083c:	48000400 	.word	0x48000400

08000840 <Activate_Segment_B>:
void Activate_Segment_B(int value){
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED7_B_PORT, LED7_B_PIN, value);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	b2da      	uxtb	r2, r3
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	4803      	ldr	r0, [pc, #12]	; (8000860 <Activate_Segment_B+0x20>)
 8000852:	0019      	movs	r1, r3
 8000854:	f002 f9c7 	bl	8002be6 <HAL_GPIO_WritePin>
}
 8000858:	46c0      	nop			; (mov r8, r8)
 800085a:	46bd      	mov	sp, r7
 800085c:	b002      	add	sp, #8
 800085e:	bd80      	pop	{r7, pc}
 8000860:	48000400 	.word	0x48000400

08000864 <Activate_Segment_C>:
void Activate_Segment_C(int value){
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED7_C_PORT, LED7_C_PIN, value);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	b2da      	uxtb	r2, r3
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	00d9      	lsls	r1, r3, #3
 8000874:	2390      	movs	r3, #144	; 0x90
 8000876:	05db      	lsls	r3, r3, #23
 8000878:	0018      	movs	r0, r3
 800087a:	f002 f9b4 	bl	8002be6 <HAL_GPIO_WritePin>
}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b002      	add	sp, #8
 8000884:	bd80      	pop	{r7, pc}

08000886 <Activate_Segment_D>:
void Activate_Segment_D(int value){
 8000886:	b580      	push	{r7, lr}
 8000888:	b082      	sub	sp, #8
 800088a:	af00      	add	r7, sp, #0
 800088c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED7_D_PORT, LED7_D_PIN, value);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	b2da      	uxtb	r2, r3
 8000892:	2380      	movs	r3, #128	; 0x80
 8000894:	0119      	lsls	r1, r3, #4
 8000896:	2390      	movs	r3, #144	; 0x90
 8000898:	05db      	lsls	r3, r3, #23
 800089a:	0018      	movs	r0, r3
 800089c:	f002 f9a3 	bl	8002be6 <HAL_GPIO_WritePin>
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b002      	add	sp, #8
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <Activate_Segment_E>:
void Activate_Segment_E(int value){
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED7_E_PORT, LED7_E_PIN, value);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	0159      	lsls	r1, r3, #5
 80008b8:	2390      	movs	r3, #144	; 0x90
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	0018      	movs	r0, r3
 80008be:	f002 f992 	bl	8002be6 <HAL_GPIO_WritePin>
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b002      	add	sp, #8
 80008c8:	bd80      	pop	{r7, pc}

080008ca <Activate_Segment_F>:
void Activate_Segment_F(int value){
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED7_F_PORT, LED7_F_PIN, value);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	2380      	movs	r3, #128	; 0x80
 80008d8:	0059      	lsls	r1, r3, #1
 80008da:	2390      	movs	r3, #144	; 0x90
 80008dc:	05db      	lsls	r3, r3, #23
 80008de:	0018      	movs	r0, r3
 80008e0:	f002 f981 	bl	8002be6 <HAL_GPIO_WritePin>
}
 80008e4:	46c0      	nop			; (mov r8, r8)
 80008e6:	46bd      	mov	sp, r7
 80008e8:	b002      	add	sp, #8
 80008ea:	bd80      	pop	{r7, pc}

080008ec <Activate_Segment_G>:
void Activate_Segment_G(int value){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED7_G_PORT, LED7_G_PIN, value);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	0099      	lsls	r1, r3, #2
 80008fc:	2390      	movs	r3, #144	; 0x90
 80008fe:	05db      	lsls	r3, r3, #23
 8000900:	0018      	movs	r0, r3
 8000902:	f002 f970 	bl	8002be6 <HAL_GPIO_WritePin>
}
 8000906:	46c0      	nop			; (mov r8, r8)
 8000908:	46bd      	mov	sp, r7
 800090a:	b002      	add	sp, #8
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <check_out_time_machine>:
uint8_t out_time_ocb[3] = {L_U, L_D, L_F};
uint8_t out_time_cto[3] = {L_P, L_P, L_TWO};
uint8_t out_time_ro[3] = {L_R, L_O, L_BLANK};
uint8_t	blank_time[3] = {L_BLANK, L_BLANK, L_BLANK};

void check_out_time_machine(){
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	if((out_time_machine_trigger)&&(HAL_GPIO_ReadPin(PUMP_STATUS_PORT, PUMP_STATUS_PIN))){
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <check_out_time_machine+0x5c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d015      	beq.n	8000948 <check_out_time_machine+0x38>
 800091c:	2390      	movs	r3, #144	; 0x90
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	2102      	movs	r1, #2
 8000922:	0018      	movs	r0, r3
 8000924:	f002 f942 	bl	8002bac <HAL_GPIO_ReadPin>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d00d      	beq.n	8000948 <check_out_time_machine+0x38>
			Machine_time_run ++;
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <check_out_time_machine+0x60>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	1c5a      	adds	r2, r3, #1
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <check_out_time_machine+0x60>)
 8000934:	601a      	str	r2, [r3, #0]
			out_time_machine_trigger = 0 ;
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <check_out_time_machine+0x5c>)
 8000938:	2200      	movs	r2, #0
 800093a:	701a      	strb	r2, [r3, #0]
			write_data ++;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <check_out_time_machine+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	1c5a      	adds	r2, r3, #1
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <check_out_time_machine+0x64>)
 8000944:	601a      	str	r2, [r3, #0]
		}else
		if((!HAL_GPIO_ReadPin(PUMP_STATUS_PORT, PUMP_STATUS_PIN))){
			(Machine_time_run = 0);
			out_time_machine_trigger =0;
	}
}
 8000946:	e00d      	b.n	8000964 <check_out_time_machine+0x54>
		if((!HAL_GPIO_ReadPin(PUMP_STATUS_PORT, PUMP_STATUS_PIN))){
 8000948:	2390      	movs	r3, #144	; 0x90
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	2102      	movs	r1, #2
 800094e:	0018      	movs	r0, r3
 8000950:	f002 f92c 	bl	8002bac <HAL_GPIO_ReadPin>
 8000954:	1e03      	subs	r3, r0, #0
 8000956:	d105      	bne.n	8000964 <check_out_time_machine+0x54>
			(Machine_time_run = 0);
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <check_out_time_machine+0x60>)
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
			out_time_machine_trigger =0;
 800095e:	4b03      	ldr	r3, [pc, #12]	; (800096c <check_out_time_machine+0x5c>)
 8000960:	2200      	movs	r2, #0
 8000962:	701a      	strb	r2, [r3, #0]
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	2000025a 	.word	0x2000025a
 8000970:	20000244 	.word	0x20000244
 8000974:	200001f4 	.word	0x200001f4

08000978 <write_Flash_Timer>:
// write da sua phai lai xem co lưu khong !!!
void write_Flash_Timer(){
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	if (Write_Flash_flag&&((!HAL_GPIO_ReadPin(PUMP_STATUS_PORT, PUMP_STATUS_PIN)||(write_data==30)))){
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <write_Flash_Timer+0x44>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d017      	beq.n	80009b4 <write_Flash_Timer+0x3c>
 8000984:	2390      	movs	r3, #144	; 0x90
 8000986:	05db      	lsls	r3, r3, #23
 8000988:	2102      	movs	r1, #2
 800098a:	0018      	movs	r0, r3
 800098c:	f002 f90e 	bl	8002bac <HAL_GPIO_ReadPin>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d003      	beq.n	800099c <write_Flash_Timer+0x24>
 8000994:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <write_Flash_Timer+0x48>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b1e      	cmp	r3, #30
 800099a:	d10b      	bne.n	80009b4 <write_Flash_Timer+0x3c>

		Write_Flash_flag = 0;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <write_Flash_Timer+0x44>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
		write_data =0;
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <write_Flash_Timer+0x48>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
		Ghi_data(0x08007000, 0x08007FFF);
 80009a8:	4a06      	ldr	r2, [pc, #24]	; (80009c4 <write_Flash_Timer+0x4c>)
 80009aa:	4b07      	ldr	r3, [pc, #28]	; (80009c8 <write_Flash_Timer+0x50>)
 80009ac:	0011      	movs	r1, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f7ff fe1c 	bl	80005ec <Ghi_data>


	}

}
 80009b4:	46c0      	nop			; (mov r8, r8)
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	20000251 	.word	0x20000251
 80009c0:	200001f4 	.word	0x200001f4
 80009c4:	08007fff 	.word	0x08007fff
 80009c8:	08007000 	.word	0x08007000

080009cc <display>:
void display (){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	if (cto_button_flag) {
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <display+0x80>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d00a      	beq.n	80009ee <display+0x22>
		erro_dislay_trigger = 0;
 80009d8:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <display+0x84>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
//		CTO_time_p = time_to_array(CTO_time);
		Controller_Display_Mess(CTO_time_p,&seven_segment_switch_flag,&end_display_flag);
 80009de:	4b1d      	ldr	r3, [pc, #116]	; (8000a54 <display+0x88>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <display+0x8c>)
 80009e4:	491d      	ldr	r1, [pc, #116]	; (8000a5c <display+0x90>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f7ff fe7e 	bl	80006e8 <Controller_Display_Mess>

//		PP1_time_p = time_to_array(PP1_time);
		erro_dislay_trigger = 0;
		Controller_Display_Mess(PP1_time_p, &seven_segment_switch_flag,&end_display_flag);
	}
}
 80009ec:	e02b      	b.n	8000a46 <display+0x7a>
	}else if(ro_button_flag){
 80009ee:	4b1c      	ldr	r3, [pc, #112]	; (8000a60 <display+0x94>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00a      	beq.n	8000a0c <display+0x40>
		erro_dislay_trigger = 0;
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <display+0x84>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
		Controller_Display_Mess(RO_time_p,&seven_segment_switch_flag,&end_display_flag);
 80009fc:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <display+0x98>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a15      	ldr	r2, [pc, #84]	; (8000a58 <display+0x8c>)
 8000a02:	4916      	ldr	r1, [pc, #88]	; (8000a5c <display+0x90>)
 8000a04:	0018      	movs	r0, r3
 8000a06:	f7ff fe6f 	bl	80006e8 <Controller_Display_Mess>
}
 8000a0a:	e01c      	b.n	8000a46 <display+0x7a>
	}else if (ocb_button_flag) {
 8000a0c:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <display+0x9c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d00a      	beq.n	8000a2a <display+0x5e>
		erro_dislay_trigger = 0;
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <display+0x84>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
		Controller_Display_Mess(OCB_time_p,&seven_segment_switch_flag,&end_display_flag);
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <display+0xa0>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a0e      	ldr	r2, [pc, #56]	; (8000a58 <display+0x8c>)
 8000a20:	490e      	ldr	r1, [pc, #56]	; (8000a5c <display+0x90>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f7ff fe60 	bl	80006e8 <Controller_Display_Mess>
}
 8000a28:	e00d      	b.n	8000a46 <display+0x7a>
	}else if (pp1_button_flag) {
 8000a2a:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <display+0xa4>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d009      	beq.n	8000a46 <display+0x7a>
		erro_dislay_trigger = 0;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <display+0x84>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
		Controller_Display_Mess(PP1_time_p, &seven_segment_switch_flag,&end_display_flag);
 8000a38:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <display+0xa8>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a06      	ldr	r2, [pc, #24]	; (8000a58 <display+0x8c>)
 8000a3e:	4907      	ldr	r1, [pc, #28]	; (8000a5c <display+0x90>)
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff fe51 	bl	80006e8 <Controller_Display_Mess>
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	2000026a 	.word	0x2000026a
 8000a50:	20000257 	.word	0x20000257
 8000a54:	200001b0 	.word	0x200001b0
 8000a58:	2000018b 	.word	0x2000018b
 8000a5c:	2000025d 	.word	0x2000025d
 8000a60:	20000255 	.word	0x20000255
 8000a64:	2000023c 	.word	0x2000023c
 8000a68:	2000024d 	.word	0x2000024d
 8000a6c:	20000248 	.word	0x20000248
 8000a70:	2000026b 	.word	0x2000026b
 8000a74:	20000198 	.word	0x20000198

08000a78 <clear_timer_fillter>:

void clear_timer_fillter(){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
	if(clr_button_flag&&pp1_button_flag) {
 8000a7c:	4b5f      	ldr	r3, [pc, #380]	; (8000bfc <clear_timer_fillter+0x184>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d02a      	beq.n	8000ada <clear_timer_fillter+0x62>
 8000a84:	4b5e      	ldr	r3, [pc, #376]	; (8000c00 <clear_timer_fillter+0x188>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d026      	beq.n	8000ada <clear_timer_fillter+0x62>
			if((HAL_GPIO_ReadPin(PP1_BUTTON_PORT, PP1_BUTTON_PIN))&& (HAL_GPIO_ReadPin(CLR_BUTTON_PORT, CLR_BUTTON_PIN))){
 8000a8c:	2390      	movs	r3, #144	; 0x90
 8000a8e:	05db      	lsls	r3, r3, #23
 8000a90:	2140      	movs	r1, #64	; 0x40
 8000a92:	0018      	movs	r0, r3
 8000a94:	f002 f88a 	bl	8002bac <HAL_GPIO_ReadPin>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d01e      	beq.n	8000ada <clear_timer_fillter+0x62>
 8000a9c:	2390      	movs	r3, #144	; 0x90
 8000a9e:	05db      	lsls	r3, r3, #23
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f002 f882 	bl	8002bac <HAL_GPIO_ReadPin>
 8000aa8:	1e03      	subs	r3, r0, #0
 8000aaa:	d016      	beq.n	8000ada <clear_timer_fillter+0x62>
				PP1_time = 0;
 8000aac:	4b55      	ldr	r3, [pc, #340]	; (8000c04 <clear_timer_fillter+0x18c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
				clr_button_flag =0;
 8000ab2:	4b52      	ldr	r3, [pc, #328]	; (8000bfc <clear_timer_fillter+0x184>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]
				pp1_button_flag =0;
 8000ab8:	4b51      	ldr	r3, [pc, #324]	; (8000c00 <clear_timer_fillter+0x188>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
				PP1_time_p = time_to_array(PP1_time);
 8000abe:	4b51      	ldr	r3, [pc, #324]	; (8000c04 <clear_timer_fillter+0x18c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff fc96 	bl	80003f4 <time_to_array>
 8000ac8:	0002      	movs	r2, r0
 8000aca:	4b4f      	ldr	r3, [pc, #316]	; (8000c08 <clear_timer_fillter+0x190>)
 8000acc:	601a      	str	r2, [r3, #0]
				Ghi_data(0x08007000, 0x08007FFF);
 8000ace:	4a4f      	ldr	r2, [pc, #316]	; (8000c0c <clear_timer_fillter+0x194>)
 8000ad0:	4b4f      	ldr	r3, [pc, #316]	; (8000c10 <clear_timer_fillter+0x198>)
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff fd89 	bl	80005ec <Ghi_data>

			}
		}
	if(clr_button_flag&&ocb_button_flag) {
 8000ada:	4b48      	ldr	r3, [pc, #288]	; (8000bfc <clear_timer_fillter+0x184>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d02a      	beq.n	8000b38 <clear_timer_fillter+0xc0>
 8000ae2:	4b4c      	ldr	r3, [pc, #304]	; (8000c14 <clear_timer_fillter+0x19c>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d026      	beq.n	8000b38 <clear_timer_fillter+0xc0>
				if((HAL_GPIO_ReadPin(OCB_BUTTON_PORT, OCB_BUTTON_PIN))&& (HAL_GPIO_ReadPin(CLR_BUTTON_PORT, CLR_BUTTON_PIN))){
 8000aea:	2390      	movs	r3, #144	; 0x90
 8000aec:	05db      	lsls	r3, r3, #23
 8000aee:	2120      	movs	r1, #32
 8000af0:	0018      	movs	r0, r3
 8000af2:	f002 f85b 	bl	8002bac <HAL_GPIO_ReadPin>
 8000af6:	1e03      	subs	r3, r0, #0
 8000af8:	d01e      	beq.n	8000b38 <clear_timer_fillter+0xc0>
 8000afa:	2390      	movs	r3, #144	; 0x90
 8000afc:	05db      	lsls	r3, r3, #23
 8000afe:	2104      	movs	r1, #4
 8000b00:	0018      	movs	r0, r3
 8000b02:	f002 f853 	bl	8002bac <HAL_GPIO_ReadPin>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d016      	beq.n	8000b38 <clear_timer_fillter+0xc0>
					OCB_time = 0;
 8000b0a:	4b43      	ldr	r3, [pc, #268]	; (8000c18 <clear_timer_fillter+0x1a0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
					clr_button_flag = 0;
 8000b10:	4b3a      	ldr	r3, [pc, #232]	; (8000bfc <clear_timer_fillter+0x184>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
					ocb_button_flag = 0;
 8000b16:	4b3f      	ldr	r3, [pc, #252]	; (8000c14 <clear_timer_fillter+0x19c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]
					OCB_time_p = time_to_array(OCB_time);
 8000b1c:	4b3e      	ldr	r3, [pc, #248]	; (8000c18 <clear_timer_fillter+0x1a0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff fc67 	bl	80003f4 <time_to_array>
 8000b26:	0002      	movs	r2, r0
 8000b28:	4b3c      	ldr	r3, [pc, #240]	; (8000c1c <clear_timer_fillter+0x1a4>)
 8000b2a:	601a      	str	r2, [r3, #0]
					Ghi_data(0x08007000, 0x08007FFF);
 8000b2c:	4a37      	ldr	r2, [pc, #220]	; (8000c0c <clear_timer_fillter+0x194>)
 8000b2e:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <clear_timer_fillter+0x198>)
 8000b30:	0011      	movs	r1, r2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f7ff fd5a 	bl	80005ec <Ghi_data>

				}
		}
	if(clr_button_flag&&cto_button_flag) {
 8000b38:	4b30      	ldr	r3, [pc, #192]	; (8000bfc <clear_timer_fillter+0x184>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d02a      	beq.n	8000b96 <clear_timer_fillter+0x11e>
 8000b40:	4b37      	ldr	r3, [pc, #220]	; (8000c20 <clear_timer_fillter+0x1a8>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d026      	beq.n	8000b96 <clear_timer_fillter+0x11e>
				if((HAL_GPIO_ReadPin(CTO_BUTTON_PORT, CTO_BUTTON_PIN))&& (HAL_GPIO_ReadPin(CLR_BUTTON_PORT, CLR_BUTTON_PIN))){
 8000b48:	2390      	movs	r3, #144	; 0x90
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	2110      	movs	r1, #16
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f002 f82c 	bl	8002bac <HAL_GPIO_ReadPin>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d01e      	beq.n	8000b96 <clear_timer_fillter+0x11e>
 8000b58:	2390      	movs	r3, #144	; 0x90
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	2104      	movs	r1, #4
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f002 f824 	bl	8002bac <HAL_GPIO_ReadPin>
 8000b64:	1e03      	subs	r3, r0, #0
 8000b66:	d016      	beq.n	8000b96 <clear_timer_fillter+0x11e>
					CTO_time = 0;
 8000b68:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <clear_timer_fillter+0x1ac>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
					cto_button_flag =0;
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <clear_timer_fillter+0x1a8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
					clr_button_flag =0;
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <clear_timer_fillter+0x184>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
					CTO_time_p = time_to_array(CTO_time);
 8000b7a:	4b2a      	ldr	r3, [pc, #168]	; (8000c24 <clear_timer_fillter+0x1ac>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f7ff fc38 	bl	80003f4 <time_to_array>
 8000b84:	0002      	movs	r2, r0
 8000b86:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <clear_timer_fillter+0x1b0>)
 8000b88:	601a      	str	r2, [r3, #0]
					Ghi_data(0x08007000, 0x08007FFF);
 8000b8a:	4a20      	ldr	r2, [pc, #128]	; (8000c0c <clear_timer_fillter+0x194>)
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <clear_timer_fillter+0x198>)
 8000b8e:	0011      	movs	r1, r2
 8000b90:	0018      	movs	r0, r3
 8000b92:	f7ff fd2b 	bl	80005ec <Ghi_data>

				}
		}
	if(clr_button_flag&&ro_button_flag) {
 8000b96:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <clear_timer_fillter+0x184>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d02a      	beq.n	8000bf4 <clear_timer_fillter+0x17c>
 8000b9e:	4b23      	ldr	r3, [pc, #140]	; (8000c2c <clear_timer_fillter+0x1b4>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d026      	beq.n	8000bf4 <clear_timer_fillter+0x17c>
				if((HAL_GPIO_ReadPin(RO_BUTTON_PORT, RO_BUTTON_PIN))&& (HAL_GPIO_ReadPin(CLR_BUTTON_PORT, CLR_BUTTON_PIN))){
 8000ba6:	2390      	movs	r3, #144	; 0x90
 8000ba8:	05db      	lsls	r3, r3, #23
 8000baa:	2108      	movs	r1, #8
 8000bac:	0018      	movs	r0, r3
 8000bae:	f001 fffd 	bl	8002bac <HAL_GPIO_ReadPin>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d01e      	beq.n	8000bf4 <clear_timer_fillter+0x17c>
 8000bb6:	2390      	movs	r3, #144	; 0x90
 8000bb8:	05db      	lsls	r3, r3, #23
 8000bba:	2104      	movs	r1, #4
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f001 fff5 	bl	8002bac <HAL_GPIO_ReadPin>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d016      	beq.n	8000bf4 <clear_timer_fillter+0x17c>
					RO_time = 0;
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <clear_timer_fillter+0x1b8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
					ro_button_flag=0;
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <clear_timer_fillter+0x1b4>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	701a      	strb	r2, [r3, #0]
					clr_button_flag = 0;
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <clear_timer_fillter+0x184>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	701a      	strb	r2, [r3, #0]
					RO_time_p = time_to_array(RO_time);
 8000bd8:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <clear_timer_fillter+0x1b8>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f7ff fc09 	bl	80003f4 <time_to_array>
 8000be2:	0002      	movs	r2, r0
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <clear_timer_fillter+0x1bc>)
 8000be6:	601a      	str	r2, [r3, #0]
					Ghi_data(0x08007000, 0x08007FFF);
 8000be8:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <clear_timer_fillter+0x194>)
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <clear_timer_fillter+0x198>)
 8000bec:	0011      	movs	r1, r2
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fcfc 	bl	80005ec <Ghi_data>

				}
		}
}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	2000025b 	.word	0x2000025b
 8000c00:	2000026b 	.word	0x2000026b
 8000c04:	200001f8 	.word	0x200001f8
 8000c08:	20000198 	.word	0x20000198
 8000c0c:	08007fff 	.word	0x08007fff
 8000c10:	08007000 	.word	0x08007000
 8000c14:	2000024d 	.word	0x2000024d
 8000c18:	20000190 	.word	0x20000190
 8000c1c:	20000248 	.word	0x20000248
 8000c20:	2000026a 	.word	0x2000026a
 8000c24:	20000240 	.word	0x20000240
 8000c28:	200001b0 	.word	0x200001b0
 8000c2c:	20000255 	.word	0x20000255
 8000c30:	200001ac 	.word	0x200001ac
 8000c34:	2000023c 	.word	0x2000023c

08000c38 <display_erro>:

void display_erro (){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

	if  ((HAL_GPIO_ReadPin(WARTER_INPUT_PORT, WARTER_INPUT_PIN))) {
 8000c3c:	2390      	movs	r3, #144	; 0x90
 8000c3e:	05db      	lsls	r3, r3, #23
 8000c40:	2101      	movs	r1, #1
 8000c42:	0018      	movs	r0, r3
 8000c44:	f001 ffb2 	bl	8002bac <HAL_GPIO_ReadPin>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d00b      	beq.n	8000c64 <display_erro+0x2c>
					water_input_flag=0;
 8000c4c:	4bc2      	ldr	r3, [pc, #776]	; (8000f58 <display_erro+0x320>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	701a      	strb	r2, [r3, #0]
					water_input_flag =0;
 8000c52:	4bc1      	ldr	r3, [pc, #772]	; (8000f58 <display_erro+0x320>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
					Water_low_Flag_off =0;
 8000c58:	4bc0      	ldr	r3, [pc, #768]	; (8000f5c <display_erro+0x324>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
					Water_low_trigger_off =0;
 8000c5e:	4bc0      	ldr	r3, [pc, #768]	; (8000f60 <display_erro+0x328>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	701a      	strb	r2, [r3, #0]
				}


		if ((PP_Out_Time_Flag)&&!(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)){
 8000c64:	4bbf      	ldr	r3, [pc, #764]	; (8000f64 <display_erro+0x32c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d028      	beq.n	8000cbe <display_erro+0x86>
 8000c6c:	4bbe      	ldr	r3, [pc, #760]	; (8000f68 <display_erro+0x330>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d124      	bne.n	8000cbe <display_erro+0x86>
 8000c74:	4bbd      	ldr	r3, [pc, #756]	; (8000f6c <display_erro+0x334>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d120      	bne.n	8000cbe <display_erro+0x86>
 8000c7c:	4bbc      	ldr	r3, [pc, #752]	; (8000f70 <display_erro+0x338>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d11c      	bne.n	8000cbe <display_erro+0x86>
 8000c84:	4bbb      	ldr	r3, [pc, #748]	; (8000f74 <display_erro+0x33c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d118      	bne.n	8000cbe <display_erro+0x86>
					PP_Out_Time_Trigger_off =1;
 8000c8c:	4bba      	ldr	r3, [pc, #744]	; (8000f78 <display_erro+0x340>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
					end_display_flag =0;
 8000c92:	4bba      	ldr	r3, [pc, #744]	; (8000f7c <display_erro+0x344>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
				Controller_Display_Mess(out_time_PP, &seven_segment_switch_flag,&end_display_flag);
 8000c98:	4ab8      	ldr	r2, [pc, #736]	; (8000f7c <display_erro+0x344>)
 8000c9a:	49b9      	ldr	r1, [pc, #740]	; (8000f80 <display_erro+0x348>)
 8000c9c:	4bb9      	ldr	r3, [pc, #740]	; (8000f84 <display_erro+0x34c>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff fd22 	bl	80006e8 <Controller_Display_Mess>
				if (PP_Out_Time_Flag_off){
 8000ca4:	4bb8      	ldr	r3, [pc, #736]	; (8000f88 <display_erro+0x350>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d008      	beq.n	8000cbe <display_erro+0x86>
					PP_Out_Time_Flag =0;
 8000cac:	4bad      	ldr	r3, [pc, #692]	; (8000f64 <display_erro+0x32c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
					PP_Out_Time_Trigger_off=0;
 8000cb2:	4bb1      	ldr	r3, [pc, #708]	; (8000f78 <display_erro+0x340>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
					PP_Out_Time_Flag_off = 0;
 8000cb8:	4bb3      	ldr	r3, [pc, #716]	; (8000f88 <display_erro+0x350>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
				}
			}

		if ((!(PP_Out_Time_Flag))&&(OCB_Out_Time_Flag)&&!(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)){
 8000cbe:	4ba9      	ldr	r3, [pc, #676]	; (8000f64 <display_erro+0x32c>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d12c      	bne.n	8000d20 <display_erro+0xe8>
 8000cc6:	4bb1      	ldr	r3, [pc, #708]	; (8000f8c <display_erro+0x354>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d028      	beq.n	8000d20 <display_erro+0xe8>
 8000cce:	4ba6      	ldr	r3, [pc, #664]	; (8000f68 <display_erro+0x330>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d124      	bne.n	8000d20 <display_erro+0xe8>
 8000cd6:	4ba5      	ldr	r3, [pc, #660]	; (8000f6c <display_erro+0x334>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d120      	bne.n	8000d20 <display_erro+0xe8>
 8000cde:	4ba4      	ldr	r3, [pc, #656]	; (8000f70 <display_erro+0x338>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d11c      	bne.n	8000d20 <display_erro+0xe8>
 8000ce6:	4ba3      	ldr	r3, [pc, #652]	; (8000f74 <display_erro+0x33c>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d118      	bne.n	8000d20 <display_erro+0xe8>
					OCB_Out_Time_Trigger_off =1;
 8000cee:	4ba8      	ldr	r3, [pc, #672]	; (8000f90 <display_erro+0x358>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	701a      	strb	r2, [r3, #0]
					end_display_flag =0;
 8000cf4:	4ba1      	ldr	r3, [pc, #644]	; (8000f7c <display_erro+0x344>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]
				Controller_Display_Mess(out_time_ocb, &seven_segment_switch_flag,&end_display_flag);
 8000cfa:	4aa0      	ldr	r2, [pc, #640]	; (8000f7c <display_erro+0x344>)
 8000cfc:	49a0      	ldr	r1, [pc, #640]	; (8000f80 <display_erro+0x348>)
 8000cfe:	4ba5      	ldr	r3, [pc, #660]	; (8000f94 <display_erro+0x35c>)
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff fcf1 	bl	80006e8 <Controller_Display_Mess>
				if (OCB_Out_Time_Flag_off){
 8000d06:	4ba4      	ldr	r3, [pc, #656]	; (8000f98 <display_erro+0x360>)
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d008      	beq.n	8000d20 <display_erro+0xe8>
					OCB_Out_Time_Flag =0;
 8000d0e:	4b9f      	ldr	r3, [pc, #636]	; (8000f8c <display_erro+0x354>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]
					OCB_Out_Time_Trigger_off=0;
 8000d14:	4b9e      	ldr	r3, [pc, #632]	; (8000f90 <display_erro+0x358>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
					OCB_Out_Time_Flag_off = 0;
 8000d1a:	4b9f      	ldr	r3, [pc, #636]	; (8000f98 <display_erro+0x360>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
				}
			}

		if ((!OCB_Out_Time_Flag)&&(!PP_Out_Time_Flag)&&(CTO_Out_Time_Flag)&&!(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)){
 8000d20:	4b9a      	ldr	r3, [pc, #616]	; (8000f8c <display_erro+0x354>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d130      	bne.n	8000d8a <display_erro+0x152>
 8000d28:	4b8e      	ldr	r3, [pc, #568]	; (8000f64 <display_erro+0x32c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d12c      	bne.n	8000d8a <display_erro+0x152>
 8000d30:	4b9a      	ldr	r3, [pc, #616]	; (8000f9c <display_erro+0x364>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d028      	beq.n	8000d8a <display_erro+0x152>
 8000d38:	4b8b      	ldr	r3, [pc, #556]	; (8000f68 <display_erro+0x330>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d124      	bne.n	8000d8a <display_erro+0x152>
 8000d40:	4b8a      	ldr	r3, [pc, #552]	; (8000f6c <display_erro+0x334>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d120      	bne.n	8000d8a <display_erro+0x152>
 8000d48:	4b89      	ldr	r3, [pc, #548]	; (8000f70 <display_erro+0x338>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d11c      	bne.n	8000d8a <display_erro+0x152>
 8000d50:	4b88      	ldr	r3, [pc, #544]	; (8000f74 <display_erro+0x33c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d118      	bne.n	8000d8a <display_erro+0x152>
					end_display_flag =0;
 8000d58:	4b88      	ldr	r3, [pc, #544]	; (8000f7c <display_erro+0x344>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	701a      	strb	r2, [r3, #0]
					CTO_Out_Time_Trigger_off =1;
 8000d5e:	4b90      	ldr	r3, [pc, #576]	; (8000fa0 <display_erro+0x368>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
				Controller_Display_Mess(out_time_cto, &seven_segment_switch_flag,&end_display_flag);
 8000d64:	4a85      	ldr	r2, [pc, #532]	; (8000f7c <display_erro+0x344>)
 8000d66:	4986      	ldr	r1, [pc, #536]	; (8000f80 <display_erro+0x348>)
 8000d68:	4b8e      	ldr	r3, [pc, #568]	; (8000fa4 <display_erro+0x36c>)
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fcbc 	bl	80006e8 <Controller_Display_Mess>
				if (CTO_Out_Time_Flag_off){
 8000d70:	4b8d      	ldr	r3, [pc, #564]	; (8000fa8 <display_erro+0x370>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d008      	beq.n	8000d8a <display_erro+0x152>
					CTO_Out_Time_Flag =0;
 8000d78:	4b88      	ldr	r3, [pc, #544]	; (8000f9c <display_erro+0x364>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]
					CTO_Out_Time_Trigger_off=0;
 8000d7e:	4b88      	ldr	r3, [pc, #544]	; (8000fa0 <display_erro+0x368>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
					CTO_Out_Time_Flag_off = 0;
 8000d84:	4b88      	ldr	r3, [pc, #544]	; (8000fa8 <display_erro+0x370>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
					}
				}

		if ((!OCB_Out_Time_Flag)&&(!PP_Out_Time_Flag)&&(!CTO_Out_Time_Flag)&&(RO_Out_Time_Flag)&&!(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)){
 8000d8a:	4b80      	ldr	r3, [pc, #512]	; (8000f8c <display_erro+0x354>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d134      	bne.n	8000dfc <display_erro+0x1c4>
 8000d92:	4b74      	ldr	r3, [pc, #464]	; (8000f64 <display_erro+0x32c>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d130      	bne.n	8000dfc <display_erro+0x1c4>
 8000d9a:	4b80      	ldr	r3, [pc, #512]	; (8000f9c <display_erro+0x364>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d12c      	bne.n	8000dfc <display_erro+0x1c4>
 8000da2:	4b82      	ldr	r3, [pc, #520]	; (8000fac <display_erro+0x374>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d028      	beq.n	8000dfc <display_erro+0x1c4>
 8000daa:	4b6f      	ldr	r3, [pc, #444]	; (8000f68 <display_erro+0x330>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d124      	bne.n	8000dfc <display_erro+0x1c4>
 8000db2:	4b6e      	ldr	r3, [pc, #440]	; (8000f6c <display_erro+0x334>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d120      	bne.n	8000dfc <display_erro+0x1c4>
 8000dba:	4b6d      	ldr	r3, [pc, #436]	; (8000f70 <display_erro+0x338>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d11c      	bne.n	8000dfc <display_erro+0x1c4>
 8000dc2:	4b6c      	ldr	r3, [pc, #432]	; (8000f74 <display_erro+0x33c>)
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d118      	bne.n	8000dfc <display_erro+0x1c4>
					RO_Out_Time_Trigger_off =1;
 8000dca:	4b79      	ldr	r3, [pc, #484]	; (8000fb0 <display_erro+0x378>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	701a      	strb	r2, [r3, #0]
					end_display_flag =0;
 8000dd0:	4b6a      	ldr	r3, [pc, #424]	; (8000f7c <display_erro+0x344>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
				Controller_Display_Mess(out_time_ro, &seven_segment_switch_flag,&end_display_flag);
 8000dd6:	4a69      	ldr	r2, [pc, #420]	; (8000f7c <display_erro+0x344>)
 8000dd8:	4969      	ldr	r1, [pc, #420]	; (8000f80 <display_erro+0x348>)
 8000dda:	4b76      	ldr	r3, [pc, #472]	; (8000fb4 <display_erro+0x37c>)
 8000ddc:	0018      	movs	r0, r3
 8000dde:	f7ff fc83 	bl	80006e8 <Controller_Display_Mess>
				if (RO_Out_Time_Flag_off){
 8000de2:	4b75      	ldr	r3, [pc, #468]	; (8000fb8 <display_erro+0x380>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d008      	beq.n	8000dfc <display_erro+0x1c4>
					RO_Out_Time_Flag =0;
 8000dea:	4b70      	ldr	r3, [pc, #448]	; (8000fac <display_erro+0x374>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	701a      	strb	r2, [r3, #0]
					RO_Out_Time_Trigger_off=0;
 8000df0:	4b6f      	ldr	r3, [pc, #444]	; (8000fb0 <display_erro+0x378>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
					RO_Out_Time_Flag_off = 0;
 8000df6:	4b70      	ldr	r3, [pc, #448]	; (8000fb8 <display_erro+0x380>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
				}
			}

		if ((!OCB_Out_Time_Flag)&&(!PP_Out_Time_Flag)&&(!CTO_Out_Time_Flag)&&(!RO_Out_Time_Flag)&&water_input_flag&&!(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)) {
 8000dfc:	4b63      	ldr	r3, [pc, #396]	; (8000f8c <display_erro+0x354>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d138      	bne.n	8000e76 <display_erro+0x23e>
 8000e04:	4b57      	ldr	r3, [pc, #348]	; (8000f64 <display_erro+0x32c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d134      	bne.n	8000e76 <display_erro+0x23e>
 8000e0c:	4b63      	ldr	r3, [pc, #396]	; (8000f9c <display_erro+0x364>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d130      	bne.n	8000e76 <display_erro+0x23e>
 8000e14:	4b65      	ldr	r3, [pc, #404]	; (8000fac <display_erro+0x374>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d12c      	bne.n	8000e76 <display_erro+0x23e>
 8000e1c:	4b4e      	ldr	r3, [pc, #312]	; (8000f58 <display_erro+0x320>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d028      	beq.n	8000e76 <display_erro+0x23e>
 8000e24:	4b50      	ldr	r3, [pc, #320]	; (8000f68 <display_erro+0x330>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d124      	bne.n	8000e76 <display_erro+0x23e>
 8000e2c:	4b4f      	ldr	r3, [pc, #316]	; (8000f6c <display_erro+0x334>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d120      	bne.n	8000e76 <display_erro+0x23e>
 8000e34:	4b4e      	ldr	r3, [pc, #312]	; (8000f70 <display_erro+0x338>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d11c      	bne.n	8000e76 <display_erro+0x23e>
 8000e3c:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <display_erro+0x33c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d118      	bne.n	8000e76 <display_erro+0x23e>
							Water_low_trigger_off = 1;
 8000e44:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <display_erro+0x328>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
							end_display_flag = 0;
 8000e4a:	4b4c      	ldr	r3, [pc, #304]	; (8000f7c <display_erro+0x344>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
					Controller_Display_Mess(test,&seven_segment_switch_flag,&end_display_flag);
 8000e50:	4a4a      	ldr	r2, [pc, #296]	; (8000f7c <display_erro+0x344>)
 8000e52:	494b      	ldr	r1, [pc, #300]	; (8000f80 <display_erro+0x348>)
 8000e54:	4b59      	ldr	r3, [pc, #356]	; (8000fbc <display_erro+0x384>)
 8000e56:	0018      	movs	r0, r3
 8000e58:	f7ff fc46 	bl	80006e8 <Controller_Display_Mess>
						if (Water_low_Flag_off) {
 8000e5c:	4b3f      	ldr	r3, [pc, #252]	; (8000f5c <display_erro+0x324>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d008      	beq.n	8000e76 <display_erro+0x23e>
							water_input_flag =0;
 8000e64:	4b3c      	ldr	r3, [pc, #240]	; (8000f58 <display_erro+0x320>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
							Water_low_Flag_off =0;
 8000e6a:	4b3c      	ldr	r3, [pc, #240]	; (8000f5c <display_erro+0x324>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
							Water_low_trigger_off =0;
 8000e70:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <display_erro+0x328>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
						}
					}

		if ((!OCB_Out_Time_Flag)&&(!water_input_flag)&&(!PP_Out_Time_Flag)&&(!CTO_Out_Time_Flag)&&(!RO_Out_Time_Flag)&&out_time_machine_flag&&!(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)) {
 8000e76:	4b45      	ldr	r3, [pc, #276]	; (8000f8c <display_erro+0x354>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d13c      	bne.n	8000ef8 <display_erro+0x2c0>
 8000e7e:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <display_erro+0x320>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d138      	bne.n	8000ef8 <display_erro+0x2c0>
 8000e86:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <display_erro+0x32c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d134      	bne.n	8000ef8 <display_erro+0x2c0>
 8000e8e:	4b43      	ldr	r3, [pc, #268]	; (8000f9c <display_erro+0x364>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d130      	bne.n	8000ef8 <display_erro+0x2c0>
 8000e96:	4b45      	ldr	r3, [pc, #276]	; (8000fac <display_erro+0x374>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d12c      	bne.n	8000ef8 <display_erro+0x2c0>
 8000e9e:	4b48      	ldr	r3, [pc, #288]	; (8000fc0 <display_erro+0x388>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d028      	beq.n	8000ef8 <display_erro+0x2c0>
 8000ea6:	4b30      	ldr	r3, [pc, #192]	; (8000f68 <display_erro+0x330>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d124      	bne.n	8000ef8 <display_erro+0x2c0>
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <display_erro+0x334>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d120      	bne.n	8000ef8 <display_erro+0x2c0>
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <display_erro+0x338>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d11c      	bne.n	8000ef8 <display_erro+0x2c0>
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <display_erro+0x33c>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d118      	bne.n	8000ef8 <display_erro+0x2c0>
						Machine_Time_Trigger_off = 1;
 8000ec6:	4b3f      	ldr	r3, [pc, #252]	; (8000fc4 <display_erro+0x38c>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	701a      	strb	r2, [r3, #0]
						end_display_flag = 0;
 8000ecc:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <display_erro+0x344>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]

				Controller_Display_Mess(out_time_Machine,&seven_segment_switch_flag,&end_display_flag);
 8000ed2:	4a2a      	ldr	r2, [pc, #168]	; (8000f7c <display_erro+0x344>)
 8000ed4:	492a      	ldr	r1, [pc, #168]	; (8000f80 <display_erro+0x348>)
 8000ed6:	4b3c      	ldr	r3, [pc, #240]	; (8000fc8 <display_erro+0x390>)
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff fc05 	bl	80006e8 <Controller_Display_Mess>
				if (Machine_Time_Flag_off){
 8000ede:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <display_erro+0x394>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d008      	beq.n	8000ef8 <display_erro+0x2c0>
						out_time_machine_flag = 0;
 8000ee6:	4b36      	ldr	r3, [pc, #216]	; (8000fc0 <display_erro+0x388>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
						Machine_Time_Trigger_off = 0;
 8000eec:	4b35      	ldr	r3, [pc, #212]	; (8000fc4 <display_erro+0x38c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	701a      	strb	r2, [r3, #0]
						Machine_Time_Flag_off = 0;
 8000ef2:	4b36      	ldr	r3, [pc, #216]	; (8000fcc <display_erro+0x394>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
				}
			}
		if ((!OCB_Out_Time_Flag)&&(!water_input_flag)&&(!PP_Out_Time_Flag)&&(!CTO_Out_Time_Flag)&&(!RO_Out_Time_Flag)&&(!out_time_machine_flag)&&!
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <display_erro+0x354>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d000      	beq.n	8000f02 <display_erro+0x2ca>
 8000f00:	e076      	b.n	8000ff0 <display_erro+0x3b8>
 8000f02:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <display_erro+0x320>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d000      	beq.n	8000f0c <display_erro+0x2d4>
 8000f0a:	e071      	b.n	8000ff0 <display_erro+0x3b8>
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <display_erro+0x32c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d000      	beq.n	8000f16 <display_erro+0x2de>
 8000f14:	e06c      	b.n	8000ff0 <display_erro+0x3b8>
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <display_erro+0x364>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d168      	bne.n	8000ff0 <display_erro+0x3b8>
 8000f1e:	4b23      	ldr	r3, [pc, #140]	; (8000fac <display_erro+0x374>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d164      	bne.n	8000ff0 <display_erro+0x3b8>
 8000f26:	4b26      	ldr	r3, [pc, #152]	; (8000fc0 <display_erro+0x388>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d160      	bne.n	8000ff0 <display_erro+0x3b8>
								(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)){
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <display_erro+0x330>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
		if ((!OCB_Out_Time_Flag)&&(!water_input_flag)&&(!PP_Out_Time_Flag)&&(!CTO_Out_Time_Flag)&&(!RO_Out_Time_Flag)&&(!out_time_machine_flag)&&!
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d15c      	bne.n	8000ff0 <display_erro+0x3b8>
								(pp1_button_flag||ocb_button_flag||cto_button_flag||ro_button_flag)){
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <display_erro+0x334>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d158      	bne.n	8000ff0 <display_erro+0x3b8>
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <display_erro+0x338>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d154      	bne.n	8000ff0 <display_erro+0x3b8>
 8000f46:	4b0b      	ldr	r3, [pc, #44]	; (8000f74 <display_erro+0x33c>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
		if ((!OCB_Out_Time_Flag)&&(!water_input_flag)&&(!PP_Out_Time_Flag)&&(!CTO_Out_Time_Flag)&&(!RO_Out_Time_Flag)&&(!out_time_machine_flag)&&!
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d150      	bne.n	8000ff0 <display_erro+0x3b8>
					erro_dislay_trigger = 1;
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <display_erro+0x398>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	e03e      	b.n	8000fd4 <display_erro+0x39c>
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	20000264 	.word	0x20000264
 8000f5c:	20000267 	.word	0x20000267
 8000f60:	20000260 	.word	0x20000260
 8000f64:	2000018a 	.word	0x2000018a
 8000f68:	2000026b 	.word	0x2000026b
 8000f6c:	2000024d 	.word	0x2000024d
 8000f70:	2000026a 	.word	0x2000026a
 8000f74:	20000255 	.word	0x20000255
 8000f78:	20000258 	.word	0x20000258
 8000f7c:	2000018b 	.word	0x2000018b
 8000f80:	2000025d 	.word	0x2000025d
 8000f84:	20000080 	.word	0x20000080
 8000f88:	20000256 	.word	0x20000256
 8000f8c:	2000018c 	.word	0x2000018c
 8000f90:	20000265 	.word	0x20000265
 8000f94:	20000084 	.word	0x20000084
 8000f98:	20000262 	.word	0x20000262
 8000f9c:	20000189 	.word	0x20000189
 8000fa0:	2000025e 	.word	0x2000025e
 8000fa4:	20000088 	.word	0x20000088
 8000fa8:	20000269 	.word	0x20000269
 8000fac:	20000188 	.word	0x20000188
 8000fb0:	20000250 	.word	0x20000250
 8000fb4:	2000008c 	.word	0x2000008c
 8000fb8:	20000253 	.word	0x20000253
 8000fbc:	20000078 	.word	0x20000078
 8000fc0:	20000254 	.word	0x20000254
 8000fc4:	2000025c 	.word	0x2000025c
 8000fc8:	2000007c 	.word	0x2000007c
 8000fcc:	20000268 	.word	0x20000268
 8000fd0:	20000257 	.word	0x20000257
				on_end_display(&erro_dislay_trigger); /// sua thanh ghi
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <display_erro+0x3c0>)
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f000 f8cc 	bl	8001174 <on_end_display>
				if (erro_dislay_flag_off){
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <display_erro+0x3c4>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d005      	beq.n	8000ff0 <display_erro+0x3b8>
						erro_dislay_trigger =0;
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <display_erro+0x3c0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]
						erro_dislay_flag_off = 0;
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <display_erro+0x3c4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
			}
		}
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	20000257 	.word	0x20000257
 8000ffc:	20000261 	.word	0x20000261

08001000 <out_time_fillter>:



void out_time_fillter(){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	 if ((RO_time >= OVER_TIME_RO )&&(!dislay_erro_trigger)){
 8001004:	4b45      	ldr	r3, [pc, #276]	; (800111c <out_time_fillter+0x11c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a45      	ldr	r2, [pc, #276]	; (8001120 <out_time_fillter+0x120>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d906      	bls.n	800101c <out_time_fillter+0x1c>
 800100e:	4b45      	ldr	r3, [pc, #276]	; (8001124 <out_time_fillter+0x124>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d102      	bne.n	800101c <out_time_fillter+0x1c>
		 RO_Out_Time_Flag = 1;
 8001016:	4b44      	ldr	r3, [pc, #272]	; (8001128 <out_time_fillter+0x128>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
	 }


	 if ((CTO_time >= OVER_TIME_CTO)&&(!dislay_erro_trigger)) {
 800101c:	4b43      	ldr	r3, [pc, #268]	; (800112c <out_time_fillter+0x12c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a43      	ldr	r2, [pc, #268]	; (8001130 <out_time_fillter+0x130>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d906      	bls.n	8001034 <out_time_fillter+0x34>
 8001026:	4b3f      	ldr	r3, [pc, #252]	; (8001124 <out_time_fillter+0x124>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d102      	bne.n	8001034 <out_time_fillter+0x34>
		CTO_Out_Time_Flag = 1;
 800102e:	4b41      	ldr	r3, [pc, #260]	; (8001134 <out_time_fillter+0x134>)
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
	}



	 if ((OCB_time >= OVER_TIME_OCB)&&(!dislay_erro_trigger)) {
 8001034:	4b40      	ldr	r3, [pc, #256]	; (8001138 <out_time_fillter+0x138>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a40      	ldr	r2, [pc, #256]	; (800113c <out_time_fillter+0x13c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d906      	bls.n	800104c <out_time_fillter+0x4c>
 800103e:	4b39      	ldr	r3, [pc, #228]	; (8001124 <out_time_fillter+0x124>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <out_time_fillter+0x4c>
		OCB_Out_Time_Flag =1 ;
 8001046:	4b3e      	ldr	r3, [pc, #248]	; (8001140 <out_time_fillter+0x140>)
 8001048:	2201      	movs	r2, #1
 800104a:	701a      	strb	r2, [r3, #0]
	}


	if ((PP1_time >= OVER_TIME_pp1)&&(!dislay_erro_trigger)) {
 800104c:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <out_time_fillter+0x144>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a3d      	ldr	r2, [pc, #244]	; (8001148 <out_time_fillter+0x148>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d906      	bls.n	8001064 <out_time_fillter+0x64>
 8001056:	4b33      	ldr	r3, [pc, #204]	; (8001124 <out_time_fillter+0x124>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d102      	bne.n	8001064 <out_time_fillter+0x64>
		PP_Out_Time_Flag = 1;
 800105e:	4b3b      	ldr	r3, [pc, #236]	; (800114c <out_time_fillter+0x14c>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]

	}
	/// thoi gian Chay qua thoi gian
	if((Machine_time_run >=300)&&(!dislay_erro_trigger)){
 8001064:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <out_time_fillter+0x150>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	232c      	movs	r3, #44	; 0x2c
 800106a:	33ff      	adds	r3, #255	; 0xff
 800106c:	429a      	cmp	r2, r3
 800106e:	d906      	bls.n	800107e <out_time_fillter+0x7e>
 8001070:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <out_time_fillter+0x124>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d102      	bne.n	800107e <out_time_fillter+0x7e>
		out_time_machine_flag = 1;
 8001078:	4b36      	ldr	r3, [pc, #216]	; (8001154 <out_time_fillter+0x154>)
 800107a:	2201      	movs	r2, #1
 800107c:	701a      	strb	r2, [r3, #0]

	}
	if ((!HAL_GPIO_ReadPin(WARTER_INPUT_PORT, WARTER_INPUT_PIN))&&(!dislay_erro_trigger)) {
 800107e:	2390      	movs	r3, #144	; 0x90
 8001080:	05db      	lsls	r3, r3, #23
 8001082:	2101      	movs	r1, #1
 8001084:	0018      	movs	r0, r3
 8001086:	f001 fd91 	bl	8002bac <HAL_GPIO_ReadPin>
 800108a:	1e03      	subs	r3, r0, #0
 800108c:	d106      	bne.n	800109c <out_time_fillter+0x9c>
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <out_time_fillter+0x124>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <out_time_fillter+0x9c>
		water_input_flag =1;
 8001096:	4b30      	ldr	r3, [pc, #192]	; (8001158 <out_time_fillter+0x158>)
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
	}
	if (RO_Out_Time_Flag||CTO_Out_Time_Flag||OCB_Out_Time_Flag||PP_Out_Time_Flag||water_input_flag||out_time_machine_flag||erro_dislay_trigger){
 800109c:	4b22      	ldr	r3, [pc, #136]	; (8001128 <out_time_fillter+0x128>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d117      	bne.n	80010d4 <out_time_fillter+0xd4>
 80010a4:	4b23      	ldr	r3, [pc, #140]	; (8001134 <out_time_fillter+0x134>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d113      	bne.n	80010d4 <out_time_fillter+0xd4>
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <out_time_fillter+0x140>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d10f      	bne.n	80010d4 <out_time_fillter+0xd4>
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <out_time_fillter+0x14c>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10b      	bne.n	80010d4 <out_time_fillter+0xd4>
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <out_time_fillter+0x158>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d107      	bne.n	80010d4 <out_time_fillter+0xd4>
 80010c4:	4b23      	ldr	r3, [pc, #140]	; (8001154 <out_time_fillter+0x154>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d103      	bne.n	80010d4 <out_time_fillter+0xd4>
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <out_time_fillter+0x15c>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d01a      	beq.n	800110a <out_time_fillter+0x10a>
			dislay_erro_trigger =1;
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <out_time_fillter+0x124>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
		if (!(ro_button_flag||cto_button_flag||ocb_button_flag||pp1_button_flag)) {
 80010da:	4b21      	ldr	r3, [pc, #132]	; (8001160 <out_time_fillter+0x160>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d10f      	bne.n	8001102 <out_time_fillter+0x102>
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <out_time_fillter+0x164>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10b      	bne.n	8001102 <out_time_fillter+0x102>
 80010ea:	4b1f      	ldr	r3, [pc, #124]	; (8001168 <out_time_fillter+0x168>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d107      	bne.n	8001102 <out_time_fillter+0x102>
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <out_time_fillter+0x16c>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d103      	bne.n	8001102 <out_time_fillter+0x102>
			lock_end_dislay_flag = 0;
 80010fa:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <out_time_fillter+0x170>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
		if (!(ro_button_flag||cto_button_flag||ocb_button_flag||pp1_button_flag)) {
 8001100:	e009      	b.n	8001116 <out_time_fillter+0x116>
		}else {
			lock_end_dislay_flag = 1;
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <out_time_fillter+0x170>)
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
		if (!(ro_button_flag||cto_button_flag||ocb_button_flag||pp1_button_flag)) {
 8001108:	e005      	b.n	8001116 <out_time_fillter+0x116>
		}
	}else {
		dislay_erro_trigger =0;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <out_time_fillter+0x124>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
		lock_end_dislay_flag = 1;
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <out_time_fillter+0x170>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
	}
 }
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200001ac 	.word	0x200001ac
 8001120:	0000a8bf 	.word	0x0000a8bf
 8001124:	2000024f 	.word	0x2000024f
 8001128:	20000188 	.word	0x20000188
 800112c:	20000240 	.word	0x20000240
 8001130:	00007e8f 	.word	0x00007e8f
 8001134:	20000189 	.word	0x20000189
 8001138:	20000190 	.word	0x20000190
 800113c:	0000545f 	.word	0x0000545f
 8001140:	2000018c 	.word	0x2000018c
 8001144:	200001f8 	.word	0x200001f8
 8001148:	00002a2f 	.word	0x00002a2f
 800114c:	2000018a 	.word	0x2000018a
 8001150:	20000244 	.word	0x20000244
 8001154:	20000254 	.word	0x20000254
 8001158:	20000264 	.word	0x20000264
 800115c:	20000257 	.word	0x20000257
 8001160:	20000255 	.word	0x20000255
 8001164:	2000026a 	.word	0x2000026a
 8001168:	2000024d 	.word	0x2000024d
 800116c:	2000026b 	.word	0x2000026b
 8001170:	2000024e 	.word	0x2000024e

08001174 <on_end_display>:
void on_end_display(uint8_t *flag){
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	if(*flag){
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d029      	beq.n	80011d8 <on_end_display+0x64>
		HAL_GPIO_WritePin(LED7_3_PORT, LED7_3_PIN, 0);
 8001184:	2380      	movs	r3, #128	; 0x80
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4815      	ldr	r0, [pc, #84]	; (80011e0 <on_end_display+0x6c>)
 800118a:	2200      	movs	r2, #0
 800118c:	0019      	movs	r1, r3
 800118e:	f001 fd2a 	bl	8002be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_2_PORT, LED7_2_PIN, 0);
 8001192:	2380      	movs	r3, #128	; 0x80
 8001194:	015b      	lsls	r3, r3, #5
 8001196:	4812      	ldr	r0, [pc, #72]	; (80011e0 <on_end_display+0x6c>)
 8001198:	2200      	movs	r2, #0
 800119a:	0019      	movs	r1, r3
 800119c:	f001 fd23 	bl	8002be6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_1_PORT, LED7_1_PIN, 0);
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	019b      	lsls	r3, r3, #6
 80011a4:	480e      	ldr	r0, [pc, #56]	; (80011e0 <on_end_display+0x6c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	0019      	movs	r1, r3
 80011aa:	f001 fd1c 	bl	8002be6 <HAL_GPIO_WritePin>
		*flag = 0;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
		lock_end_dislay_flag = 0;
 80011b4:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <on_end_display+0x70>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
		ro_button_flag = cto_button_flag = ocb_button_flag = pp1_button_flag =0;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <on_end_display+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	701a      	strb	r2, [r3, #0]
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <on_end_display+0x74>)
 80011c2:	781a      	ldrb	r2, [r3, #0]
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <on_end_display+0x78>)
 80011c6:	701a      	strb	r2, [r3, #0]
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <on_end_display+0x78>)
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <on_end_display+0x7c>)
 80011ce:	701a      	strb	r2, [r3, #0]
 80011d0:	4b07      	ldr	r3, [pc, #28]	; (80011f0 <on_end_display+0x7c>)
 80011d2:	781a      	ldrb	r2, [r3, #0]
 80011d4:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <on_end_display+0x80>)
 80011d6:	701a      	strb	r2, [r3, #0]
//		free(OCB_time_p);
//		free(CTO_time_p);
//		free(RO_time_p);

	}
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	48000400 	.word	0x48000400
 80011e4:	2000024e 	.word	0x2000024e
 80011e8:	2000026b 	.word	0x2000026b
 80011ec:	2000024d 	.word	0x2000024d
 80011f0:	2000026a 	.word	0x2000026a
 80011f4:	20000255 	.word	0x20000255

080011f8 <led_fan_action>:

void led_fan_action(uint8_t* led_fan_flag){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	static int counting;
	static int fw_done;
	if ( (fw_done==0)&&(counting < 10)) {
 8001200:	4b38      	ldr	r3, [pc, #224]	; (80012e4 <led_fan_action+0xec>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d138      	bne.n	800127a <led_fan_action+0x82>
 8001208:	4b37      	ldr	r3, [pc, #220]	; (80012e8 <led_fan_action+0xf0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b09      	cmp	r3, #9
 800120e:	dc34      	bgt.n	800127a <led_fan_action+0x82>
		if (*led_fan_flag) {
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d026      	beq.n	8001266 <led_fan_action+0x6e>

			HAL_GPIO_WritePin(fan_led_port[counting], fan_led_pin[counting], 0);
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <led_fan_action+0xf0>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4b33      	ldr	r3, [pc, #204]	; (80012ec <led_fan_action+0xf4>)
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	58d0      	ldr	r0, [r2, r3]
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <led_fan_action+0xf0>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b32      	ldr	r3, [pc, #200]	; (80012f0 <led_fan_action+0xf8>)
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	58d3      	ldr	r3, [r2, r3]
 800122c:	b29b      	uxth	r3, r3
 800122e:	2200      	movs	r2, #0
 8001230:	0019      	movs	r1, r3
 8001232:	f001 fcd8 	bl	8002be6 <HAL_GPIO_WritePin>
			*led_fan_flag=0;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(fan_led_port[counting], fan_led_pin[counting-3], 1);
 800123c:	4b2a      	ldr	r3, [pc, #168]	; (80012e8 <led_fan_action+0xf0>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <led_fan_action+0xf4>)
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	58d0      	ldr	r0, [r2, r3]
 8001246:	4b28      	ldr	r3, [pc, #160]	; (80012e8 <led_fan_action+0xf0>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	1eda      	subs	r2, r3, #3
 800124c:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <led_fan_action+0xf8>)
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	58d3      	ldr	r3, [r2, r3]
 8001252:	b29b      	uxth	r3, r3
 8001254:	2201      	movs	r2, #1
 8001256:	0019      	movs	r1, r3
 8001258:	f001 fcc5 	bl	8002be6 <HAL_GPIO_WritePin>
			counting++;
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <led_fan_action+0xf0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <led_fan_action+0xf0>)
 8001264:	601a      	str	r2, [r3, #0]

		}
		if(counting==10){
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <led_fan_action+0xf0>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2b0a      	cmp	r3, #10
 800126c:	d105      	bne.n	800127a <led_fan_action+0x82>
			fw_done=1;
 800126e:	4b1d      	ldr	r3, [pc, #116]	; (80012e4 <led_fan_action+0xec>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]
			counting=0;
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <led_fan_action+0xf0>)
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
		}
	}
	if ((fw_done==1)&&(counting < 10)) {
 800127a:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <led_fan_action+0xec>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d12c      	bne.n	80012dc <led_fan_action+0xe4>
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <led_fan_action+0xf0>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b09      	cmp	r3, #9
 8001288:	dc28      	bgt.n	80012dc <led_fan_action+0xe4>
		if (*led_fan_flag) {
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d01a      	beq.n	80012c8 <led_fan_action+0xd0>
			HAL_GPIO_WritePin(fan_led_port[9-counting], fan_led_pin[9-counting], 1);
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <led_fan_action+0xf0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2209      	movs	r2, #9
 8001298:	1ad2      	subs	r2, r2, r3
 800129a:	4b14      	ldr	r3, [pc, #80]	; (80012ec <led_fan_action+0xf4>)
 800129c:	0092      	lsls	r2, r2, #2
 800129e:	58d0      	ldr	r0, [r2, r3]
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <led_fan_action+0xf0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2209      	movs	r2, #9
 80012a6:	1ad2      	subs	r2, r2, r3
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <led_fan_action+0xf8>)
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	58d3      	ldr	r3, [r2, r3]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	2201      	movs	r2, #1
 80012b2:	0019      	movs	r1, r3
 80012b4:	f001 fc97 	bl	8002be6 <HAL_GPIO_WritePin>
			*led_fan_flag=0;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
			counting++;
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <led_fan_action+0xf0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <led_fan_action+0xf0>)
 80012c6:	601a      	str	r2, [r3, #0]

		}
		if(counting==10){
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <led_fan_action+0xf0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b0a      	cmp	r3, #10
 80012ce:	d105      	bne.n	80012dc <led_fan_action+0xe4>
			fw_done=0;
 80012d0:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <led_fan_action+0xec>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
			counting=0;
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <led_fan_action+0xf0>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
		}
	}
}
 80012dc:	46c0      	nop			; (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	b002      	add	sp, #8
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	2000011c 	.word	0x2000011c
 80012e8:	20000120 	.word	0x20000120
 80012ec:	20000028 	.word	0x20000028
 80012f0:	20000050 	.word	0x20000050

080012f4 <led_tanks_full>:

void led_tanks_full( ){
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	if (led_tank_full_flag_off){
 80012f8:	4b44      	ldr	r3, [pc, #272]	; (800140c <led_tanks_full+0x118>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d03e      	beq.n	800137e <led_tanks_full+0x8a>

				HAL_GPIO_WritePin(LED_C1_PORT, LED_C1_PIN, 1);
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4842      	ldr	r0, [pc, #264]	; (8001410 <led_tanks_full+0x11c>)
 8001306:	2201      	movs	r2, #1
 8001308:	0019      	movs	r1, r3
 800130a:	f001 fc6c 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C2_PORT, LED_C2_PIN, 1);
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	483f      	ldr	r0, [pc, #252]	; (8001410 <led_tanks_full+0x11c>)
 8001314:	2201      	movs	r2, #1
 8001316:	0019      	movs	r1, r3
 8001318:	f001 fc65 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C3_PORT, LED_C3_PIN, 1);
 800131c:	4b3c      	ldr	r3, [pc, #240]	; (8001410 <led_tanks_full+0x11c>)
 800131e:	2201      	movs	r2, #1
 8001320:	2180      	movs	r1, #128	; 0x80
 8001322:	0018      	movs	r0, r3
 8001324:	f001 fc5f 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C4_PORT, LED_C4_PIN, 1);
 8001328:	4b39      	ldr	r3, [pc, #228]	; (8001410 <led_tanks_full+0x11c>)
 800132a:	2201      	movs	r2, #1
 800132c:	2140      	movs	r1, #64	; 0x40
 800132e:	0018      	movs	r0, r3
 8001330:	f001 fc59 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C5_PORT, LED_C5_PIN, 1);
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <led_tanks_full+0x11c>)
 8001336:	2201      	movs	r2, #1
 8001338:	2120      	movs	r1, #32
 800133a:	0018      	movs	r0, r3
 800133c:	f001 fc53 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C6_PORT, LED_C6_PIN, 1);
 8001340:	4b33      	ldr	r3, [pc, #204]	; (8001410 <led_tanks_full+0x11c>)
 8001342:	2201      	movs	r2, #1
 8001344:	2110      	movs	r1, #16
 8001346:	0018      	movs	r0, r3
 8001348:	f001 fc4d 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C7_PORT, LED_C7_PIN, 1);
 800134c:	4b30      	ldr	r3, [pc, #192]	; (8001410 <led_tanks_full+0x11c>)
 800134e:	2201      	movs	r2, #1
 8001350:	2108      	movs	r1, #8
 8001352:	0018      	movs	r0, r3
 8001354:	f001 fc47 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C8_PORT, LED_C8_PIN, 1);
 8001358:	4b2d      	ldr	r3, [pc, #180]	; (8001410 <led_tanks_full+0x11c>)
 800135a:	2201      	movs	r2, #1
 800135c:	2102      	movs	r1, #2
 800135e:	0018      	movs	r0, r3
 8001360:	f001 fc41 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C9_PORT, LED_C9_PIN, 1);
 8001364:	4b2a      	ldr	r3, [pc, #168]	; (8001410 <led_tanks_full+0x11c>)
 8001366:	2201      	movs	r2, #1
 8001368:	2101      	movs	r1, #1
 800136a:	0018      	movs	r0, r3
 800136c:	f001 fc3b 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C10_PORT, LED_C10_PIN, 1);
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4826      	ldr	r0, [pc, #152]	; (8001410 <led_tanks_full+0x11c>)
 8001376:	2201      	movs	r2, #1
 8001378:	0019      	movs	r1, r3
 800137a:	f001 fc34 	bl	8002be6 <HAL_GPIO_WritePin>

		}

	if (led_tank_full_flag) {
 800137e:	4b25      	ldr	r3, [pc, #148]	; (8001414 <led_tanks_full+0x120>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d03e      	beq.n	8001404 <led_tanks_full+0x110>

				HAL_GPIO_WritePin(LED_C1_PORT, LED_C1_PIN, 0);
 8001386:	2380      	movs	r3, #128	; 0x80
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4821      	ldr	r0, [pc, #132]	; (8001410 <led_tanks_full+0x11c>)
 800138c:	2200      	movs	r2, #0
 800138e:	0019      	movs	r1, r3
 8001390:	f001 fc29 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C2_PORT, LED_C2_PIN, 0);
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	481d      	ldr	r0, [pc, #116]	; (8001410 <led_tanks_full+0x11c>)
 800139a:	2200      	movs	r2, #0
 800139c:	0019      	movs	r1, r3
 800139e:	f001 fc22 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C3_PORT, LED_C3_PIN, 0);
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <led_tanks_full+0x11c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	2180      	movs	r1, #128	; 0x80
 80013a8:	0018      	movs	r0, r3
 80013aa:	f001 fc1c 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C4_PORT, LED_C4_PIN, 0);
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <led_tanks_full+0x11c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	2140      	movs	r1, #64	; 0x40
 80013b4:	0018      	movs	r0, r3
 80013b6:	f001 fc16 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C5_PORT, LED_C5_PIN, 0);
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <led_tanks_full+0x11c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	2120      	movs	r1, #32
 80013c0:	0018      	movs	r0, r3
 80013c2:	f001 fc10 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C6_PORT, LED_C6_PIN, 0);
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <led_tanks_full+0x11c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	2110      	movs	r1, #16
 80013cc:	0018      	movs	r0, r3
 80013ce:	f001 fc0a 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C7_PORT, LED_C7_PIN, 0);
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <led_tanks_full+0x11c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	2108      	movs	r1, #8
 80013d8:	0018      	movs	r0, r3
 80013da:	f001 fc04 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C8_PORT, LED_C8_PIN, 0);
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <led_tanks_full+0x11c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	2102      	movs	r1, #2
 80013e4:	0018      	movs	r0, r3
 80013e6:	f001 fbfe 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C9_PORT, LED_C9_PIN, 0);
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <led_tanks_full+0x11c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	2101      	movs	r1, #1
 80013f0:	0018      	movs	r0, r3
 80013f2:	f001 fbf8 	bl	8002be6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_C10_PORT, LED_C10_PIN, 0);
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	4805      	ldr	r0, [pc, #20]	; (8001410 <led_tanks_full+0x11c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	0019      	movs	r1, r3
 8001400:	f001 fbf1 	bl	8002be6 <HAL_GPIO_WritePin>
		}
	}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	20000259 	.word	0x20000259
 8001410:	48000400 	.word	0x48000400
 8001414:	2000025f 	.word	0x2000025f

08001418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800141c:	f000 fef0 	bl	8002200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001420:	f000 f976 	bl	8001710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001424:	f000 fa4c 	bl	80018c0 <MX_GPIO_Init>
  MX_TIM3_Init();
 8001428:	f000 f9d2 	bl	80017d0 <MX_TIM3_Init>
  MX_TIM6_Init();
 800142c:	f000 fa26 	bl	800187c <MX_TIM6_Init>
  MX_IWDG_Init();
 8001430:	f000 f9ae 	bl	8001790 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  	  	  HAL_TIM_Base_Start_IT(&htim3);
 8001434:	4b9a      	ldr	r3, [pc, #616]	; (80016a0 <main+0x288>)
 8001436:	0018      	movs	r0, r3
 8001438:	f002 f8dc 	bl	80035f4 <HAL_TIM_Base_Start_IT>
  	  	  HAL_TIM_Base_Start_IT(&htim6);
 800143c:	4b99      	ldr	r3, [pc, #612]	; (80016a4 <main+0x28c>)
 800143e:	0018      	movs	r0, r3
 8001440:	f002 f8d8 	bl	80035f4 <HAL_TIM_Base_Start_IT>

  	  	  PP1_time = read_Flash((0x08007000));
 8001444:	4b98      	ldr	r3, [pc, #608]	; (80016a8 <main+0x290>)
 8001446:	0018      	movs	r0, r3
 8001448:	f7ff f942 	bl	80006d0 <read_Flash>
 800144c:	0002      	movs	r2, r0
 800144e:	4b97      	ldr	r3, [pc, #604]	; (80016ac <main+0x294>)
 8001450:	601a      	str	r2, [r3, #0]
  	  	  OCB_time = read_Flash((0x08007000+4));
 8001452:	4b97      	ldr	r3, [pc, #604]	; (80016b0 <main+0x298>)
 8001454:	0018      	movs	r0, r3
 8001456:	f7ff f93b 	bl	80006d0 <read_Flash>
 800145a:	0002      	movs	r2, r0
 800145c:	4b95      	ldr	r3, [pc, #596]	; (80016b4 <main+0x29c>)
 800145e:	601a      	str	r2, [r3, #0]
  	  	  CTO_time = read_Flash((0x08007000+8));
 8001460:	4b95      	ldr	r3, [pc, #596]	; (80016b8 <main+0x2a0>)
 8001462:	0018      	movs	r0, r3
 8001464:	f7ff f934 	bl	80006d0 <read_Flash>
 8001468:	0002      	movs	r2, r0
 800146a:	4b94      	ldr	r3, [pc, #592]	; (80016bc <main+0x2a4>)
 800146c:	601a      	str	r2, [r3, #0]
  	  	RO_time = read_Flash((0x08007000+12));
 800146e:	4b94      	ldr	r3, [pc, #592]	; (80016c0 <main+0x2a8>)
 8001470:	0018      	movs	r0, r3
 8001472:	f7ff f92d 	bl	80006d0 <read_Flash>
 8001476:	0002      	movs	r2, r0
 8001478:	4b92      	ldr	r3, [pc, #584]	; (80016c4 <main+0x2ac>)
 800147a:	601a      	str	r2, [r3, #0]
  	  	  if(HAL_GPIO_ReadPin(PUMP_STATUS_PORT, PUMP_STATUS_PIN)){
 800147c:	2390      	movs	r3, #144	; 0x90
 800147e:	05db      	lsls	r3, r3, #23
 8001480:	2102      	movs	r1, #2
 8001482:	0018      	movs	r0, r3
 8001484:	f001 fb92 	bl	8002bac <HAL_GPIO_ReadPin>
 8001488:	1e03      	subs	r3, r0, #0
 800148a:	d006      	beq.n	800149a <main+0x82>
  	  		  Machine_time_run = read_Flash((0x08007000+16));
 800148c:	4b8e      	ldr	r3, [pc, #568]	; (80016c8 <main+0x2b0>)
 800148e:	0018      	movs	r0, r3
 8001490:	f7ff f91e 	bl	80006d0 <read_Flash>
 8001494:	0002      	movs	r2, r0
 8001496:	4b8d      	ldr	r3, [pc, #564]	; (80016cc <main+0x2b4>)
 8001498:	601a      	str	r2, [r3, #0]
  	  	  }

  	  	  PP1_time_p = time_to_array(PP1_time);
 800149a:	4b84      	ldr	r3, [pc, #528]	; (80016ac <main+0x294>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	0018      	movs	r0, r3
 80014a0:	f7fe ffa8 	bl	80003f4 <time_to_array>
 80014a4:	0002      	movs	r2, r0
 80014a6:	4b8a      	ldr	r3, [pc, #552]	; (80016d0 <main+0x2b8>)
 80014a8:	601a      	str	r2, [r3, #0]
  	  	  OCB_time_p = time_to_array(OCB_time);
 80014aa:	4b82      	ldr	r3, [pc, #520]	; (80016b4 <main+0x29c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7fe ffa0 	bl	80003f4 <time_to_array>
 80014b4:	0002      	movs	r2, r0
 80014b6:	4b87      	ldr	r3, [pc, #540]	; (80016d4 <main+0x2bc>)
 80014b8:	601a      	str	r2, [r3, #0]
  	  	  CTO_time_p = time_to_array(CTO_time);
 80014ba:	4b80      	ldr	r3, [pc, #512]	; (80016bc <main+0x2a4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	0018      	movs	r0, r3
 80014c0:	f7fe ff98 	bl	80003f4 <time_to_array>
 80014c4:	0002      	movs	r2, r0
 80014c6:	4b84      	ldr	r3, [pc, #528]	; (80016d8 <main+0x2c0>)
 80014c8:	601a      	str	r2, [r3, #0]
  	  	  RO_time_p = time_to_array(RO_time);
 80014ca:	4b7e      	ldr	r3, [pc, #504]	; (80016c4 <main+0x2ac>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0018      	movs	r0, r3
 80014d0:	f7fe ff90 	bl	80003f4 <time_to_array>
 80014d4:	0002      	movs	r2, r0
 80014d6:	4b81      	ldr	r3, [pc, #516]	; (80016dc <main+0x2c4>)
 80014d8:	601a      	str	r2, [r3, #0]
  	  	HAL_GPIO_WritePin(LED7_A_PORT, LED7_A_PIN, GPIO_PIN_SET);
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	01db      	lsls	r3, r3, #7
 80014de:	4880      	ldr	r0, [pc, #512]	; (80016e0 <main+0x2c8>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	0019      	movs	r1, r3
 80014e4:	f001 fb7f 	bl	8002be6 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(LED7_B_PORT, LED7_B_PIN, GPIO_PIN_SET);
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	487c      	ldr	r0, [pc, #496]	; (80016e0 <main+0x2c8>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	0019      	movs	r1, r3
 80014f2:	f001 fb78 	bl	8002be6 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(LED7_C_PORT, LED7_C_PIN, GPIO_PIN_SET);
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	00d9      	lsls	r1, r3, #3
 80014fa:	2390      	movs	r3, #144	; 0x90
 80014fc:	05db      	lsls	r3, r3, #23
 80014fe:	2201      	movs	r2, #1
 8001500:	0018      	movs	r0, r3
 8001502:	f001 fb70 	bl	8002be6 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(LED7_D_PORT, LED7_D_PIN, GPIO_PIN_SET);
 8001506:	2380      	movs	r3, #128	; 0x80
 8001508:	0119      	lsls	r1, r3, #4
 800150a:	2390      	movs	r3, #144	; 0x90
 800150c:	05db      	lsls	r3, r3, #23
 800150e:	2201      	movs	r2, #1
 8001510:	0018      	movs	r0, r3
 8001512:	f001 fb68 	bl	8002be6 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(LED7_E_PORT, LED7_E_PIN, GPIO_PIN_SET);
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	0159      	lsls	r1, r3, #5
 800151a:	2390      	movs	r3, #144	; 0x90
 800151c:	05db      	lsls	r3, r3, #23
 800151e:	2201      	movs	r2, #1
 8001520:	0018      	movs	r0, r3
 8001522:	f001 fb60 	bl	8002be6 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(LED7_F_PORT, LED7_F_PIN, GPIO_PIN_SET);
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	0059      	lsls	r1, r3, #1
 800152a:	2390      	movs	r3, #144	; 0x90
 800152c:	05db      	lsls	r3, r3, #23
 800152e:	2201      	movs	r2, #1
 8001530:	0018      	movs	r0, r3
 8001532:	f001 fb58 	bl	8002be6 <HAL_GPIO_WritePin>
  	  		HAL_GPIO_WritePin(LED7_G_PORT, LED7_G_PIN, GPIO_PIN_SET);
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	0099      	lsls	r1, r3, #2
 800153a:	2390      	movs	r3, #144	; 0x90
 800153c:	05db      	lsls	r3, r3, #23
 800153e:	2201      	movs	r2, #1
 8001540:	0018      	movs	r0, r3
 8001542:	f001 fb50 	bl	8002be6 <HAL_GPIO_WritePin>

  	  	HAL_GPIO_WritePin(LED7_1_PORT, LED7_1_PIN, GPIO_PIN_SET);
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	019b      	lsls	r3, r3, #6
 800154a:	4865      	ldr	r0, [pc, #404]	; (80016e0 <main+0x2c8>)
 800154c:	2201      	movs	r2, #1
 800154e:	0019      	movs	r1, r3
 8001550:	f001 fb49 	bl	8002be6 <HAL_GPIO_WritePin>
  	  	HAL_Delay(500);
 8001554:	23fa      	movs	r3, #250	; 0xfa
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	0018      	movs	r0, r3
 800155a:	f000 feb5 	bl	80022c8 <HAL_Delay>
  	  	HAL_GPIO_WritePin(LED7_2_PORT, LED7_2_PIN, GPIO_PIN_SET);
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	015b      	lsls	r3, r3, #5
 8001562:	485f      	ldr	r0, [pc, #380]	; (80016e0 <main+0x2c8>)
 8001564:	2201      	movs	r2, #1
 8001566:	0019      	movs	r1, r3
 8001568:	f001 fb3d 	bl	8002be6 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_1_PORT, LED7_1_PIN, GPIO_PIN_RESET);
 800156c:	2380      	movs	r3, #128	; 0x80
 800156e:	019b      	lsls	r3, r3, #6
 8001570:	485b      	ldr	r0, [pc, #364]	; (80016e0 <main+0x2c8>)
 8001572:	2200      	movs	r2, #0
 8001574:	0019      	movs	r1, r3
 8001576:	f001 fb36 	bl	8002be6 <HAL_GPIO_WritePin>
  	  	HAL_Delay(500);
 800157a:	23fa      	movs	r3, #250	; 0xfa
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	0018      	movs	r0, r3
 8001580:	f000 fea2 	bl	80022c8 <HAL_Delay>
  	  	HAL_GPIO_WritePin(LED7_3_PORT, LED7_3_PIN, GPIO_PIN_SET);
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	4855      	ldr	r0, [pc, #340]	; (80016e0 <main+0x2c8>)
 800158a:	2201      	movs	r2, #1
 800158c:	0019      	movs	r1, r3
 800158e:	f001 fb2a 	bl	8002be6 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_2_PORT, LED7_2_PIN, GPIO_PIN_RESET);
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	015b      	lsls	r3, r3, #5
 8001596:	4852      	ldr	r0, [pc, #328]	; (80016e0 <main+0x2c8>)
 8001598:	2200      	movs	r2, #0
 800159a:	0019      	movs	r1, r3
 800159c:	f001 fb23 	bl	8002be6 <HAL_GPIO_WritePin>
  	  	HAL_Delay(500);
 80015a0:	23fa      	movs	r3, #250	; 0xfa
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	0018      	movs	r0, r3
 80015a6:	f000 fe8f 	bl	80022c8 <HAL_Delay>
  	  HAL_GPIO_WritePin(LED7_3_PORT, LED7_3_PIN, GPIO_PIN_RESET);
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	011b      	lsls	r3, r3, #4
 80015ae:	484c      	ldr	r0, [pc, #304]	; (80016e0 <main+0x2c8>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	0019      	movs	r1, r3
 80015b4:	f001 fb17 	bl	8002be6 <HAL_GPIO_WritePin>
  	  HAL_GPIO_WritePin(LED7_A_PORT, LED7_A_PIN, GPIO_PIN_RESET);
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	01db      	lsls	r3, r3, #7
 80015bc:	4848      	ldr	r0, [pc, #288]	; (80016e0 <main+0x2c8>)
 80015be:	2200      	movs	r2, #0
 80015c0:	0019      	movs	r1, r3
 80015c2:	f001 fb10 	bl	8002be6 <HAL_GPIO_WritePin>
  	  	 HAL_GPIO_WritePin(LED7_B_PORT, LED7_B_PIN, GPIO_PIN_RESET);
 80015c6:	2380      	movs	r3, #128	; 0x80
 80015c8:	021b      	lsls	r3, r3, #8
 80015ca:	4845      	ldr	r0, [pc, #276]	; (80016e0 <main+0x2c8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	0019      	movs	r1, r3
 80015d0:	f001 fb09 	bl	8002be6 <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(LED7_C_PORT, LED7_C_PIN, GPIO_PIN_RESET);
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	00d9      	lsls	r1, r3, #3
 80015d8:	2390      	movs	r3, #144	; 0x90
 80015da:	05db      	lsls	r3, r3, #23
 80015dc:	2200      	movs	r2, #0
 80015de:	0018      	movs	r0, r3
 80015e0:	f001 fb01 	bl	8002be6 <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(LED7_D_PORT, LED7_D_PIN, GPIO_PIN_RESET);
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	0119      	lsls	r1, r3, #4
 80015e8:	2390      	movs	r3, #144	; 0x90
 80015ea:	05db      	lsls	r3, r3, #23
 80015ec:	2200      	movs	r2, #0
 80015ee:	0018      	movs	r0, r3
 80015f0:	f001 faf9 	bl	8002be6 <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(LED7_E_PORT, LED7_E_PIN, GPIO_PIN_RESET);
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	0159      	lsls	r1, r3, #5
 80015f8:	2390      	movs	r3, #144	; 0x90
 80015fa:	05db      	lsls	r3, r3, #23
 80015fc:	2200      	movs	r2, #0
 80015fe:	0018      	movs	r0, r3
 8001600:	f001 faf1 	bl	8002be6 <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(LED7_F_PORT, LED7_F_PIN, GPIO_PIN_RESET);
 8001604:	2380      	movs	r3, #128	; 0x80
 8001606:	0059      	lsls	r1, r3, #1
 8001608:	2390      	movs	r3, #144	; 0x90
 800160a:	05db      	lsls	r3, r3, #23
 800160c:	2200      	movs	r2, #0
 800160e:	0018      	movs	r0, r3
 8001610:	f001 fae9 	bl	8002be6 <HAL_GPIO_WritePin>
  	   HAL_GPIO_WritePin(LED7_G_PORT, LED7_G_PIN, GPIO_PIN_RESET);
 8001614:	2380      	movs	r3, #128	; 0x80
 8001616:	0099      	lsls	r1, r3, #2
 8001618:	2390      	movs	r3, #144	; 0x90
 800161a:	05db      	lsls	r3, r3, #23
 800161c:	2200      	movs	r2, #0
 800161e:	0018      	movs	r0, r3
 8001620:	f001 fae1 	bl	8002be6 <HAL_GPIO_WritePin>
  	 HAL_Delay(500);
 8001624:	23fa      	movs	r3, #250	; 0xfa
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	0018      	movs	r0, r3
 800162a:	f000 fe4d 	bl	80022c8 <HAL_Delay>

  	  	  watch_Dog_Trigger = 1;
 800162e:	4b2d      	ldr	r3, [pc, #180]	; (80016e4 <main+0x2cc>)
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]
  	  	  IWDG->KR = 0xAAAA; // Writing 0xAAAA in the Key register prevents watchdog reset
 8001634:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <main+0x2d0>)
 8001636:	4a2d      	ldr	r2, [pc, #180]	; (80016ec <main+0x2d4>)
 8001638:	601a      	str	r2, [r3, #0]
  	  	  IWDG->KR = 0xCCCC; // Start the independent watchdog timer
 800163a:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <main+0x2d0>)
 800163c:	4a2c      	ldr	r2, [pc, #176]	; (80016f0 <main+0x2d8>)
 800163e:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(watch_Dog_Flag)
 8001640:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <main+0x2dc>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <main+0x23c>
	 	  		{

	 	  			IWDG->KR = 0xAAAA;
 8001648:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <main+0x2d0>)
 800164a:	4a28      	ldr	r2, [pc, #160]	; (80016ec <main+0x2d4>)
 800164c:	601a      	str	r2, [r3, #0]
	 	  			watch_Dog_Flag = 0;
 800164e:	4b29      	ldr	r3, [pc, #164]	; (80016f4 <main+0x2dc>)
 8001650:	2200      	movs	r2, #0
 8001652:	701a      	strb	r2, [r3, #0]
	 	  		}

	  if (Write_Flash_flag){
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <main+0x2e0>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <main+0x250>
		  led_tank_full_flag =0;
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <main+0x2e4>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
		  led_tank_full_flag_off =0;
 8001662:	4b27      	ldr	r3, [pc, #156]	; (8001700 <main+0x2e8>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
	  }
	  out_time_fillter();
 8001668:	f7ff fcca 	bl	8001000 <out_time_fillter>
	  increase_time(&pump_status_flag);
 800166c:	4b25      	ldr	r3, [pc, #148]	; (8001704 <main+0x2ec>)
 800166e:	0018      	movs	r0, r3
 8001670:	f7fe ff4c 	bl	800050c <increase_time>
	  display();
 8001674:	f7ff f9aa 	bl	80009cc <display>
	  display_erro();
 8001678:	f7ff fade 	bl	8000c38 <display_erro>
	  on_end_display(&end_display_flag);
 800167c:	4b22      	ldr	r3, [pc, #136]	; (8001708 <main+0x2f0>)
 800167e:	0018      	movs	r0, r3
 8001680:	f7ff fd78 	bl	8001174 <on_end_display>
  	  led_fan_action(&led_fan_flag);
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <main+0x2f4>)
 8001686:	0018      	movs	r0, r3
 8001688:	f7ff fdb6 	bl	80011f8 <led_fan_action>
	  led_tanks_full();
 800168c:	f7ff fe32 	bl	80012f4 <led_tanks_full>
	  clear_timer_fillter();
 8001690:	f7ff f9f2 	bl	8000a78 <clear_timer_fillter>
	  check_out_time_machine();
 8001694:	f7ff f93c 	bl	8000910 <check_out_time_machine>
//	  if(watch_Dog_Flag){
//	  HAL_WWDG_Refresh(&hwwdg);
//	  watch_Dog_Flag =0;
//	  }
	  write_Flash_Timer();
 8001698:	f7ff f96e 	bl	8000978 <write_Flash_Timer>
	  if(watch_Dog_Flag)
 800169c:	e7d0      	b.n	8001640 <main+0x228>
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	200001b4 	.word	0x200001b4
 80016a4:	200001fc 	.word	0x200001fc
 80016a8:	08007000 	.word	0x08007000
 80016ac:	200001f8 	.word	0x200001f8
 80016b0:	08007004 	.word	0x08007004
 80016b4:	20000190 	.word	0x20000190
 80016b8:	08007008 	.word	0x08007008
 80016bc:	20000240 	.word	0x20000240
 80016c0:	0800700c 	.word	0x0800700c
 80016c4:	200001ac 	.word	0x200001ac
 80016c8:	08007010 	.word	0x08007010
 80016cc:	20000244 	.word	0x20000244
 80016d0:	20000198 	.word	0x20000198
 80016d4:	20000248 	.word	0x20000248
 80016d8:	200001b0 	.word	0x200001b0
 80016dc:	2000023c 	.word	0x2000023c
 80016e0:	48000400 	.word	0x48000400
 80016e4:	20000266 	.word	0x20000266
 80016e8:	40003000 	.word	0x40003000
 80016ec:	0000aaaa 	.word	0x0000aaaa
 80016f0:	0000cccc 	.word	0x0000cccc
 80016f4:	20000263 	.word	0x20000263
 80016f8:	20000251 	.word	0x20000251
 80016fc:	2000025f 	.word	0x2000025f
 8001700:	20000259 	.word	0x20000259
 8001704:	2000024c 	.word	0x2000024c
 8001708:	2000018b 	.word	0x2000018b
 800170c:	20000252 	.word	0x20000252

08001710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b091      	sub	sp, #68	; 0x44
 8001714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001716:	2410      	movs	r4, #16
 8001718:	193b      	adds	r3, r7, r4
 800171a:	0018      	movs	r0, r3
 800171c:	2330      	movs	r3, #48	; 0x30
 800171e:	001a      	movs	r2, r3
 8001720:	2100      	movs	r1, #0
 8001722:	f002 fb3b 	bl	8003d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001726:	003b      	movs	r3, r7
 8001728:	0018      	movs	r0, r3
 800172a:	2310      	movs	r3, #16
 800172c:	001a      	movs	r2, r3
 800172e:	2100      	movs	r1, #0
 8001730:	f002 fb34 	bl	8003d9c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001734:	0021      	movs	r1, r4
 8001736:	187b      	adds	r3, r7, r1
 8001738:	2209      	movs	r2, #9
 800173a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800173c:	187b      	adds	r3, r7, r1
 800173e:	2201      	movs	r2, #1
 8001740:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001742:	187b      	adds	r3, r7, r1
 8001744:	2201      	movs	r2, #1
 8001746:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001748:	187b      	adds	r3, r7, r1
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174e:	187b      	adds	r3, r7, r1
 8001750:	0018      	movs	r0, r3
 8001752:	f001 fad5 	bl	8002d00 <HAL_RCC_OscConfig>
 8001756:	1e03      	subs	r3, r0, #0
 8001758:	d001      	beq.n	800175e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800175a:	f000 f979 	bl	8001a50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175e:	003b      	movs	r3, r7
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001764:	003b      	movs	r3, r7
 8001766:	2201      	movs	r2, #1
 8001768:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176a:	003b      	movs	r3, r7
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001770:	003b      	movs	r3, r7
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001776:	003b      	movs	r3, r7
 8001778:	2100      	movs	r1, #0
 800177a:	0018      	movs	r0, r3
 800177c:	f001 fddc 	bl	8003338 <HAL_RCC_ClockConfig>
 8001780:	1e03      	subs	r3, r0, #0
 8001782:	d001      	beq.n	8001788 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001784:	f000 f964 	bl	8001a50 <Error_Handler>
  }
}
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b011      	add	sp, #68	; 0x44
 800178e:	bd90      	pop	{r4, r7, pc}

08001790 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <MX_IWDG_Init+0x34>)
 8001796:	4a0c      	ldr	r2, [pc, #48]	; (80017c8 <MX_IWDG_Init+0x38>)
 8001798:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <MX_IWDG_Init+0x34>)
 800179c:	2206      	movs	r2, #6
 800179e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MX_IWDG_Init+0x34>)
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <MX_IWDG_Init+0x3c>)
 80017a4:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <MX_IWDG_Init+0x34>)
 80017a8:	4a08      	ldr	r2, [pc, #32]	; (80017cc <MX_IWDG_Init+0x3c>)
 80017aa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <MX_IWDG_Init+0x34>)
 80017ae:	0018      	movs	r0, r3
 80017b0:	f001 fa5c 	bl	8002c6c <HAL_IWDG_Init>
 80017b4:	1e03      	subs	r3, r0, #0
 80017b6:	d001      	beq.n	80017bc <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80017b8:	f000 f94a 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80017bc:	46c0      	nop			; (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	2000019c 	.word	0x2000019c
 80017c8:	40003000 	.word	0x40003000
 80017cc:	00000fff 	.word	0x00000fff

080017d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d6:	2308      	movs	r3, #8
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	0018      	movs	r0, r3
 80017dc:	2310      	movs	r3, #16
 80017de:	001a      	movs	r2, r3
 80017e0:	2100      	movs	r1, #0
 80017e2:	f002 fadb 	bl	8003d9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e6:	003b      	movs	r3, r7
 80017e8:	0018      	movs	r0, r3
 80017ea:	2308      	movs	r3, #8
 80017ec:	001a      	movs	r2, r3
 80017ee:	2100      	movs	r1, #0
 80017f0:	f002 fad4 	bl	8003d9c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017f4:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <MX_TIM3_Init+0xa0>)
 80017f6:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <MX_TIM3_Init+0xa4>)
 80017f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 799;
 80017fa:	4b1d      	ldr	r3, [pc, #116]	; (8001870 <MX_TIM3_Init+0xa0>)
 80017fc:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <MX_TIM3_Init+0xa8>)
 80017fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <MX_TIM3_Init+0xa0>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8001806:	4b1a      	ldr	r3, [pc, #104]	; (8001870 <MX_TIM3_Init+0xa0>)
 8001808:	2209      	movs	r2, #9
 800180a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <MX_TIM3_Init+0xa0>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001812:	4b17      	ldr	r3, [pc, #92]	; (8001870 <MX_TIM3_Init+0xa0>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <MX_TIM3_Init+0xa0>)
 800181a:	0018      	movs	r0, r3
 800181c:	f001 febe 	bl	800359c <HAL_TIM_Base_Init>
 8001820:	1e03      	subs	r3, r0, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001824:	f000 f914 	bl	8001a50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001828:	2108      	movs	r1, #8
 800182a:	187b      	adds	r3, r7, r1
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	0152      	lsls	r2, r2, #5
 8001830:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001832:	187a      	adds	r2, r7, r1
 8001834:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_TIM3_Init+0xa0>)
 8001836:	0011      	movs	r1, r2
 8001838:	0018      	movs	r0, r3
 800183a:	f002 f813 	bl	8003864 <HAL_TIM_ConfigClockSource>
 800183e:	1e03      	subs	r3, r0, #0
 8001840:	d001      	beq.n	8001846 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001842:	f000 f905 	bl	8001a50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001846:	003b      	movs	r3, r7
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184c:	003b      	movs	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001852:	003a      	movs	r2, r7
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_TIM3_Init+0xa0>)
 8001856:	0011      	movs	r1, r2
 8001858:	0018      	movs	r0, r3
 800185a:	f002 f9f9 	bl	8003c50 <HAL_TIMEx_MasterConfigSynchronization>
 800185e:	1e03      	subs	r3, r0, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001862:	f000 f8f5 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	46bd      	mov	sp, r7
 800186a:	b006      	add	sp, #24
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	200001b4 	.word	0x200001b4
 8001874:	40000400 	.word	0x40000400
 8001878:	0000031f 	.word	0x0000031f

0800187c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001880:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <MX_TIM6_Init+0x3c>)
 8001882:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <MX_TIM6_Init+0x40>)
 8001884:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000;
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_TIM6_Init+0x3c>)
 8001888:	22fa      	movs	r2, #250	; 0xfa
 800188a:	0152      	lsls	r2, r2, #5
 800188c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <MX_TIM6_Init+0x3c>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MX_TIM6_Init+0x3c>)
 8001896:	22fa      	movs	r2, #250	; 0xfa
 8001898:	0092      	lsls	r2, r2, #2
 800189a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_TIM6_Init+0x3c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018a2:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <MX_TIM6_Init+0x3c>)
 80018a4:	0018      	movs	r0, r3
 80018a6:	f001 fe79 	bl	800359c <HAL_TIM_Base_Init>
 80018aa:	1e03      	subs	r3, r0, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM6_Init+0x36>
  {
    Error_Handler();
 80018ae:	f000 f8cf 	bl	8001a50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200001fc 	.word	0x200001fc
 80018bc:	40001000 	.word	0x40001000

080018c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	240c      	movs	r4, #12
 80018c8:	193b      	adds	r3, r7, r4
 80018ca:	0018      	movs	r0, r3
 80018cc:	2314      	movs	r3, #20
 80018ce:	001a      	movs	r2, r3
 80018d0:	2100      	movs	r1, #0
 80018d2:	f002 fa63 	bl	8003d9c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018d6:	4b59      	ldr	r3, [pc, #356]	; (8001a3c <MX_GPIO_Init+0x17c>)
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	4b58      	ldr	r3, [pc, #352]	; (8001a3c <MX_GPIO_Init+0x17c>)
 80018dc:	2180      	movs	r1, #128	; 0x80
 80018de:	03c9      	lsls	r1, r1, #15
 80018e0:	430a      	orrs	r2, r1
 80018e2:	615a      	str	r2, [r3, #20]
 80018e4:	4b55      	ldr	r3, [pc, #340]	; (8001a3c <MX_GPIO_Init+0x17c>)
 80018e6:	695a      	ldr	r2, [r3, #20]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	03db      	lsls	r3, r3, #15
 80018ec:	4013      	ands	r3, r2
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	4b52      	ldr	r3, [pc, #328]	; (8001a3c <MX_GPIO_Init+0x17c>)
 80018f4:	695a      	ldr	r2, [r3, #20]
 80018f6:	4b51      	ldr	r3, [pc, #324]	; (8001a3c <MX_GPIO_Init+0x17c>)
 80018f8:	2180      	movs	r1, #128	; 0x80
 80018fa:	0289      	lsls	r1, r1, #10
 80018fc:	430a      	orrs	r2, r1
 80018fe:	615a      	str	r2, [r3, #20]
 8001900:	4b4e      	ldr	r3, [pc, #312]	; (8001a3c <MX_GPIO_Init+0x17c>)
 8001902:	695a      	ldr	r2, [r3, #20]
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	029b      	lsls	r3, r3, #10
 8001908:	4013      	ands	r3, r2
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	4b4b      	ldr	r3, [pc, #300]	; (8001a3c <MX_GPIO_Init+0x17c>)
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	4b4a      	ldr	r3, [pc, #296]	; (8001a3c <MX_GPIO_Init+0x17c>)
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	02c9      	lsls	r1, r1, #11
 8001918:	430a      	orrs	r2, r1
 800191a:	615a      	str	r2, [r3, #20]
 800191c:	4b47      	ldr	r3, [pc, #284]	; (8001a3c <MX_GPIO_Init+0x17c>)
 800191e:	695a      	ldr	r2, [r3, #20]
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	02db      	lsls	r3, r3, #11
 8001924:	4013      	ands	r3, r2
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_3 
 800192a:	4945      	ldr	r1, [pc, #276]	; (8001a40 <MX_GPIO_Init+0x180>)
 800192c:	4b45      	ldr	r3, [pc, #276]	; (8001a44 <MX_GPIO_Init+0x184>)
 800192e:	2201      	movs	r2, #1
 8001930:	0018      	movs	r0, r3
 8001932:	f001 f958 	bl	8002be6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7 
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8001936:	23f8      	movs	r3, #248	; 0xf8
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	4842      	ldr	r0, [pc, #264]	; (8001a44 <MX_GPIO_Init+0x184>)
 800193c:	2200      	movs	r2, #0
 800193e:	0019      	movs	r1, r3
 8001940:	f001 f951 	bl	8002be6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001944:	23f8      	movs	r3, #248	; 0xf8
 8001946:	0159      	lsls	r1, r3, #5
 8001948:	2390      	movs	r3, #144	; 0x90
 800194a:	05db      	lsls	r3, r3, #23
 800194c:	2200      	movs	r2, #0
 800194e:	0018      	movs	r0, r3
 8001950:	f001 f949 	bl	8002be6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001954:	193b      	adds	r3, r7, r4
 8001956:	2203      	movs	r2, #3
 8001958:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800195a:	193b      	adds	r3, r7, r4
 800195c:	2200      	movs	r2, #0
 800195e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001960:	193b      	adds	r3, r7, r4
 8001962:	2202      	movs	r2, #2
 8001964:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	193a      	adds	r2, r7, r4
 8001968:	2390      	movs	r3, #144	; 0x90
 800196a:	05db      	lsls	r3, r3, #23
 800196c:	0011      	movs	r1, r2
 800196e:	0018      	movs	r0, r3
 8001970:	f000 ffac 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA4 PA5 
                           PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8001974:	193b      	adds	r3, r7, r4
 8001976:	227c      	movs	r2, #124	; 0x7c
 8001978:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800197a:	193b      	adds	r3, r7, r4
 800197c:	4a32      	ldr	r2, [pc, #200]	; (8001a48 <MX_GPIO_Init+0x188>)
 800197e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	193b      	adds	r3, r7, r4
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	193a      	adds	r2, r7, r4
 8001988:	2390      	movs	r3, #144	; 0x90
 800198a:	05db      	lsls	r3, r3, #23
 800198c:	0011      	movs	r1, r2
 800198e:	0018      	movs	r0, r3
 8001990:	f000 ff9c 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11 
                           PB12 PB13 PB14 PB15 
                           PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11 
 8001994:	0021      	movs	r1, r4
 8001996:	187b      	adds	r3, r7, r1
 8001998:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <MX_GPIO_Init+0x18c>)
 800199a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	187b      	adds	r3, r7, r1
 800199e:	2201      	movs	r2, #1
 80019a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	187b      	adds	r3, r7, r1
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	000c      	movs	r4, r1
 80019b0:	187b      	adds	r3, r7, r1
 80019b2:	4a24      	ldr	r2, [pc, #144]	; (8001a44 <MX_GPIO_Init+0x184>)
 80019b4:	0019      	movs	r1, r3
 80019b6:	0010      	movs	r0, r2
 80019b8:	f000 ff88 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80019bc:	0021      	movs	r1, r4
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	22e0      	movs	r2, #224	; 0xe0
 80019c2:	00d2      	lsls	r2, r2, #3
 80019c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c6:	187b      	adds	r3, r7, r1
 80019c8:	2201      	movs	r2, #1
 80019ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80019d2:	187b      	adds	r3, r7, r1
 80019d4:	2201      	movs	r2, #1
 80019d6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d8:	000c      	movs	r4, r1
 80019da:	187a      	adds	r2, r7, r1
 80019dc:	2390      	movs	r3, #144	; 0x90
 80019de:	05db      	lsls	r3, r3, #23
 80019e0:	0011      	movs	r1, r2
 80019e2:	0018      	movs	r0, r3
 80019e4:	f000 ff72 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019e8:	0021      	movs	r1, r4
 80019ea:	187b      	adds	r3, r7, r1
 80019ec:	22c0      	movs	r2, #192	; 0xc0
 80019ee:	0152      	lsls	r2, r2, #5
 80019f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	2201      	movs	r2, #1
 80019f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	2202      	movs	r2, #2
 80019fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	2201      	movs	r2, #1
 8001a02:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a04:	187a      	adds	r2, r7, r1
 8001a06:	2390      	movs	r3, #144	; 0x90
 8001a08:	05db      	lsls	r3, r3, #23
 8001a0a:	0011      	movs	r1, r2
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f000 ff5d 	bl	80028cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2100      	movs	r1, #0
 8001a16:	2006      	movs	r0, #6
 8001a18:	f000 fd24 	bl	8002464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001a1c:	2006      	movs	r0, #6
 8001a1e:	f000 fd36 	bl	800248e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	2007      	movs	r0, #7
 8001a28:	f000 fd1c 	bl	8002464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001a2c:	2007      	movs	r0, #7
 8001a2e:	f000 fd2e 	bl	800248e <HAL_NVIC_EnableIRQ>

}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b009      	add	sp, #36	; 0x24
 8001a38:	bd90      	pop	{r4, r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	000007fb 	.word	0x000007fb
 8001a44:	48000400 	.word	0x48000400
 8001a48:	10310000 	.word	0x10310000
 8001a4c:	0000fffb 	.word	0x0000fffb

08001a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_MspInit+0x44>)
 8001a64:	699a      	ldr	r2, [r3, #24]
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_MspInit+0x44>)
 8001a68:	2101      	movs	r1, #1
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	619a      	str	r2, [r3, #24]
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_MspInit+0x44>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2201      	movs	r2, #1
 8001a74:	4013      	ands	r3, r2
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_MspInit+0x44>)
 8001a7c:	69da      	ldr	r2, [r3, #28]
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_MspInit+0x44>)
 8001a80:	2180      	movs	r1, #128	; 0x80
 8001a82:	0549      	lsls	r1, r1, #21
 8001a84:	430a      	orrs	r2, r1
 8001a86:	61da      	str	r2, [r3, #28]
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_MspInit+0x44>)
 8001a8a:	69da      	ldr	r2, [r3, #28]
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	055b      	lsls	r3, r3, #21
 8001a90:	4013      	ands	r3, r2
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b002      	add	sp, #8
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	40021000 	.word	0x40021000

08001aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1a      	ldr	r2, [pc, #104]	; (8001b1c <HAL_TIM_Base_MspInit+0x78>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d114      	bne.n	8001ae0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <HAL_TIM_Base_MspInit+0x7c>)
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <HAL_TIM_Base_MspInit+0x7c>)
 8001abc:	2102      	movs	r1, #2
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	61da      	str	r2, [r3, #28]
 8001ac2:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <HAL_TIM_Base_MspInit+0x7c>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2010      	movs	r0, #16
 8001ad4:	f000 fcc6 	bl	8002464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ad8:	2010      	movs	r0, #16
 8001ada:	f000 fcd8 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8001ade:	e018      	b.n	8001b12 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM6)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0f      	ldr	r2, [pc, #60]	; (8001b24 <HAL_TIM_Base_MspInit+0x80>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d113      	bne.n	8001b12 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001aea:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <HAL_TIM_Base_MspInit+0x7c>)
 8001aec:	69da      	ldr	r2, [r3, #28]
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <HAL_TIM_Base_MspInit+0x7c>)
 8001af0:	2110      	movs	r1, #16
 8001af2:	430a      	orrs	r2, r1
 8001af4:	61da      	str	r2, [r3, #28]
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <HAL_TIM_Base_MspInit+0x7c>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	2210      	movs	r2, #16
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	2011      	movs	r0, #17
 8001b08:	f000 fcac 	bl	8002464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8001b0c:	2011      	movs	r0, #17
 8001b0e:	f000 fcbe 	bl	800248e <HAL_NVIC_EnableIRQ>
}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b004      	add	sp, #16
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	46c0      	nop			; (mov r8, r8)
 8001b1c:	40000400 	.word	0x40000400
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40001000 	.word	0x40001000

08001b28 <timer>:

/* External variables --------------------------------------------------------*/
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim6;
/* USER CODE BEGIN EV */
void timer(uint8_t trigger,uint8_t* flag,int* cnt,int interval){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	210f      	movs	r1, #15
 8001b36:	187b      	adds	r3, r7, r1
 8001b38:	1c02      	adds	r2, r0, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
	  if (trigger) {
 8001b3c:	187b      	adds	r3, r7, r1
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <timer+0x28>
		  (*cnt)++;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	1c5a      	adds	r2, r3, #1
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e002      	b.n	8001b56 <timer+0x2e>
	  } else {
		  *cnt=0;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
	  }
	  if (*cnt==interval){
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d105      	bne.n	8001b6c <timer+0x44>
		  *flag=1;
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	2201      	movs	r2, #1
 8001b64:	701a      	strb	r2, [r3, #0]
		  *cnt=0;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
	  }
}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b004      	add	sp, #16
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <timer2>:
void timer2(uint8_t trigger,uint8_t* flag1,uint8_t* flag2, int* cnt,int interval){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60b9      	str	r1, [r7, #8]
 8001b7c:	607a      	str	r2, [r7, #4]
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	210f      	movs	r1, #15
 8001b82:	187b      	adds	r3, r7, r1
 8001b84:	1c02      	adds	r2, r0, #0
 8001b86:	701a      	strb	r2, [r3, #0]
	  if (trigger) {
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d005      	beq.n	8001b9c <timer2+0x28>
		  (*cnt)++;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	1c5a      	adds	r2, r3, #1
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	e002      	b.n	8001ba2 <timer2+0x2e>
	  } else {
		  *cnt=0;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
	  }
	  if (*cnt==interval){
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d109      	bne.n	8001bc0 <timer2+0x4c>
		  *flag1=0;
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
		  *flag2=1;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
		  *cnt=0;
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
	  }	else if (*cnt==interval-2) {
		  *flag1=1;
		 *flag2=0;

	}
}
 8001bbe:	e00b      	b.n	8001bd8 <timer2+0x64>
	  }	else if (*cnt==interval-2) {
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	3b02      	subs	r3, #2
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d105      	bne.n	8001bd8 <timer2+0x64>
		  *flag1=1;
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
		 *flag2=0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
}
 8001bd8:	46c0      	nop			; (mov r8, r8)
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b004      	add	sp, #16
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//	Ghi_data(0x08007000, 0x08007FFF);
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler+0x4>

08001bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001bf4:	46c0      	nop			; (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c08:	f000 fb42 	bl	8002290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0c:	46c0      	nop			; (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  if((clr_button_trigger= HAL_GPIO_ReadPin(CLR_BUTTON_PORT, CLR_BUTTON_PIN))){
 8001c18:	2390      	movs	r3, #144	; 0x90
 8001c1a:	05db      	lsls	r3, r3, #23
 8001c1c:	2104      	movs	r1, #4
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f000 ffc4 	bl	8002bac <HAL_GPIO_ReadPin>
 8001c24:	0003      	movs	r3, r0
 8001c26:	001a      	movs	r2, r3
 8001c28:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <EXTI2_3_IRQHandler+0xa0>)
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <EXTI2_3_IRQHandler+0xa0>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <EXTI2_3_IRQHandler+0x32>
	  out_time_machine_trigger = 0;
 8001c34:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <EXTI2_3_IRQHandler+0xa4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
	  out_time_machine_cnt = 0;
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <EXTI2_3_IRQHandler+0xa8>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
	  out_time_machine_flag = 0;
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <EXTI2_3_IRQHandler+0xac>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]

  }

  if ((ro_button_trigger=HAL_GPIO_ReadPin(RO_BUTTON_PORT, RO_BUTTON_PIN))) {
 8001c46:	2390      	movs	r3, #144	; 0x90
 8001c48:	05db      	lsls	r3, r3, #23
 8001c4a:	2108      	movs	r1, #8
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f000 ffad 	bl	8002bac <HAL_GPIO_ReadPin>
 8001c52:	0003      	movs	r3, r0
 8001c54:	001a      	movs	r2, r3
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <EXTI2_3_IRQHandler+0xb0>)
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <EXTI2_3_IRQHandler+0xb0>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d01f      	beq.n	8001ca2 <EXTI2_3_IRQHandler+0x8e>
	  cto_button_flag = pp1_button_flag = ocb_button_flag =  water_input_flag = 0;
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <EXTI2_3_IRQHandler+0xb4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
 8001c68:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <EXTI2_3_IRQHandler+0xb4>)
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <EXTI2_3_IRQHandler+0xb8>)
 8001c6e:	701a      	strb	r2, [r3, #0]
 8001c70:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <EXTI2_3_IRQHandler+0xb8>)
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	4b16      	ldr	r3, [pc, #88]	; (8001cd0 <EXTI2_3_IRQHandler+0xbc>)
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <EXTI2_3_IRQHandler+0xbc>)
 8001c7a:	781a      	ldrb	r2, [r3, #0]
 8001c7c:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <EXTI2_3_IRQHandler+0xc0>)
 8001c7e:	701a      	strb	r2, [r3, #0]
	  end_display_flag=0;
 8001c80:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <EXTI2_3_IRQHandler+0xc4>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
	  erro_dislay_trigger =0;
 8001c86:	4b15      	ldr	r3, [pc, #84]	; (8001cdc <EXTI2_3_IRQHandler+0xc8>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
	  RO_time_p = time_to_array(RO_time);
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <EXTI2_3_IRQHandler+0xcc>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7fe fbaf 	bl	80003f4 <time_to_array>
 8001c96:	0002      	movs	r2, r0
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <EXTI2_3_IRQHandler+0xd0>)
 8001c9a:	601a      	str	r2, [r3, #0]
	  lock_end_dislay_flag =1;
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <EXTI2_3_IRQHandler+0xd4>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001ca2:	2004      	movs	r0, #4
 8001ca4:	f000 ffbc 	bl	8002c20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001ca8:	2008      	movs	r0, #8
 8001caa:	f000 ffb9 	bl	8002c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000174 	.word	0x20000174
 8001cb8:	2000025a 	.word	0x2000025a
 8001cbc:	20000148 	.word	0x20000148
 8001cc0:	20000254 	.word	0x20000254
 8001cc4:	20000175 	.word	0x20000175
 8001cc8:	20000264 	.word	0x20000264
 8001ccc:	2000024d 	.word	0x2000024d
 8001cd0:	2000026b 	.word	0x2000026b
 8001cd4:	2000026a 	.word	0x2000026a
 8001cd8:	2000018b 	.word	0x2000018b
 8001cdc:	20000257 	.word	0x20000257
 8001ce0:	200001ac 	.word	0x200001ac
 8001ce4:	2000023c 	.word	0x2000023c
 8001ce8:	2000024e 	.word	0x2000024e

08001cec <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  if ((cto_button_trigger=HAL_GPIO_ReadPin(CTO_BUTTON_PORT, CTO_BUTTON_PIN))){
 8001cf0:	2390      	movs	r3, #144	; 0x90
 8001cf2:	05db      	lsls	r3, r3, #23
 8001cf4:	2110      	movs	r1, #16
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f000 ff58 	bl	8002bac <HAL_GPIO_ReadPin>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	001a      	movs	r2, r3
 8001d00:	4b46      	ldr	r3, [pc, #280]	; (8001e1c <EXTI4_15_IRQHandler+0x130>)
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	4b45      	ldr	r3, [pc, #276]	; (8001e1c <EXTI4_15_IRQHandler+0x130>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d01f      	beq.n	8001d4c <EXTI4_15_IRQHandler+0x60>
	  ro_button_flag = ocb_button_flag = pp1_button_flag = water_input_flag=0;
 8001d0c:	4b44      	ldr	r3, [pc, #272]	; (8001e20 <EXTI4_15_IRQHandler+0x134>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <EXTI4_15_IRQHandler+0x134>)
 8001d14:	781a      	ldrb	r2, [r3, #0]
 8001d16:	4b43      	ldr	r3, [pc, #268]	; (8001e24 <EXTI4_15_IRQHandler+0x138>)
 8001d18:	701a      	strb	r2, [r3, #0]
 8001d1a:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <EXTI4_15_IRQHandler+0x138>)
 8001d1c:	781a      	ldrb	r2, [r3, #0]
 8001d1e:	4b42      	ldr	r3, [pc, #264]	; (8001e28 <EXTI4_15_IRQHandler+0x13c>)
 8001d20:	701a      	strb	r2, [r3, #0]
 8001d22:	4b41      	ldr	r3, [pc, #260]	; (8001e28 <EXTI4_15_IRQHandler+0x13c>)
 8001d24:	781a      	ldrb	r2, [r3, #0]
 8001d26:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <EXTI4_15_IRQHandler+0x140>)
 8001d28:	701a      	strb	r2, [r3, #0]
	  lock_end_dislay_flag =1;
 8001d2a:	4b41      	ldr	r3, [pc, #260]	; (8001e30 <EXTI4_15_IRQHandler+0x144>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	701a      	strb	r2, [r3, #0]
	  end_display_flag =0;
 8001d30:	4b40      	ldr	r3, [pc, #256]	; (8001e34 <EXTI4_15_IRQHandler+0x148>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
	  erro_dislay_trigger =0;
 8001d36:	4b40      	ldr	r3, [pc, #256]	; (8001e38 <EXTI4_15_IRQHandler+0x14c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
	  CTO_time_p = time_to_array(CTO_time);
 8001d3c:	4b3f      	ldr	r3, [pc, #252]	; (8001e3c <EXTI4_15_IRQHandler+0x150>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7fe fb57 	bl	80003f4 <time_to_array>
 8001d46:	0002      	movs	r2, r0
 8001d48:	4b3d      	ldr	r3, [pc, #244]	; (8001e40 <EXTI4_15_IRQHandler+0x154>)
 8001d4a:	601a      	str	r2, [r3, #0]


  }

  if ((ocb_button_trigger=HAL_GPIO_ReadPin(OCB_BUTTON_PORT, OCB_BUTTON_PIN))){
 8001d4c:	2390      	movs	r3, #144	; 0x90
 8001d4e:	05db      	lsls	r3, r3, #23
 8001d50:	2120      	movs	r1, #32
 8001d52:	0018      	movs	r0, r3
 8001d54:	f000 ff2a 	bl	8002bac <HAL_GPIO_ReadPin>
 8001d58:	0003      	movs	r3, r0
 8001d5a:	001a      	movs	r2, r3
 8001d5c:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <EXTI4_15_IRQHandler+0x158>)
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	4b38      	ldr	r3, [pc, #224]	; (8001e44 <EXTI4_15_IRQHandler+0x158>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d01f      	beq.n	8001da8 <EXTI4_15_IRQHandler+0xbc>
	  ro_button_flag = cto_button_flag = pp1_button_flag =water_input_flag=0;
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <EXTI4_15_IRQHandler+0x134>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	4b2c      	ldr	r3, [pc, #176]	; (8001e20 <EXTI4_15_IRQHandler+0x134>)
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	4b2c      	ldr	r3, [pc, #176]	; (8001e24 <EXTI4_15_IRQHandler+0x138>)
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	4b2b      	ldr	r3, [pc, #172]	; (8001e24 <EXTI4_15_IRQHandler+0x138>)
 8001d78:	781a      	ldrb	r2, [r3, #0]
 8001d7a:	4b33      	ldr	r3, [pc, #204]	; (8001e48 <EXTI4_15_IRQHandler+0x15c>)
 8001d7c:	701a      	strb	r2, [r3, #0]
 8001d7e:	4b32      	ldr	r3, [pc, #200]	; (8001e48 <EXTI4_15_IRQHandler+0x15c>)
 8001d80:	781a      	ldrb	r2, [r3, #0]
 8001d82:	4b2a      	ldr	r3, [pc, #168]	; (8001e2c <EXTI4_15_IRQHandler+0x140>)
 8001d84:	701a      	strb	r2, [r3, #0]
	  lock_end_dislay_flag =1;
 8001d86:	4b2a      	ldr	r3, [pc, #168]	; (8001e30 <EXTI4_15_IRQHandler+0x144>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	701a      	strb	r2, [r3, #0]
	  end_display_flag=0;
 8001d8c:	4b29      	ldr	r3, [pc, #164]	; (8001e34 <EXTI4_15_IRQHandler+0x148>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	701a      	strb	r2, [r3, #0]
	  erro_dislay_trigger =0;
 8001d92:	4b29      	ldr	r3, [pc, #164]	; (8001e38 <EXTI4_15_IRQHandler+0x14c>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	701a      	strb	r2, [r3, #0]
	  OCB_time_p = time_to_array(OCB_time);
 8001d98:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <EXTI4_15_IRQHandler+0x160>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f7fe fb29 	bl	80003f4 <time_to_array>
 8001da2:	0002      	movs	r2, r0
 8001da4:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <EXTI4_15_IRQHandler+0x164>)
 8001da6:	601a      	str	r2, [r3, #0]



  }
  if((pp1_button_trigger=HAL_GPIO_ReadPin(PP1_BUTTON_PORT, PP1_BUTTON_PIN))){
 8001da8:	2390      	movs	r3, #144	; 0x90
 8001daa:	05db      	lsls	r3, r3, #23
 8001dac:	2140      	movs	r1, #64	; 0x40
 8001dae:	0018      	movs	r0, r3
 8001db0:	f000 fefc 	bl	8002bac <HAL_GPIO_ReadPin>
 8001db4:	0003      	movs	r3, r0
 8001db6:	001a      	movs	r2, r3
 8001db8:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <EXTI4_15_IRQHandler+0x168>)
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <EXTI4_15_IRQHandler+0x168>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d01f      	beq.n	8001e04 <EXTI4_15_IRQHandler+0x118>
	  ro_button_flag = cto_button_flag = ocb_button_flag =water_input_flag =0;
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <EXTI4_15_IRQHandler+0x134>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <EXTI4_15_IRQHandler+0x134>)
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <EXTI4_15_IRQHandler+0x13c>)
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <EXTI4_15_IRQHandler+0x13c>)
 8001dd4:	781a      	ldrb	r2, [r3, #0]
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <EXTI4_15_IRQHandler+0x15c>)
 8001dd8:	701a      	strb	r2, [r3, #0]
 8001dda:	4b1b      	ldr	r3, [pc, #108]	; (8001e48 <EXTI4_15_IRQHandler+0x15c>)
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <EXTI4_15_IRQHandler+0x140>)
 8001de0:	701a      	strb	r2, [r3, #0]
	  lock_end_dislay_flag =1;
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <EXTI4_15_IRQHandler+0x144>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
	  end_display_flag=0;
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <EXTI4_15_IRQHandler+0x148>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
	  erro_dislay_trigger =0;
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <EXTI4_15_IRQHandler+0x14c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
	  PP1_time_p = time_to_array(PP1_time);
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <EXTI4_15_IRQHandler+0x16c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f7fe fafb 	bl	80003f4 <time_to_array>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <EXTI4_15_IRQHandler+0x170>)
 8001e02:	601a      	str	r2, [r3, #0]

  }
  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001e04:	2010      	movs	r0, #16
 8001e06:	f000 ff0b 	bl	8002c20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001e0a:	2020      	movs	r0, #32
 8001e0c:	f000 ff08 	bl	8002c20 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001e10:	2040      	movs	r0, #64	; 0x40
 8001e12:	f000 ff05 	bl	8002c20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20000176 	.word	0x20000176
 8001e20:	20000264 	.word	0x20000264
 8001e24:	2000026b 	.word	0x2000026b
 8001e28:	2000024d 	.word	0x2000024d
 8001e2c:	20000255 	.word	0x20000255
 8001e30:	2000024e 	.word	0x2000024e
 8001e34:	2000018b 	.word	0x2000018b
 8001e38:	20000257 	.word	0x20000257
 8001e3c:	20000240 	.word	0x20000240
 8001e40:	200001b0 	.word	0x200001b0
 8001e44:	20000178 	.word	0x20000178
 8001e48:	2000026a 	.word	0x2000026a
 8001e4c:	20000190 	.word	0x20000190
 8001e50:	20000248 	.word	0x20000248
 8001e54:	20000177 	.word	0x20000177
 8001e58:	200001f8 	.word	0x200001f8
 8001e5c:	20000198 	.word	0x20000198

08001e60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	timer(clr_button_trigger, &clr_button_flag,&clr_button_cnt,CLR_BUTTON_INTERVAL);
 8001e64:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <TIM3_IRQHandler+0xcc>)
 8001e66:	7818      	ldrb	r0, [r3, #0]
 8001e68:	23fa      	movs	r3, #250	; 0xfa
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4a30      	ldr	r2, [pc, #192]	; (8001f30 <TIM3_IRQHandler+0xd0>)
 8001e6e:	4931      	ldr	r1, [pc, #196]	; (8001f34 <TIM3_IRQHandler+0xd4>)
 8001e70:	f7ff fe5a 	bl	8001b28 <timer>
	timer(cto_button_trigger, &cto_button_flag,&cto_button_cnt,BUTTON_INTERVAL);
 8001e74:	4b30      	ldr	r3, [pc, #192]	; (8001f38 <TIM3_IRQHandler+0xd8>)
 8001e76:	7818      	ldrb	r0, [r3, #0]
 8001e78:	23fa      	movs	r3, #250	; 0xfa
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4a2f      	ldr	r2, [pc, #188]	; (8001f3c <TIM3_IRQHandler+0xdc>)
 8001e7e:	4930      	ldr	r1, [pc, #192]	; (8001f40 <TIM3_IRQHandler+0xe0>)
 8001e80:	f7ff fe52 	bl	8001b28 <timer>
	timer(pp1_button_trigger, &pp1_button_flag,&pp1_button_cnt,BUTTON_INTERVAL);
 8001e84:	4b2f      	ldr	r3, [pc, #188]	; (8001f44 <TIM3_IRQHandler+0xe4>)
 8001e86:	7818      	ldrb	r0, [r3, #0]
 8001e88:	23fa      	movs	r3, #250	; 0xfa
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4a2e      	ldr	r2, [pc, #184]	; (8001f48 <TIM3_IRQHandler+0xe8>)
 8001e8e:	492f      	ldr	r1, [pc, #188]	; (8001f4c <TIM3_IRQHandler+0xec>)
 8001e90:	f7ff fe4a 	bl	8001b28 <timer>
	timer(ocb_button_trigger, &ocb_button_flag,&ocb_button_cnt,BUTTON_INTERVAL);
 8001e94:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <TIM3_IRQHandler+0xf0>)
 8001e96:	7818      	ldrb	r0, [r3, #0]
 8001e98:	23fa      	movs	r3, #250	; 0xfa
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4a2d      	ldr	r2, [pc, #180]	; (8001f54 <TIM3_IRQHandler+0xf4>)
 8001e9e:	492e      	ldr	r1, [pc, #184]	; (8001f58 <TIM3_IRQHandler+0xf8>)
 8001ea0:	f7ff fe42 	bl	8001b28 <timer>
	timer(ro_button_trigger, &ro_button_flag,&ro_button_cnt,BUTTON_INTERVAL);
 8001ea4:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <TIM3_IRQHandler+0xfc>)
 8001ea6:	7818      	ldrb	r0, [r3, #0]
 8001ea8:	23fa      	movs	r3, #250	; 0xfa
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4a2c      	ldr	r2, [pc, #176]	; (8001f60 <TIM3_IRQHandler+0x100>)
 8001eae:	492d      	ldr	r1, [pc, #180]	; (8001f64 <TIM3_IRQHandler+0x104>)
 8001eb0:	f7ff fe3a 	bl	8001b28 <timer>
	timer(lock_end_dislay_flag||PP_Out_Time_Trigger_off||OCB_Out_Time_Trigger_off||CTO_Out_Time_Trigger_off||RO_Out_Time_Trigger_off||
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	; (8001f68 <TIM3_IRQHandler+0x108>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
			Water_low_trigger_off||Machine_Time_Trigger_off, &seven_segment_switch_flag,&seven_segment_switch_cnt,SEVEN_SEG_REFRESH_RATE);
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d117      	bne.n	8001eec <TIM3_IRQHandler+0x8c>
	timer(lock_end_dislay_flag||PP_Out_Time_Trigger_off||OCB_Out_Time_Trigger_off||CTO_Out_Time_Trigger_off||RO_Out_Time_Trigger_off||
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <TIM3_IRQHandler+0x10c>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d113      	bne.n	8001eec <TIM3_IRQHandler+0x8c>
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <TIM3_IRQHandler+0x110>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10f      	bne.n	8001eec <TIM3_IRQHandler+0x8c>
 8001ecc:	4b29      	ldr	r3, [pc, #164]	; (8001f74 <TIM3_IRQHandler+0x114>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10b      	bne.n	8001eec <TIM3_IRQHandler+0x8c>
 8001ed4:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <TIM3_IRQHandler+0x118>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d107      	bne.n	8001eec <TIM3_IRQHandler+0x8c>
 8001edc:	4b27      	ldr	r3, [pc, #156]	; (8001f7c <TIM3_IRQHandler+0x11c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d103      	bne.n	8001eec <TIM3_IRQHandler+0x8c>
			Water_low_trigger_off||Machine_Time_Trigger_off, &seven_segment_switch_flag,&seven_segment_switch_cnt,SEVEN_SEG_REFRESH_RATE);
 8001ee4:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <TIM3_IRQHandler+0x120>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <TIM3_IRQHandler+0x90>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <TIM3_IRQHandler+0x92>
 8001ef0:	2300      	movs	r3, #0
	timer(lock_end_dislay_flag||PP_Out_Time_Trigger_off||OCB_Out_Time_Trigger_off||CTO_Out_Time_Trigger_off||RO_Out_Time_Trigger_off||
 8001ef2:	b2d8      	uxtb	r0, r3
 8001ef4:	4a23      	ldr	r2, [pc, #140]	; (8001f84 <TIM3_IRQHandler+0x124>)
 8001ef6:	4924      	ldr	r1, [pc, #144]	; (8001f88 <TIM3_IRQHandler+0x128>)
 8001ef8:	2305      	movs	r3, #5
 8001efa:	f7ff fe15 	bl	8001b28 <timer>
	timer(Write_Flash_flag, &led_fan_flag,&led_fan_cnt,350);
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <TIM3_IRQHandler+0x12c>)
 8001f00:	7818      	ldrb	r0, [r3, #0]
 8001f02:	23af      	movs	r3, #175	; 0xaf
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4a22      	ldr	r2, [pc, #136]	; (8001f90 <TIM3_IRQHandler+0x130>)
 8001f08:	4922      	ldr	r1, [pc, #136]	; (8001f94 <TIM3_IRQHandler+0x134>)
 8001f0a:	f7ff fe0d 	bl	8001b28 <timer>
	timer(watch_Dog_Trigger, &watch_Dog_Flag, &watch_Dog_cnt, 150);
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <TIM3_IRQHandler+0x138>)
 8001f10:	7818      	ldrb	r0, [r3, #0]
 8001f12:	4a22      	ldr	r2, [pc, #136]	; (8001f9c <TIM3_IRQHandler+0x13c>)
 8001f14:	4922      	ldr	r1, [pc, #136]	; (8001fa0 <TIM3_IRQHandler+0x140>)
 8001f16:	2396      	movs	r3, #150	; 0x96
 8001f18:	f7ff fe06 	bl	8001b28 <timer>
//
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f1c:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <TIM3_IRQHandler+0x144>)
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f001 fb8a 	bl	8003638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f24:	46c0      	nop			; (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	20000174 	.word	0x20000174
 8001f30:	20000128 	.word	0x20000128
 8001f34:	2000025b 	.word	0x2000025b
 8001f38:	20000176 	.word	0x20000176
 8001f3c:	20000130 	.word	0x20000130
 8001f40:	2000026a 	.word	0x2000026a
 8001f44:	20000177 	.word	0x20000177
 8001f48:	20000134 	.word	0x20000134
 8001f4c:	2000026b 	.word	0x2000026b
 8001f50:	20000178 	.word	0x20000178
 8001f54:	20000138 	.word	0x20000138
 8001f58:	2000024d 	.word	0x2000024d
 8001f5c:	20000175 	.word	0x20000175
 8001f60:	2000012c 	.word	0x2000012c
 8001f64:	20000255 	.word	0x20000255
 8001f68:	2000024e 	.word	0x2000024e
 8001f6c:	20000258 	.word	0x20000258
 8001f70:	20000265 	.word	0x20000265
 8001f74:	2000025e 	.word	0x2000025e
 8001f78:	20000250 	.word	0x20000250
 8001f7c:	20000260 	.word	0x20000260
 8001f80:	2000025c 	.word	0x2000025c
 8001f84:	20000140 	.word	0x20000140
 8001f88:	2000025d 	.word	0x2000025d
 8001f8c:	20000251 	.word	0x20000251
 8001f90:	20000124 	.word	0x20000124
 8001f94:	20000252 	.word	0x20000252
 8001f98:	20000266 	.word	0x20000266
 8001f9c:	2000016c 	.word	0x2000016c
 8001fa0:	20000263 	.word	0x20000263
 8001fa4:	200001b4 	.word	0x200001b4

08001fa8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001fa8:	b590      	push	{r4, r7, lr}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM6_IRQn 0 */
	timer(HAL_GPIO_ReadPin(PUMP_STATUS_PORT, PUMP_STATUS_PIN), &Write_Flash_flag,&write_Flash_cnt, 5);
 8001fae:	2390      	movs	r3, #144	; 0x90
 8001fb0:	05db      	lsls	r3, r3, #23
 8001fb2:	2102      	movs	r1, #2
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	f000 fdf9 	bl	8002bac <HAL_GPIO_ReadPin>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	4a3c      	ldr	r2, [pc, #240]	; (80020b0 <TIM6_IRQHandler+0x108>)
 8001fc0:	493c      	ldr	r1, [pc, #240]	; (80020b4 <TIM6_IRQHandler+0x10c>)
 8001fc2:	2305      	movs	r3, #5
 8001fc4:	f7ff fdb0 	bl	8001b28 <timer>
	timer(Write_Flash_flag, &pump_status_flag, &pump_status_cnt, 60);
 8001fc8:	4b3a      	ldr	r3, [pc, #232]	; (80020b4 <TIM6_IRQHandler+0x10c>)
 8001fca:	7818      	ldrb	r0, [r3, #0]
 8001fcc:	4a3a      	ldr	r2, [pc, #232]	; (80020b8 <TIM6_IRQHandler+0x110>)
 8001fce:	493b      	ldr	r1, [pc, #236]	; (80020bc <TIM6_IRQHandler+0x114>)
 8001fd0:	233c      	movs	r3, #60	; 0x3c
 8001fd2:	f7ff fda9 	bl	8001b28 <timer>
	timer(Write_Flash_flag, &out_time_machine_trigger, &out_time_machine_cnt, 60); // timer machine out time
 8001fd6:	4b37      	ldr	r3, [pc, #220]	; (80020b4 <TIM6_IRQHandler+0x10c>)
 8001fd8:	7818      	ldrb	r0, [r3, #0]
 8001fda:	4a39      	ldr	r2, [pc, #228]	; (80020c0 <TIM6_IRQHandler+0x118>)
 8001fdc:	4939      	ldr	r1, [pc, #228]	; (80020c4 <TIM6_IRQHandler+0x11c>)
 8001fde:	233c      	movs	r3, #60	; 0x3c
 8001fe0:	f7ff fda2 	bl	8001b28 <timer>
	timer2(!Write_Flash_flag,&led_tank_full_flag,&led_tank_full_flag_off,&led_tank_full_cnt,10);
 8001fe4:	4b33      	ldr	r3, [pc, #204]	; (80020b4 <TIM6_IRQHandler+0x10c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	425a      	negs	r2, r3
 8001fea:	4153      	adcs	r3, r2
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	001c      	movs	r4, r3
 8001ff0:	4835      	ldr	r0, [pc, #212]	; (80020c8 <TIM6_IRQHandler+0x120>)
 8001ff2:	4a36      	ldr	r2, [pc, #216]	; (80020cc <TIM6_IRQHandler+0x124>)
 8001ff4:	4936      	ldr	r1, [pc, #216]	; (80020d0 <TIM6_IRQHandler+0x128>)
 8001ff6:	230a      	movs	r3, #10
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	0003      	movs	r3, r0
 8001ffc:	0020      	movs	r0, r4
 8001ffe:	f7ff fdb9 	bl	8001b74 <timer2>
	timer(lock_end_dislay_flag&&(!(ro_button_trigger||cto_button_trigger||ocb_button_trigger||pp1_button_trigger))
 8002002:	4b34      	ldr	r3, [pc, #208]	; (80020d4 <TIM6_IRQHandler+0x12c>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d011      	beq.n	800202e <TIM6_IRQHandler+0x86>
 800200a:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <TIM6_IRQHandler+0x130>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10d      	bne.n	800202e <TIM6_IRQHandler+0x86>
 8002012:	4b32      	ldr	r3, [pc, #200]	; (80020dc <TIM6_IRQHandler+0x134>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d109      	bne.n	800202e <TIM6_IRQHandler+0x86>
 800201a:	4b31      	ldr	r3, [pc, #196]	; (80020e0 <TIM6_IRQHandler+0x138>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <TIM6_IRQHandler+0x86>
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <TIM6_IRQHandler+0x13c>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <TIM6_IRQHandler+0x86>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <TIM6_IRQHandler+0x88>
 800202e:	2300      	movs	r3, #0
 8002030:	b2d8      	uxtb	r0, r3
 8002032:	4a2d      	ldr	r2, [pc, #180]	; (80020e8 <TIM6_IRQHandler+0x140>)
 8002034:	492d      	ldr	r1, [pc, #180]	; (80020ec <TIM6_IRQHandler+0x144>)
 8002036:	2305      	movs	r3, #5
 8002038:	f7ff fd76 	bl	8001b28 <timer>
			,&end_display_flag,&display_cnt,DISPLAY_INTERVAL);

//	timer2(out_time_machine_trigger,&out_time_machine_flag,&end_display_flag,&LED_out_time_machine_cnt,10);

	timer(PP_Out_Time_Trigger_off,&PP_Out_Time_Flag_off,&PP_Out_Time_Flag_off_cnt,2);
 800203c:	4b2c      	ldr	r3, [pc, #176]	; (80020f0 <TIM6_IRQHandler+0x148>)
 800203e:	7818      	ldrb	r0, [r3, #0]
 8002040:	4a2c      	ldr	r2, [pc, #176]	; (80020f4 <TIM6_IRQHandler+0x14c>)
 8002042:	492d      	ldr	r1, [pc, #180]	; (80020f8 <TIM6_IRQHandler+0x150>)
 8002044:	2302      	movs	r3, #2
 8002046:	f7ff fd6f 	bl	8001b28 <timer>
	timer(OCB_Out_Time_Trigger_off,&OCB_Out_Time_Flag_off,&OCB_Out_Time_Flag_off_cnt,2);
 800204a:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <TIM6_IRQHandler+0x154>)
 800204c:	7818      	ldrb	r0, [r3, #0]
 800204e:	4a2c      	ldr	r2, [pc, #176]	; (8002100 <TIM6_IRQHandler+0x158>)
 8002050:	492c      	ldr	r1, [pc, #176]	; (8002104 <TIM6_IRQHandler+0x15c>)
 8002052:	2302      	movs	r3, #2
 8002054:	f7ff fd68 	bl	8001b28 <timer>
	timer(CTO_Out_Time_Trigger_off,&CTO_Out_Time_Flag_off,&CTO_Out_Time_Flag_off_cnt,2);
 8002058:	4b2b      	ldr	r3, [pc, #172]	; (8002108 <TIM6_IRQHandler+0x160>)
 800205a:	7818      	ldrb	r0, [r3, #0]
 800205c:	4a2b      	ldr	r2, [pc, #172]	; (800210c <TIM6_IRQHandler+0x164>)
 800205e:	492c      	ldr	r1, [pc, #176]	; (8002110 <TIM6_IRQHandler+0x168>)
 8002060:	2302      	movs	r3, #2
 8002062:	f7ff fd61 	bl	8001b28 <timer>
	timer(RO_Out_Time_Trigger_off,&RO_Out_Time_Flag_off,&RO_Out_Time_Flag_off_cnt,2);
 8002066:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <TIM6_IRQHandler+0x16c>)
 8002068:	7818      	ldrb	r0, [r3, #0]
 800206a:	4a2b      	ldr	r2, [pc, #172]	; (8002118 <TIM6_IRQHandler+0x170>)
 800206c:	492b      	ldr	r1, [pc, #172]	; (800211c <TIM6_IRQHandler+0x174>)
 800206e:	2302      	movs	r3, #2
 8002070:	f7ff fd5a 	bl	8001b28 <timer>
	timer(Water_low_trigger_off,&Water_low_Flag_off,&water_low_Flag_off_cnt,2);
 8002074:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <TIM6_IRQHandler+0x178>)
 8002076:	7818      	ldrb	r0, [r3, #0]
 8002078:	4a2a      	ldr	r2, [pc, #168]	; (8002124 <TIM6_IRQHandler+0x17c>)
 800207a:	492b      	ldr	r1, [pc, #172]	; (8002128 <TIM6_IRQHandler+0x180>)
 800207c:	2302      	movs	r3, #2
 800207e:	f7ff fd53 	bl	8001b28 <timer>
	timer(Machine_Time_Trigger_off,&Machine_Time_Flag_off,&Machine_Out_Time_Flag_off_cnt,2);
 8002082:	4b2a      	ldr	r3, [pc, #168]	; (800212c <TIM6_IRQHandler+0x184>)
 8002084:	7818      	ldrb	r0, [r3, #0]
 8002086:	4a2a      	ldr	r2, [pc, #168]	; (8002130 <TIM6_IRQHandler+0x188>)
 8002088:	492a      	ldr	r1, [pc, #168]	; (8002134 <TIM6_IRQHandler+0x18c>)
 800208a:	2302      	movs	r3, #2
 800208c:	f7ff fd4c 	bl	8001b28 <timer>
	timer(erro_dislay_trigger, &erro_dislay_flag_off , &erro_dislay_cnt, 4);
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <TIM6_IRQHandler+0x190>)
 8002092:	7818      	ldrb	r0, [r3, #0]
 8002094:	4a29      	ldr	r2, [pc, #164]	; (800213c <TIM6_IRQHandler+0x194>)
 8002096:	492a      	ldr	r1, [pc, #168]	; (8002140 <TIM6_IRQHandler+0x198>)
 8002098:	2304      	movs	r3, #4
 800209a:	f7ff fd45 	bl	8001b28 <timer>


  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800209e:	4b29      	ldr	r3, [pc, #164]	; (8002144 <TIM6_IRQHandler+0x19c>)
 80020a0:	0018      	movs	r0, r3
 80020a2:	f001 fac9 	bl	8003638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80020a6:	46c0      	nop			; (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b001      	add	sp, #4
 80020ac:	bd90      	pop	{r4, r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	20000170 	.word	0x20000170
 80020b4:	20000251 	.word	0x20000251
 80020b8:	2000013c 	.word	0x2000013c
 80020bc:	2000024c 	.word	0x2000024c
 80020c0:	20000148 	.word	0x20000148
 80020c4:	2000025a 	.word	0x2000025a
 80020c8:	2000014c 	.word	0x2000014c
 80020cc:	20000259 	.word	0x20000259
 80020d0:	2000025f 	.word	0x2000025f
 80020d4:	2000024e 	.word	0x2000024e
 80020d8:	20000175 	.word	0x20000175
 80020dc:	20000176 	.word	0x20000176
 80020e0:	20000178 	.word	0x20000178
 80020e4:	20000177 	.word	0x20000177
 80020e8:	20000144 	.word	0x20000144
 80020ec:	2000018b 	.word	0x2000018b
 80020f0:	20000258 	.word	0x20000258
 80020f4:	20000154 	.word	0x20000154
 80020f8:	20000256 	.word	0x20000256
 80020fc:	20000265 	.word	0x20000265
 8002100:	20000150 	.word	0x20000150
 8002104:	20000262 	.word	0x20000262
 8002108:	2000025e 	.word	0x2000025e
 800210c:	2000015c 	.word	0x2000015c
 8002110:	20000269 	.word	0x20000269
 8002114:	20000250 	.word	0x20000250
 8002118:	20000158 	.word	0x20000158
 800211c:	20000253 	.word	0x20000253
 8002120:	20000260 	.word	0x20000260
 8002124:	20000160 	.word	0x20000160
 8002128:	20000267 	.word	0x20000267
 800212c:	2000025c 	.word	0x2000025c
 8002130:	20000164 	.word	0x20000164
 8002134:	20000268 	.word	0x20000268
 8002138:	20000257 	.word	0x20000257
 800213c:	20000168 	.word	0x20000168
 8002140:	20000261 	.word	0x20000261
 8002144:	200001fc 	.word	0x200001fc

08002148 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <_sbrk+0x50>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d102      	bne.n	800215e <_sbrk+0x16>
		heap_end = &end;
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <_sbrk+0x50>)
 800215a:	4a10      	ldr	r2, [pc, #64]	; (800219c <_sbrk+0x54>)
 800215c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <_sbrk+0x50>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <_sbrk+0x50>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	18d3      	adds	r3, r2, r3
 800216c:	466a      	mov	r2, sp
 800216e:	4293      	cmp	r3, r2
 8002170:	d907      	bls.n	8002182 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002172:	f001 fddf 	bl	8003d34 <__errno>
 8002176:	0003      	movs	r3, r0
 8002178:	220c      	movs	r2, #12
 800217a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800217c:	2301      	movs	r3, #1
 800217e:	425b      	negs	r3, r3
 8002180:	e006      	b.n	8002190 <_sbrk+0x48>
	}

	heap_end += incr;
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <_sbrk+0x50>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	18d2      	adds	r2, r2, r3
 800218a:	4b03      	ldr	r3, [pc, #12]	; (8002198 <_sbrk+0x50>)
 800218c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800218e:	68fb      	ldr	r3, [r7, #12]
}
 8002190:	0018      	movs	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	b004      	add	sp, #16
 8002196:	bd80      	pop	{r7, pc}
 8002198:	2000017c 	.word	0x2000017c
 800219c:	20000298 	.word	0x20000298

080021a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80021a4:	46c0      	nop			; (mov r8, r8)
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021ac:	480d      	ldr	r0, [pc, #52]	; (80021e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80021ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021b0:	480d      	ldr	r0, [pc, #52]	; (80021e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80021b2:	490e      	ldr	r1, [pc, #56]	; (80021ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80021b4:	4a0e      	ldr	r2, [pc, #56]	; (80021f0 <LoopForever+0xe>)
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b8:	e002      	b.n	80021c0 <LoopCopyDataInit>

080021ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021be:	3304      	adds	r3, #4

080021c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c4:	d3f9      	bcc.n	80021ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80021c8:	4c0b      	ldr	r4, [pc, #44]	; (80021f8 <LoopForever+0x16>)
  movs r3, #0
 80021ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021cc:	e001      	b.n	80021d2 <LoopFillZerobss>

080021ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d0:	3204      	adds	r2, #4

080021d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d4:	d3fb      	bcc.n	80021ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021d6:	f7ff ffe3 	bl	80021a0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80021da:	f001 fdb1 	bl	8003d40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021de:	f7ff f91b 	bl	8001418 <main>

080021e2 <LoopForever>:

LoopForever:
    b LoopForever
 80021e2:	e7fe      	b.n	80021e2 <LoopForever>
  ldr   r0, =_estack
 80021e4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80021e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021ec:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80021f0:	08003fb8 	.word	0x08003fb8
  ldr r2, =_sbss
 80021f4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80021f8:	20000294 	.word	0x20000294

080021fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021fc:	e7fe      	b.n	80021fc <ADC1_IRQHandler>
	...

08002200 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <HAL_Init+0x24>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_Init+0x24>)
 800220a:	2110      	movs	r1, #16
 800220c:	430a      	orrs	r2, r1
 800220e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002210:	2000      	movs	r0, #0
 8002212:	f000 f809 	bl	8002228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002216:	f7ff fc21 	bl	8001a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	40022000 	.word	0x40022000

08002228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002230:	4b14      	ldr	r3, [pc, #80]	; (8002284 <HAL_InitTick+0x5c>)
 8002232:	681c      	ldr	r4, [r3, #0]
 8002234:	4b14      	ldr	r3, [pc, #80]	; (8002288 <HAL_InitTick+0x60>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	0019      	movs	r1, r3
 800223a:	23fa      	movs	r3, #250	; 0xfa
 800223c:	0098      	lsls	r0, r3, #2
 800223e:	f7fd ff63 	bl	8000108 <__udivsi3>
 8002242:	0003      	movs	r3, r0
 8002244:	0019      	movs	r1, r3
 8002246:	0020      	movs	r0, r4
 8002248:	f7fd ff5e 	bl	8000108 <__udivsi3>
 800224c:	0003      	movs	r3, r0
 800224e:	0018      	movs	r0, r3
 8002250:	f000 f92d 	bl	80024ae <HAL_SYSTICK_Config>
 8002254:	1e03      	subs	r3, r0, #0
 8002256:	d001      	beq.n	800225c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e00f      	b.n	800227c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d80b      	bhi.n	800227a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	2301      	movs	r3, #1
 8002266:	425b      	negs	r3, r3
 8002268:	2200      	movs	r2, #0
 800226a:	0018      	movs	r0, r3
 800226c:	f000 f8fa 	bl	8002464 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002270:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_InitTick+0x64>)
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e000      	b.n	800227c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
}
 800227c:	0018      	movs	r0, r3
 800227e:	46bd      	mov	sp, r7
 8002280:	b003      	add	sp, #12
 8002282:	bd90      	pop	{r4, r7, pc}
 8002284:	20000090 	.word	0x20000090
 8002288:	20000098 	.word	0x20000098
 800228c:	20000094 	.word	0x20000094

08002290 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_IncTick+0x1c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	001a      	movs	r2, r3
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <HAL_IncTick+0x20>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	18d2      	adds	r2, r2, r3
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_IncTick+0x20>)
 80022a2:	601a      	str	r2, [r3, #0]
}
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	20000098 	.word	0x20000098
 80022b0:	2000026c 	.word	0x2000026c

080022b4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  return uwTick;
 80022b8:	4b02      	ldr	r3, [pc, #8]	; (80022c4 <HAL_GetTick+0x10>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	2000026c 	.word	0x2000026c

080022c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d0:	f7ff fff0 	bl	80022b4 <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	3301      	adds	r3, #1
 80022e0:	d005      	beq.n	80022ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022e2:	4b09      	ldr	r3, [pc, #36]	; (8002308 <HAL_Delay+0x40>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	001a      	movs	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	189b      	adds	r3, r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	f7ff ffe0 	bl	80022b4 <HAL_GetTick>
 80022f4:	0002      	movs	r2, r0
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d8f7      	bhi.n	80022f0 <HAL_Delay+0x28>
  {
  }
}
 8002300:	46c0      	nop			; (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b004      	add	sp, #16
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000098 	.word	0x20000098

0800230c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	0002      	movs	r2, r0
 8002314:	1dfb      	adds	r3, r7, #7
 8002316:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002318:	1dfb      	adds	r3, r7, #7
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b7f      	cmp	r3, #127	; 0x7f
 800231e:	d809      	bhi.n	8002334 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002320:	1dfb      	adds	r3, r7, #7
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	001a      	movs	r2, r3
 8002326:	231f      	movs	r3, #31
 8002328:	401a      	ands	r2, r3
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <__NVIC_EnableIRQ+0x30>)
 800232c:	2101      	movs	r1, #1
 800232e:	4091      	lsls	r1, r2
 8002330:	000a      	movs	r2, r1
 8002332:	601a      	str	r2, [r3, #0]
  }
}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}
 800233c:	e000e100 	.word	0xe000e100

08002340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	0002      	movs	r2, r0
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	1dfb      	adds	r3, r7, #7
 800234c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800234e:	1dfb      	adds	r3, r7, #7
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	2b7f      	cmp	r3, #127	; 0x7f
 8002354:	d828      	bhi.n	80023a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002356:	4a2f      	ldr	r2, [pc, #188]	; (8002414 <__NVIC_SetPriority+0xd4>)
 8002358:	1dfb      	adds	r3, r7, #7
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	b25b      	sxtb	r3, r3
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	33c0      	adds	r3, #192	; 0xc0
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	589b      	ldr	r3, [r3, r2]
 8002366:	1dfa      	adds	r2, r7, #7
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	0011      	movs	r1, r2
 800236c:	2203      	movs	r2, #3
 800236e:	400a      	ands	r2, r1
 8002370:	00d2      	lsls	r2, r2, #3
 8002372:	21ff      	movs	r1, #255	; 0xff
 8002374:	4091      	lsls	r1, r2
 8002376:	000a      	movs	r2, r1
 8002378:	43d2      	mvns	r2, r2
 800237a:	401a      	ands	r2, r3
 800237c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	019b      	lsls	r3, r3, #6
 8002382:	22ff      	movs	r2, #255	; 0xff
 8002384:	401a      	ands	r2, r3
 8002386:	1dfb      	adds	r3, r7, #7
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	0018      	movs	r0, r3
 800238c:	2303      	movs	r3, #3
 800238e:	4003      	ands	r3, r0
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002394:	481f      	ldr	r0, [pc, #124]	; (8002414 <__NVIC_SetPriority+0xd4>)
 8002396:	1dfb      	adds	r3, r7, #7
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	b25b      	sxtb	r3, r3
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	430a      	orrs	r2, r1
 80023a0:	33c0      	adds	r3, #192	; 0xc0
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023a6:	e031      	b.n	800240c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023a8:	4a1b      	ldr	r2, [pc, #108]	; (8002418 <__NVIC_SetPriority+0xd8>)
 80023aa:	1dfb      	adds	r3, r7, #7
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	0019      	movs	r1, r3
 80023b0:	230f      	movs	r3, #15
 80023b2:	400b      	ands	r3, r1
 80023b4:	3b08      	subs	r3, #8
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	3306      	adds	r3, #6
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	18d3      	adds	r3, r2, r3
 80023be:	3304      	adds	r3, #4
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	1dfa      	adds	r2, r7, #7
 80023c4:	7812      	ldrb	r2, [r2, #0]
 80023c6:	0011      	movs	r1, r2
 80023c8:	2203      	movs	r2, #3
 80023ca:	400a      	ands	r2, r1
 80023cc:	00d2      	lsls	r2, r2, #3
 80023ce:	21ff      	movs	r1, #255	; 0xff
 80023d0:	4091      	lsls	r1, r2
 80023d2:	000a      	movs	r2, r1
 80023d4:	43d2      	mvns	r2, r2
 80023d6:	401a      	ands	r2, r3
 80023d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	019b      	lsls	r3, r3, #6
 80023de:	22ff      	movs	r2, #255	; 0xff
 80023e0:	401a      	ands	r2, r3
 80023e2:	1dfb      	adds	r3, r7, #7
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	0018      	movs	r0, r3
 80023e8:	2303      	movs	r3, #3
 80023ea:	4003      	ands	r3, r0
 80023ec:	00db      	lsls	r3, r3, #3
 80023ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023f0:	4809      	ldr	r0, [pc, #36]	; (8002418 <__NVIC_SetPriority+0xd8>)
 80023f2:	1dfb      	adds	r3, r7, #7
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	001c      	movs	r4, r3
 80023f8:	230f      	movs	r3, #15
 80023fa:	4023      	ands	r3, r4
 80023fc:	3b08      	subs	r3, #8
 80023fe:	089b      	lsrs	r3, r3, #2
 8002400:	430a      	orrs	r2, r1
 8002402:	3306      	adds	r3, #6
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	18c3      	adds	r3, r0, r3
 8002408:	3304      	adds	r3, #4
 800240a:	601a      	str	r2, [r3, #0]
}
 800240c:	46c0      	nop			; (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	b003      	add	sp, #12
 8002412:	bd90      	pop	{r4, r7, pc}
 8002414:	e000e100 	.word	0xe000e100
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3b01      	subs	r3, #1
 8002428:	4a0c      	ldr	r2, [pc, #48]	; (800245c <SysTick_Config+0x40>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800242e:	2301      	movs	r3, #1
 8002430:	e010      	b.n	8002454 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002432:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <SysTick_Config+0x44>)
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	3a01      	subs	r2, #1
 8002438:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800243a:	2301      	movs	r3, #1
 800243c:	425b      	negs	r3, r3
 800243e:	2103      	movs	r1, #3
 8002440:	0018      	movs	r0, r3
 8002442:	f7ff ff7d 	bl	8002340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002446:	4b06      	ldr	r3, [pc, #24]	; (8002460 <SysTick_Config+0x44>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <SysTick_Config+0x44>)
 800244e:	2207      	movs	r2, #7
 8002450:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002452:	2300      	movs	r3, #0
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	b002      	add	sp, #8
 800245a:	bd80      	pop	{r7, pc}
 800245c:	00ffffff 	.word	0x00ffffff
 8002460:	e000e010 	.word	0xe000e010

08002464 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	210f      	movs	r1, #15
 8002470:	187b      	adds	r3, r7, r1
 8002472:	1c02      	adds	r2, r0, #0
 8002474:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	187b      	adds	r3, r7, r1
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	b25b      	sxtb	r3, r3
 800247e:	0011      	movs	r1, r2
 8002480:	0018      	movs	r0, r3
 8002482:	f7ff ff5d 	bl	8002340 <__NVIC_SetPriority>
}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	46bd      	mov	sp, r7
 800248a:	b004      	add	sp, #16
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	0002      	movs	r2, r0
 8002496:	1dfb      	adds	r3, r7, #7
 8002498:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800249a:	1dfb      	adds	r3, r7, #7
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	b25b      	sxtb	r3, r3
 80024a0:	0018      	movs	r0, r3
 80024a2:	f7ff ff33 	bl	800230c <__NVIC_EnableIRQ>
}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	46bd      	mov	sp, r7
 80024aa:	b002      	add	sp, #8
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b082      	sub	sp, #8
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7ff ffaf 	bl	800241c <SysTick_Config>
 80024be:	0003      	movs	r3, r0
}
 80024c0:	0018      	movs	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b002      	add	sp, #8
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80024c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	603a      	str	r2, [r7, #0]
 80024d4:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024d6:	2317      	movs	r3, #23
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 80024de:	2316      	movs	r3, #22
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 80024e6:	2315      	movs	r3, #21
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80024ee:	4b3e      	ldr	r3, [pc, #248]	; (80025e8 <HAL_FLASH_Program+0x120>)
 80024f0:	7e1b      	ldrb	r3, [r3, #24]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_FLASH_Program+0x32>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e072      	b.n	80025e0 <HAL_FLASH_Program+0x118>
 80024fa:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <HAL_FLASH_Program+0x120>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002500:	2317      	movs	r3, #23
 8002502:	18fe      	adds	r6, r7, r3
 8002504:	4b39      	ldr	r3, [pc, #228]	; (80025ec <HAL_FLASH_Program+0x124>)
 8002506:	0018      	movs	r0, r3
 8002508:	f000 f8c4 	bl	8002694 <FLASH_WaitForLastOperation>
 800250c:	0003      	movs	r3, r0
 800250e:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8002510:	2317      	movs	r3, #23
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d15c      	bne.n	80025d4 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d104      	bne.n	800252a <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002520:	2315      	movs	r3, #21
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
 8002528:	e00b      	b.n	8002542 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d104      	bne.n	800253a <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002530:	2315      	movs	r3, #21
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	2202      	movs	r2, #2
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e003      	b.n	8002542 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800253a:	2315      	movs	r3, #21
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2204      	movs	r2, #4
 8002540:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8002542:	2316      	movs	r3, #22
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
 800254a:	e039      	b.n	80025c0 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800254c:	2116      	movs	r1, #22
 800254e:	187b      	adds	r3, r7, r1
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	005a      	lsls	r2, r3, #1
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	18d0      	adds	r0, r2, r3
 8002558:	187b      	adds	r3, r7, r1
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	001a      	movs	r2, r3
 8002560:	3a20      	subs	r2, #32
 8002562:	2a00      	cmp	r2, #0
 8002564:	db03      	blt.n	800256e <HAL_FLASH_Program+0xa6>
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	40d1      	lsrs	r1, r2
 800256a:	000c      	movs	r4, r1
 800256c:	e008      	b.n	8002580 <HAL_FLASH_Program+0xb8>
 800256e:	2220      	movs	r2, #32
 8002570:	1ad2      	subs	r2, r2, r3
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4091      	lsls	r1, r2
 8002576:	000a      	movs	r2, r1
 8002578:	6839      	ldr	r1, [r7, #0]
 800257a:	40d9      	lsrs	r1, r3
 800257c:	000c      	movs	r4, r1
 800257e:	4314      	orrs	r4, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	40da      	lsrs	r2, r3
 8002584:	0015      	movs	r5, r2
 8002586:	b2a3      	uxth	r3, r4
 8002588:	0019      	movs	r1, r3
 800258a:	f000 f867 	bl	800265c <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800258e:	2317      	movs	r3, #23
 8002590:	18fe      	adds	r6, r7, r3
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <HAL_FLASH_Program+0x124>)
 8002594:	0018      	movs	r0, r3
 8002596:	f000 f87d 	bl	8002694 <FLASH_WaitForLastOperation>
 800259a:	0003      	movs	r3, r0
 800259c:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800259e:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <HAL_FLASH_Program+0x128>)
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	4b13      	ldr	r3, [pc, #76]	; (80025f0 <HAL_FLASH_Program+0x128>)
 80025a4:	2101      	movs	r1, #1
 80025a6:	438a      	bics	r2, r1
 80025a8:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 80025aa:	2317      	movs	r3, #23
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d10e      	bne.n	80025d2 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 80025b4:	2116      	movs	r1, #22
 80025b6:	187b      	adds	r3, r7, r1
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	187b      	adds	r3, r7, r1
 80025bc:	3201      	adds	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	2316      	movs	r3, #22
 80025c2:	18fa      	adds	r2, r7, r3
 80025c4:	2315      	movs	r3, #21
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	7812      	ldrb	r2, [r2, #0]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d3bd      	bcc.n	800254c <HAL_FLASH_Program+0x84>
 80025d0:	e000      	b.n	80025d4 <HAL_FLASH_Program+0x10c>
      {
        break;
 80025d2:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025d4:	4b04      	ldr	r3, [pc, #16]	; (80025e8 <HAL_FLASH_Program+0x120>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	761a      	strb	r2, [r3, #24]

  return status;
 80025da:	2317      	movs	r3, #23
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	781b      	ldrb	r3, [r3, #0]
}
 80025e0:	0018      	movs	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b007      	add	sp, #28
 80025e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025e8:	20000270 	.word	0x20000270
 80025ec:	0000c350 	.word	0x0000c350
 80025f0:	40022000 	.word	0x40022000

080025f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80025fa:	1dfb      	adds	r3, r7, #7
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_FLASH_Unlock+0x40>)
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	4013      	ands	r3, r2
 8002608:	d00d      	beq.n	8002626 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_FLASH_Unlock+0x40>)
 800260c:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <HAL_FLASH_Unlock+0x44>)
 800260e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002610:	4b08      	ldr	r3, [pc, #32]	; (8002634 <HAL_FLASH_Unlock+0x40>)
 8002612:	4a0a      	ldr	r2, [pc, #40]	; (800263c <HAL_FLASH_Unlock+0x48>)
 8002614:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <HAL_FLASH_Unlock+0x40>)
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	2280      	movs	r2, #128	; 0x80
 800261c:	4013      	ands	r3, r2
 800261e:	d002      	beq.n	8002626 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8002620:	1dfb      	adds	r3, r7, #7
 8002622:	2201      	movs	r2, #1
 8002624:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002626:	1dfb      	adds	r3, r7, #7
 8002628:	781b      	ldrb	r3, [r3, #0]
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b002      	add	sp, #8
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	40022000 	.word	0x40022000
 8002638:	45670123 	.word	0x45670123
 800263c:	cdef89ab 	.word	0xcdef89ab

08002640 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <HAL_FLASH_Lock+0x18>)
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <HAL_FLASH_Lock+0x18>)
 800264a:	2180      	movs	r1, #128	; 0x80
 800264c:	430a      	orrs	r2, r1
 800264e:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8002650:	2300      	movs	r3, #0
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40022000 	.word	0x40022000

0800265c <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	000a      	movs	r2, r1
 8002666:	1cbb      	adds	r3, r7, #2
 8002668:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <FLASH_Program_HalfWord+0x30>)
 800266c:	2200      	movs	r2, #0
 800266e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002670:	4b07      	ldr	r3, [pc, #28]	; (8002690 <FLASH_Program_HalfWord+0x34>)
 8002672:	691a      	ldr	r2, [r3, #16]
 8002674:	4b06      	ldr	r3, [pc, #24]	; (8002690 <FLASH_Program_HalfWord+0x34>)
 8002676:	2101      	movs	r1, #1
 8002678:	430a      	orrs	r2, r1
 800267a:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	1cba      	adds	r2, r7, #2
 8002680:	8812      	ldrh	r2, [r2, #0]
 8002682:	801a      	strh	r2, [r3, #0]
}
 8002684:	46c0      	nop			; (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b002      	add	sp, #8
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000270 	.word	0x20000270
 8002690:	40022000 	.word	0x40022000

08002694 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800269c:	f7ff fe0a 	bl	80022b4 <HAL_GetTick>
 80026a0:	0003      	movs	r3, r0
 80026a2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80026a4:	e00f      	b.n	80026c6 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3301      	adds	r3, #1
 80026aa:	d00c      	beq.n	80026c6 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d007      	beq.n	80026c2 <FLASH_WaitForLastOperation+0x2e>
 80026b2:	f7ff fdff 	bl	80022b4 <HAL_GetTick>
 80026b6:	0002      	movs	r2, r0
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d201      	bcs.n	80026c6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e01f      	b.n	8002706 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80026c6:	4b12      	ldr	r3, [pc, #72]	; (8002710 <FLASH_WaitForLastOperation+0x7c>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2201      	movs	r2, #1
 80026cc:	4013      	ands	r3, r2
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d0e9      	beq.n	80026a6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80026d2:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <FLASH_WaitForLastOperation+0x7c>)
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2220      	movs	r2, #32
 80026d8:	4013      	ands	r3, r2
 80026da:	2b20      	cmp	r3, #32
 80026dc:	d102      	bne.n	80026e4 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80026de:	4b0c      	ldr	r3, [pc, #48]	; (8002710 <FLASH_WaitForLastOperation+0x7c>)
 80026e0:	2220      	movs	r2, #32
 80026e2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80026e4:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <FLASH_WaitForLastOperation+0x7c>)
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	2210      	movs	r2, #16
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d005      	beq.n	80026fc <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80026f0:	4b07      	ldr	r3, [pc, #28]	; (8002710 <FLASH_WaitForLastOperation+0x7c>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2204      	movs	r2, #4
 80026f6:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d103      	bne.n	8002704 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80026fc:	f000 f80a 	bl	8002714 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	0018      	movs	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	b004      	add	sp, #16
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	40022000 	.word	0x40022000

08002714 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <FLASH_SetErrorCode+0x58>)
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2210      	movs	r2, #16
 8002724:	4013      	ands	r3, r2
 8002726:	2b10      	cmp	r3, #16
 8002728:	d109      	bne.n	800273e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <FLASH_SetErrorCode+0x5c>)
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	2202      	movs	r2, #2
 8002730:	431a      	orrs	r2, r3
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <FLASH_SetErrorCode+0x5c>)
 8002734:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2210      	movs	r2, #16
 800273a:	4313      	orrs	r3, r2
 800273c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <FLASH_SetErrorCode+0x58>)
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2204      	movs	r2, #4
 8002744:	4013      	ands	r3, r2
 8002746:	2b04      	cmp	r3, #4
 8002748:	d109      	bne.n	800275e <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <FLASH_SetErrorCode+0x5c>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	2201      	movs	r2, #1
 8002750:	431a      	orrs	r2, r3
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <FLASH_SetErrorCode+0x5c>)
 8002754:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2204      	movs	r2, #4
 800275a:	4313      	orrs	r3, r2
 800275c:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800275e:	4b03      	ldr	r3, [pc, #12]	; (800276c <FLASH_SetErrorCode+0x58>)
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	60da      	str	r2, [r3, #12]
}  
 8002764:	46c0      	nop			; (mov r8, r8)
 8002766:	46bd      	mov	sp, r7
 8002768:	b002      	add	sp, #8
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40022000 	.word	0x40022000
 8002770:	20000270 	.word	0x20000270

08002774 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002774:	b5b0      	push	{r4, r5, r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800277e:	230f      	movs	r3, #15
 8002780:	18fb      	adds	r3, r7, r3
 8002782:	2201      	movs	r2, #1
 8002784:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800278a:	4b32      	ldr	r3, [pc, #200]	; (8002854 <HAL_FLASHEx_Erase+0xe0>)
 800278c:	7e1b      	ldrb	r3, [r3, #24]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_FLASHEx_Erase+0x22>
 8002792:	2302      	movs	r3, #2
 8002794:	e05a      	b.n	800284c <HAL_FLASHEx_Erase+0xd8>
 8002796:	4b2f      	ldr	r3, [pc, #188]	; (8002854 <HAL_FLASHEx_Erase+0xe0>)
 8002798:	2201      	movs	r2, #1
 800279a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d116      	bne.n	80027d2 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80027a4:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <HAL_FLASHEx_Erase+0xe4>)
 80027a6:	0018      	movs	r0, r3
 80027a8:	f7ff ff74 	bl	8002694 <FLASH_WaitForLastOperation>
 80027ac:	1e03      	subs	r3, r0, #0
 80027ae:	d147      	bne.n	8002840 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 80027b0:	f000 f856 	bl	8002860 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027b4:	230f      	movs	r3, #15
 80027b6:	18fc      	adds	r4, r7, r3
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_FLASHEx_Erase+0xe4>)
 80027ba:	0018      	movs	r0, r3
 80027bc:	f7ff ff6a 	bl	8002694 <FLASH_WaitForLastOperation>
 80027c0:	0003      	movs	r3, r0
 80027c2:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80027c4:	4b25      	ldr	r3, [pc, #148]	; (800285c <HAL_FLASHEx_Erase+0xe8>)
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	4b24      	ldr	r3, [pc, #144]	; (800285c <HAL_FLASHEx_Erase+0xe8>)
 80027ca:	2104      	movs	r1, #4
 80027cc:	438a      	bics	r2, r1
 80027ce:	611a      	str	r2, [r3, #16]
 80027d0:	e036      	b.n	8002840 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80027d2:	4b21      	ldr	r3, [pc, #132]	; (8002858 <HAL_FLASHEx_Erase+0xe4>)
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7ff ff5d 	bl	8002694 <FLASH_WaitForLastOperation>
 80027da:	1e03      	subs	r3, r0, #0
 80027dc:	d130      	bne.n	8002840 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2201      	movs	r2, #1
 80027e2:	4252      	negs	r2, r2
 80027e4:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	e01f      	b.n	800282e <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f000 f84d 	bl	8002890 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80027f6:	250f      	movs	r5, #15
 80027f8:	197c      	adds	r4, r7, r5
 80027fa:	4b17      	ldr	r3, [pc, #92]	; (8002858 <HAL_FLASHEx_Erase+0xe4>)
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7ff ff49 	bl	8002694 <FLASH_WaitForLastOperation>
 8002802:	0003      	movs	r3, r0
 8002804:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002806:	4b15      	ldr	r3, [pc, #84]	; (800285c <HAL_FLASHEx_Erase+0xe8>)
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	4b14      	ldr	r3, [pc, #80]	; (800285c <HAL_FLASHEx_Erase+0xe8>)
 800280c:	2102      	movs	r1, #2
 800280e:	438a      	bics	r2, r1
 8002810:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8002812:	197b      	adds	r3, r7, r5
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	601a      	str	r2, [r3, #0]
            break;
 8002820:	e00e      	b.n	8002840 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2280      	movs	r2, #128	; 0x80
 8002826:	00d2      	lsls	r2, r2, #3
 8002828:	4694      	mov	ip, r2
 800282a:	4463      	add	r3, ip
 800282c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	029a      	lsls	r2, r3, #10
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	18d3      	adds	r3, r2, r3
        for(address = pEraseInit->PageAddress;
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	429a      	cmp	r2, r3
 800283e:	d3d6      	bcc.n	80027ee <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002840:	4b04      	ldr	r3, [pc, #16]	; (8002854 <HAL_FLASHEx_Erase+0xe0>)
 8002842:	2200      	movs	r2, #0
 8002844:	761a      	strb	r2, [r3, #24]

  return status;
 8002846:	230f      	movs	r3, #15
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	781b      	ldrb	r3, [r3, #0]
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b004      	add	sp, #16
 8002852:	bdb0      	pop	{r4, r5, r7, pc}
 8002854:	20000270 	.word	0x20000270
 8002858:	0000c350 	.word	0x0000c350
 800285c:	40022000 	.word	0x40022000

08002860 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002864:	4b08      	ldr	r3, [pc, #32]	; (8002888 <FLASH_MassErase+0x28>)
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800286a:	4b08      	ldr	r3, [pc, #32]	; (800288c <FLASH_MassErase+0x2c>)
 800286c:	691a      	ldr	r2, [r3, #16]
 800286e:	4b07      	ldr	r3, [pc, #28]	; (800288c <FLASH_MassErase+0x2c>)
 8002870:	2104      	movs	r1, #4
 8002872:	430a      	orrs	r2, r1
 8002874:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <FLASH_MassErase+0x2c>)
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	4b04      	ldr	r3, [pc, #16]	; (800288c <FLASH_MassErase+0x2c>)
 800287c:	2140      	movs	r1, #64	; 0x40
 800287e:	430a      	orrs	r2, r1
 8002880:	611a      	str	r2, [r3, #16]
}
 8002882:	46c0      	nop			; (mov r8, r8)
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000270 	.word	0x20000270
 800288c:	40022000 	.word	0x40022000

08002890 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <FLASH_PageErase+0x34>)
 800289a:	2200      	movs	r2, #0
 800289c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <FLASH_PageErase+0x38>)
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <FLASH_PageErase+0x38>)
 80028a4:	2102      	movs	r1, #2
 80028a6:	430a      	orrs	r2, r1
 80028a8:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80028aa:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <FLASH_PageErase+0x38>)
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <FLASH_PageErase+0x38>)
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <FLASH_PageErase+0x38>)
 80028b6:	2140      	movs	r1, #64	; 0x40
 80028b8:	430a      	orrs	r2, r1
 80028ba:	611a      	str	r2, [r3, #16]
}
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	b002      	add	sp, #8
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000270 	.word	0x20000270
 80028c8:	40022000 	.word	0x40022000

080028cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028da:	e14f      	b.n	8002b7c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2101      	movs	r1, #1
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	4091      	lsls	r1, r2
 80028e6:	000a      	movs	r2, r1
 80028e8:	4013      	ands	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d100      	bne.n	80028f4 <HAL_GPIO_Init+0x28>
 80028f2:	e140      	b.n	8002b76 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d003      	beq.n	8002904 <HAL_GPIO_Init+0x38>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	2b12      	cmp	r3, #18
 8002902:	d123      	bne.n	800294c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	08da      	lsrs	r2, r3, #3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	3208      	adds	r2, #8
 800290c:	0092      	lsls	r2, r2, #2
 800290e:	58d3      	ldr	r3, [r2, r3]
 8002910:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2207      	movs	r2, #7
 8002916:	4013      	ands	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	220f      	movs	r2, #15
 800291c:	409a      	lsls	r2, r3
 800291e:	0013      	movs	r3, r2
 8002920:	43da      	mvns	r2, r3
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2107      	movs	r1, #7
 8002930:	400b      	ands	r3, r1
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	409a      	lsls	r2, r3
 8002936:	0013      	movs	r3, r2
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	08da      	lsrs	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3208      	adds	r2, #8
 8002946:	0092      	lsls	r2, r2, #2
 8002948:	6939      	ldr	r1, [r7, #16]
 800294a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	2203      	movs	r2, #3
 8002958:	409a      	lsls	r2, r3
 800295a:	0013      	movs	r3, r2
 800295c:	43da      	mvns	r2, r3
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2203      	movs	r2, #3
 800296a:	401a      	ands	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	409a      	lsls	r2, r3
 8002972:	0013      	movs	r3, r2
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d00b      	beq.n	80029a0 <HAL_GPIO_Init+0xd4>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d007      	beq.n	80029a0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002994:	2b11      	cmp	r3, #17
 8002996:	d003      	beq.n	80029a0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b12      	cmp	r3, #18
 800299e:	d130      	bne.n	8002a02 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	409a      	lsls	r2, r3
 80029ae:	0013      	movs	r3, r2
 80029b0:	43da      	mvns	r2, r3
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4013      	ands	r3, r2
 80029b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	409a      	lsls	r2, r3
 80029c2:	0013      	movs	r3, r2
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029d6:	2201      	movs	r2, #1
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	409a      	lsls	r2, r3
 80029dc:	0013      	movs	r3, r2
 80029de:	43da      	mvns	r2, r3
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	2201      	movs	r2, #1
 80029ee:	401a      	ands	r2, r3
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	409a      	lsls	r2, r3
 80029f4:	0013      	movs	r3, r2
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	2203      	movs	r2, #3
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	0013      	movs	r3, r2
 8002a12:	43da      	mvns	r2, r3
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	409a      	lsls	r2, r3
 8002a24:	0013      	movs	r3, r2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	055b      	lsls	r3, r3, #21
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d100      	bne.n	8002a40 <HAL_GPIO_Init+0x174>
 8002a3e:	e09a      	b.n	8002b76 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a40:	4b54      	ldr	r3, [pc, #336]	; (8002b94 <HAL_GPIO_Init+0x2c8>)
 8002a42:	699a      	ldr	r2, [r3, #24]
 8002a44:	4b53      	ldr	r3, [pc, #332]	; (8002b94 <HAL_GPIO_Init+0x2c8>)
 8002a46:	2101      	movs	r1, #1
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	619a      	str	r2, [r3, #24]
 8002a4c:	4b51      	ldr	r3, [pc, #324]	; (8002b94 <HAL_GPIO_Init+0x2c8>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	2201      	movs	r2, #1
 8002a52:	4013      	ands	r3, r2
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a58:	4a4f      	ldr	r2, [pc, #316]	; (8002b98 <HAL_GPIO_Init+0x2cc>)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	089b      	lsrs	r3, r3, #2
 8002a5e:	3302      	adds	r3, #2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	589b      	ldr	r3, [r3, r2]
 8002a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2203      	movs	r2, #3
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	220f      	movs	r2, #15
 8002a70:	409a      	lsls	r2, r3
 8002a72:	0013      	movs	r3, r2
 8002a74:	43da      	mvns	r2, r3
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	2390      	movs	r3, #144	; 0x90
 8002a80:	05db      	lsls	r3, r3, #23
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d013      	beq.n	8002aae <HAL_GPIO_Init+0x1e2>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a44      	ldr	r2, [pc, #272]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00d      	beq.n	8002aaa <HAL_GPIO_Init+0x1de>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a43      	ldr	r2, [pc, #268]	; (8002ba0 <HAL_GPIO_Init+0x2d4>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d007      	beq.n	8002aa6 <HAL_GPIO_Init+0x1da>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a42      	ldr	r2, [pc, #264]	; (8002ba4 <HAL_GPIO_Init+0x2d8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <HAL_GPIO_Init+0x1d6>
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e006      	b.n	8002ab0 <HAL_GPIO_Init+0x1e4>
 8002aa2:	2305      	movs	r3, #5
 8002aa4:	e004      	b.n	8002ab0 <HAL_GPIO_Init+0x1e4>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e002      	b.n	8002ab0 <HAL_GPIO_Init+0x1e4>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_GPIO_Init+0x1e4>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	0092      	lsls	r2, r2, #2
 8002ab8:	4093      	lsls	r3, r2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ac0:	4935      	ldr	r1, [pc, #212]	; (8002b98 <HAL_GPIO_Init+0x2cc>)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	089b      	lsrs	r3, r3, #2
 8002ac6:	3302      	adds	r3, #2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ace:	4b36      	ldr	r3, [pc, #216]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	025b      	lsls	r3, r3, #9
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002af2:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002af8:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	43da      	mvns	r2, r3
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4013      	ands	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	029b      	lsls	r3, r3, #10
 8002b10:	4013      	ands	r3, r2
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b1c:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b22:	4b21      	ldr	r3, [pc, #132]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	2380      	movs	r3, #128	; 0x80
 8002b38:	035b      	lsls	r3, r3, #13
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d003      	beq.n	8002b46 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b46:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b4c:	4b16      	ldr	r3, [pc, #88]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	43da      	mvns	r2, r3
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	039b      	lsls	r3, r3, #14
 8002b64:	4013      	ands	r3, r2
 8002b66:	d003      	beq.n	8002b70 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b70:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	40da      	lsrs	r2, r3
 8002b84:	1e13      	subs	r3, r2, #0
 8002b86:	d000      	beq.n	8002b8a <HAL_GPIO_Init+0x2be>
 8002b88:	e6a8      	b.n	80028dc <HAL_GPIO_Init+0x10>
  } 
}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b006      	add	sp, #24
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	48000400 	.word	0x48000400
 8002ba0:	48000800 	.word	0x48000800
 8002ba4:	48000c00 	.word	0x48000c00
 8002ba8:	40010400 	.word	0x40010400

08002bac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	000a      	movs	r2, r1
 8002bb6:	1cbb      	adds	r3, r7, #2
 8002bb8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	1cba      	adds	r2, r7, #2
 8002bc0:	8812      	ldrh	r2, [r2, #0]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d004      	beq.n	8002bd0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002bc6:	230f      	movs	r3, #15
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
 8002bce:	e003      	b.n	8002bd8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bd0:	230f      	movs	r3, #15
 8002bd2:	18fb      	adds	r3, r7, r3
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002bd8:	230f      	movs	r3, #15
 8002bda:	18fb      	adds	r3, r7, r3
 8002bdc:	781b      	ldrb	r3, [r3, #0]
  }
 8002bde:	0018      	movs	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	b004      	add	sp, #16
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b082      	sub	sp, #8
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	0008      	movs	r0, r1
 8002bf0:	0011      	movs	r1, r2
 8002bf2:	1cbb      	adds	r3, r7, #2
 8002bf4:	1c02      	adds	r2, r0, #0
 8002bf6:	801a      	strh	r2, [r3, #0]
 8002bf8:	1c7b      	adds	r3, r7, #1
 8002bfa:	1c0a      	adds	r2, r1, #0
 8002bfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bfe:	1c7b      	adds	r3, r7, #1
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d004      	beq.n	8002c10 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c06:	1cbb      	adds	r3, r7, #2
 8002c08:	881a      	ldrh	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c0e:	e003      	b.n	8002c18 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c10:	1cbb      	adds	r3, r7, #2
 8002c12:	881a      	ldrh	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c18:	46c0      	nop			; (mov r8, r8)
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b002      	add	sp, #8
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	0002      	movs	r2, r0
 8002c28:	1dbb      	adds	r3, r7, #6
 8002c2a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c2c:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	1dba      	adds	r2, r7, #6
 8002c32:	8812      	ldrh	r2, [r2, #0]
 8002c34:	4013      	ands	r3, r2
 8002c36:	d008      	beq.n	8002c4a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c38:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002c3a:	1dba      	adds	r2, r7, #6
 8002c3c:	8812      	ldrh	r2, [r2, #0]
 8002c3e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c40:	1dbb      	adds	r3, r7, #6
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	0018      	movs	r0, r3
 8002c46:	f000 f807 	bl	8002c58 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b002      	add	sp, #8
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	40010400 	.word	0x40010400

08002c58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	0002      	movs	r2, r0
 8002c60:	1dbb      	adds	r3, r7, #6
 8002c62:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8002c64:	46c0      	nop			; (mov r8, r8)
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b002      	add	sp, #8
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e036      	b.n	8002cec <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a1c      	ldr	r2, [pc, #112]	; (8002cf4 <HAL_IWDG_Init+0x88>)
 8002c84:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <HAL_IWDG_Init+0x8c>)
 8002c8c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6852      	ldr	r2, [r2, #4]
 8002c96:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	6892      	ldr	r2, [r2, #8]
 8002ca0:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002ca2:	f7ff fb07 	bl	80022b4 <HAL_GetTick>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8002caa:	e008      	b.n	8002cbe <HAL_IWDG_Init+0x52>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002cac:	f7ff fb02 	bl	80022b4 <HAL_GetTick>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b30      	cmp	r3, #48	; 0x30
 8002cb8:	d901      	bls.n	8002cbe <HAL_IWDG_Init+0x52>
    {
      return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e016      	b.n	8002cec <HAL_IWDG_Init+0x80>
  while (hiwdg->Instance->SR != 0x00u)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f1      	bne.n	8002cac <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691a      	ldr	r2, [r3, #16]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d005      	beq.n	8002ce2 <HAL_IWDG_Init+0x76>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68d2      	ldr	r2, [r2, #12]
 8002cde:	611a      	str	r2, [r3, #16]
 8002ce0:	e003      	b.n	8002cea <HAL_IWDG_Init+0x7e>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <HAL_IWDG_Init+0x90>)
 8002ce8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	0018      	movs	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b004      	add	sp, #16
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	0000cccc 	.word	0x0000cccc
 8002cf8:	00005555 	.word	0x00005555
 8002cfc:	0000aaaa 	.word	0x0000aaaa

08002d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e303      	b.n	800331a <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2201      	movs	r2, #1
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d100      	bne.n	8002d1e <HAL_RCC_OscConfig+0x1e>
 8002d1c:	e08d      	b.n	8002e3a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d1e:	4bc4      	ldr	r3, [pc, #784]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	220c      	movs	r2, #12
 8002d24:	4013      	ands	r3, r2
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d00e      	beq.n	8002d48 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d2a:	4bc1      	ldr	r3, [pc, #772]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	220c      	movs	r2, #12
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b08      	cmp	r3, #8
 8002d34:	d116      	bne.n	8002d64 <HAL_RCC_OscConfig+0x64>
 8002d36:	4bbe      	ldr	r3, [pc, #760]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	025b      	lsls	r3, r3, #9
 8002d3e:	401a      	ands	r2, r3
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	025b      	lsls	r3, r3, #9
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d10d      	bne.n	8002d64 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d48:	4bb9      	ldr	r3, [pc, #740]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2380      	movs	r3, #128	; 0x80
 8002d4e:	029b      	lsls	r3, r3, #10
 8002d50:	4013      	ands	r3, r2
 8002d52:	d100      	bne.n	8002d56 <HAL_RCC_OscConfig+0x56>
 8002d54:	e070      	b.n	8002e38 <HAL_RCC_OscConfig+0x138>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d000      	beq.n	8002d60 <HAL_RCC_OscConfig+0x60>
 8002d5e:	e06b      	b.n	8002e38 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e2da      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCC_OscConfig+0x7c>
 8002d6c:	4bb0      	ldr	r3, [pc, #704]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4baf      	ldr	r3, [pc, #700]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002d72:	2180      	movs	r1, #128	; 0x80
 8002d74:	0249      	lsls	r1, r1, #9
 8002d76:	430a      	orrs	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	e02f      	b.n	8002ddc <HAL_RCC_OscConfig+0xdc>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10c      	bne.n	8002d9e <HAL_RCC_OscConfig+0x9e>
 8002d84:	4baa      	ldr	r3, [pc, #680]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4ba9      	ldr	r3, [pc, #676]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002d8a:	49aa      	ldr	r1, [pc, #680]	; (8003034 <HAL_RCC_OscConfig+0x334>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	4ba7      	ldr	r3, [pc, #668]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4ba6      	ldr	r3, [pc, #664]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002d96:	49a8      	ldr	r1, [pc, #672]	; (8003038 <HAL_RCC_OscConfig+0x338>)
 8002d98:	400a      	ands	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	e01e      	b.n	8002ddc <HAL_RCC_OscConfig+0xdc>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d10e      	bne.n	8002dc4 <HAL_RCC_OscConfig+0xc4>
 8002da6:	4ba2      	ldr	r3, [pc, #648]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4ba1      	ldr	r3, [pc, #644]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	02c9      	lsls	r1, r1, #11
 8002db0:	430a      	orrs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	4b9e      	ldr	r3, [pc, #632]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b9d      	ldr	r3, [pc, #628]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002dba:	2180      	movs	r1, #128	; 0x80
 8002dbc:	0249      	lsls	r1, r1, #9
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	e00b      	b.n	8002ddc <HAL_RCC_OscConfig+0xdc>
 8002dc4:	4b9a      	ldr	r3, [pc, #616]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	4b99      	ldr	r3, [pc, #612]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002dca:	499a      	ldr	r1, [pc, #616]	; (8003034 <HAL_RCC_OscConfig+0x334>)
 8002dcc:	400a      	ands	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	4b97      	ldr	r3, [pc, #604]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	4b96      	ldr	r3, [pc, #600]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002dd6:	4998      	ldr	r1, [pc, #608]	; (8003038 <HAL_RCC_OscConfig+0x338>)
 8002dd8:	400a      	ands	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d014      	beq.n	8002e0e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7ff fa66 	bl	80022b4 <HAL_GetTick>
 8002de8:	0003      	movs	r3, r0
 8002dea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dee:	f7ff fa61 	bl	80022b4 <HAL_GetTick>
 8002df2:	0002      	movs	r2, r0
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b64      	cmp	r3, #100	; 0x64
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e28c      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e00:	4b8b      	ldr	r3, [pc, #556]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	029b      	lsls	r3, r3, #10
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0xee>
 8002e0c:	e015      	b.n	8002e3a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0e:	f7ff fa51 	bl	80022b4 <HAL_GetTick>
 8002e12:	0003      	movs	r3, r0
 8002e14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e18:	f7ff fa4c 	bl	80022b4 <HAL_GetTick>
 8002e1c:	0002      	movs	r2, r0
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b64      	cmp	r3, #100	; 0x64
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e277      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2a:	4b81      	ldr	r3, [pc, #516]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	029b      	lsls	r3, r3, #10
 8002e32:	4013      	ands	r3, r2
 8002e34:	d1f0      	bne.n	8002e18 <HAL_RCC_OscConfig+0x118>
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e38:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	4013      	ands	r3, r2
 8002e42:	d100      	bne.n	8002e46 <HAL_RCC_OscConfig+0x146>
 8002e44:	e069      	b.n	8002f1a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002e46:	4b7a      	ldr	r3, [pc, #488]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	220c      	movs	r2, #12
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	d00b      	beq.n	8002e68 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002e50:	4b77      	ldr	r3, [pc, #476]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	220c      	movs	r2, #12
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b08      	cmp	r3, #8
 8002e5a:	d11c      	bne.n	8002e96 <HAL_RCC_OscConfig+0x196>
 8002e5c:	4b74      	ldr	r3, [pc, #464]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	025b      	lsls	r3, r3, #9
 8002e64:	4013      	ands	r3, r2
 8002e66:	d116      	bne.n	8002e96 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e68:	4b71      	ldr	r3, [pc, #452]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d005      	beq.n	8002e7e <HAL_RCC_OscConfig+0x17e>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d001      	beq.n	8002e7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e24d      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7e:	4b6c      	ldr	r3, [pc, #432]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	22f8      	movs	r2, #248	; 0xf8
 8002e84:	4393      	bics	r3, r2
 8002e86:	0019      	movs	r1, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	00da      	lsls	r2, r3, #3
 8002e8e:	4b68      	ldr	r3, [pc, #416]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002e90:	430a      	orrs	r2, r1
 8002e92:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e94:	e041      	b.n	8002f1a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d024      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e9e:	4b64      	ldr	r3, [pc, #400]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4b63      	ldr	r3, [pc, #396]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eaa:	f7ff fa03 	bl	80022b4 <HAL_GetTick>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb4:	f7ff f9fe 	bl	80022b4 <HAL_GetTick>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e229      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec6:	4b5a      	ldr	r3, [pc, #360]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d0f1      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed0:	4b57      	ldr	r3, [pc, #348]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	22f8      	movs	r2, #248	; 0xf8
 8002ed6:	4393      	bics	r3, r2
 8002ed8:	0019      	movs	r1, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	00da      	lsls	r2, r3, #3
 8002ee0:	4b53      	ldr	r3, [pc, #332]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e018      	b.n	8002f1a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee8:	4b51      	ldr	r3, [pc, #324]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4b50      	ldr	r3, [pc, #320]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002eee:	2101      	movs	r1, #1
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef4:	f7ff f9de 	bl	80022b4 <HAL_GetTick>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002efe:	f7ff f9d9 	bl	80022b4 <HAL_GetTick>
 8002f02:	0002      	movs	r2, r0
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e204      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f10:	4b47      	ldr	r3, [pc, #284]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2202      	movs	r2, #2
 8002f16:	4013      	ands	r3, r2
 8002f18:	d1f1      	bne.n	8002efe <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2208      	movs	r2, #8
 8002f20:	4013      	ands	r3, r2
 8002f22:	d036      	beq.n	8002f92 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d019      	beq.n	8002f60 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f2c:	4b40      	ldr	r3, [pc, #256]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f30:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002f32:	2101      	movs	r1, #1
 8002f34:	430a      	orrs	r2, r1
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7ff f9bc 	bl	80022b4 <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f42:	f7ff f9b7 	bl	80022b4 <HAL_GetTick>
 8002f46:	0002      	movs	r2, r0
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e1e2      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f54:	4b36      	ldr	r3, [pc, #216]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f58:	2202      	movs	r2, #2
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d0f1      	beq.n	8002f42 <HAL_RCC_OscConfig+0x242>
 8002f5e:	e018      	b.n	8002f92 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f60:	4b33      	ldr	r3, [pc, #204]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f64:	4b32      	ldr	r3, [pc, #200]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002f66:	2101      	movs	r1, #1
 8002f68:	438a      	bics	r2, r1
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6c:	f7ff f9a2 	bl	80022b4 <HAL_GetTick>
 8002f70:	0003      	movs	r3, r0
 8002f72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f76:	f7ff f99d 	bl	80022b4 <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e1c8      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f88:	4b29      	ldr	r3, [pc, #164]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d1f1      	bne.n	8002f76 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2204      	movs	r2, #4
 8002f98:	4013      	ands	r3, r2
 8002f9a:	d100      	bne.n	8002f9e <HAL_RCC_OscConfig+0x29e>
 8002f9c:	e0b6      	b.n	800310c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9e:	231f      	movs	r3, #31
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa6:	4b22      	ldr	r3, [pc, #136]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	2380      	movs	r3, #128	; 0x80
 8002fac:	055b      	lsls	r3, r3, #21
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d111      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb2:	4b1f      	ldr	r3, [pc, #124]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002fb4:	69da      	ldr	r2, [r3, #28]
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	0549      	lsls	r1, r1, #21
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	61da      	str	r2, [r3, #28]
 8002fc0:	4b1b      	ldr	r3, [pc, #108]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	2380      	movs	r3, #128	; 0x80
 8002fc6:	055b      	lsls	r3, r3, #21
 8002fc8:	4013      	ands	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fce:	231f      	movs	r3, #31
 8002fd0:	18fb      	adds	r3, r7, r3
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd6:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_RCC_OscConfig+0x33c>)
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	2380      	movs	r3, #128	; 0x80
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d11a      	bne.n	8003018 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <HAL_RCC_OscConfig+0x33c>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	4b15      	ldr	r3, [pc, #84]	; (800303c <HAL_RCC_OscConfig+0x33c>)
 8002fe8:	2180      	movs	r1, #128	; 0x80
 8002fea:	0049      	lsls	r1, r1, #1
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff0:	f7ff f960 	bl	80022b4 <HAL_GetTick>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffa:	f7ff f95b 	bl	80022b4 <HAL_GetTick>
 8002ffe:	0002      	movs	r2, r0
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b64      	cmp	r3, #100	; 0x64
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e186      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCC_OscConfig+0x33c>)
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4013      	ands	r3, r2
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d10f      	bne.n	8003040 <HAL_RCC_OscConfig+0x340>
 8003020:	4b03      	ldr	r3, [pc, #12]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8003022:	6a1a      	ldr	r2, [r3, #32]
 8003024:	4b02      	ldr	r3, [pc, #8]	; (8003030 <HAL_RCC_OscConfig+0x330>)
 8003026:	2101      	movs	r1, #1
 8003028:	430a      	orrs	r2, r1
 800302a:	621a      	str	r2, [r3, #32]
 800302c:	e036      	b.n	800309c <HAL_RCC_OscConfig+0x39c>
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	40021000 	.word	0x40021000
 8003034:	fffeffff 	.word	0xfffeffff
 8003038:	fffbffff 	.word	0xfffbffff
 800303c:	40007000 	.word	0x40007000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10c      	bne.n	8003062 <HAL_RCC_OscConfig+0x362>
 8003048:	4bb6      	ldr	r3, [pc, #728]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800304a:	6a1a      	ldr	r2, [r3, #32]
 800304c:	4bb5      	ldr	r3, [pc, #724]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800304e:	2101      	movs	r1, #1
 8003050:	438a      	bics	r2, r1
 8003052:	621a      	str	r2, [r3, #32]
 8003054:	4bb3      	ldr	r3, [pc, #716]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003056:	6a1a      	ldr	r2, [r3, #32]
 8003058:	4bb2      	ldr	r3, [pc, #712]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800305a:	2104      	movs	r1, #4
 800305c:	438a      	bics	r2, r1
 800305e:	621a      	str	r2, [r3, #32]
 8003060:	e01c      	b.n	800309c <HAL_RCC_OscConfig+0x39c>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b05      	cmp	r3, #5
 8003068:	d10c      	bne.n	8003084 <HAL_RCC_OscConfig+0x384>
 800306a:	4bae      	ldr	r3, [pc, #696]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800306c:	6a1a      	ldr	r2, [r3, #32]
 800306e:	4bad      	ldr	r3, [pc, #692]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003070:	2104      	movs	r1, #4
 8003072:	430a      	orrs	r2, r1
 8003074:	621a      	str	r2, [r3, #32]
 8003076:	4bab      	ldr	r3, [pc, #684]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003078:	6a1a      	ldr	r2, [r3, #32]
 800307a:	4baa      	ldr	r3, [pc, #680]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800307c:	2101      	movs	r1, #1
 800307e:	430a      	orrs	r2, r1
 8003080:	621a      	str	r2, [r3, #32]
 8003082:	e00b      	b.n	800309c <HAL_RCC_OscConfig+0x39c>
 8003084:	4ba7      	ldr	r3, [pc, #668]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003086:	6a1a      	ldr	r2, [r3, #32]
 8003088:	4ba6      	ldr	r3, [pc, #664]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800308a:	2101      	movs	r1, #1
 800308c:	438a      	bics	r2, r1
 800308e:	621a      	str	r2, [r3, #32]
 8003090:	4ba4      	ldr	r3, [pc, #656]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003092:	6a1a      	ldr	r2, [r3, #32]
 8003094:	4ba3      	ldr	r3, [pc, #652]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003096:	2104      	movs	r1, #4
 8003098:	438a      	bics	r2, r1
 800309a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d014      	beq.n	80030ce <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a4:	f7ff f906 	bl	80022b4 <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ac:	e009      	b.n	80030c2 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ae:	f7ff f901 	bl	80022b4 <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	4a9b      	ldr	r2, [pc, #620]	; (8003328 <HAL_RCC_OscConfig+0x628>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e12b      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c2:	4b98      	ldr	r3, [pc, #608]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	2202      	movs	r2, #2
 80030c8:	4013      	ands	r3, r2
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x3ae>
 80030cc:	e013      	b.n	80030f6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ce:	f7ff f8f1 	bl	80022b4 <HAL_GetTick>
 80030d2:	0003      	movs	r3, r0
 80030d4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d6:	e009      	b.n	80030ec <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d8:	f7ff f8ec 	bl	80022b4 <HAL_GetTick>
 80030dc:	0002      	movs	r2, r0
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	4a91      	ldr	r2, [pc, #580]	; (8003328 <HAL_RCC_OscConfig+0x628>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e116      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ec:	4b8d      	ldr	r3, [pc, #564]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	2202      	movs	r2, #2
 80030f2:	4013      	ands	r3, r2
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030f6:	231f      	movs	r3, #31
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d105      	bne.n	800310c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003100:	4b88      	ldr	r3, [pc, #544]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	4b87      	ldr	r3, [pc, #540]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003106:	4989      	ldr	r1, [pc, #548]	; (800332c <HAL_RCC_OscConfig+0x62c>)
 8003108:	400a      	ands	r2, r1
 800310a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2210      	movs	r2, #16
 8003112:	4013      	ands	r3, r2
 8003114:	d063      	beq.n	80031de <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	695b      	ldr	r3, [r3, #20]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d12a      	bne.n	8003174 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800311e:	4b81      	ldr	r3, [pc, #516]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003122:	4b80      	ldr	r3, [pc, #512]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003124:	2104      	movs	r1, #4
 8003126:	430a      	orrs	r2, r1
 8003128:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800312a:	4b7e      	ldr	r3, [pc, #504]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800312c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312e:	4b7d      	ldr	r3, [pc, #500]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003130:	2101      	movs	r1, #1
 8003132:	430a      	orrs	r2, r1
 8003134:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003136:	f7ff f8bd 	bl	80022b4 <HAL_GetTick>
 800313a:	0003      	movs	r3, r0
 800313c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003140:	f7ff f8b8 	bl	80022b4 <HAL_GetTick>
 8003144:	0002      	movs	r2, r0
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e0e3      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003152:	4b74      	ldr	r3, [pc, #464]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	2202      	movs	r2, #2
 8003158:	4013      	ands	r3, r2
 800315a:	d0f1      	beq.n	8003140 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800315c:	4b71      	ldr	r3, [pc, #452]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800315e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003160:	22f8      	movs	r2, #248	; 0xf8
 8003162:	4393      	bics	r3, r2
 8003164:	0019      	movs	r1, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	00da      	lsls	r2, r3, #3
 800316c:	4b6d      	ldr	r3, [pc, #436]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800316e:	430a      	orrs	r2, r1
 8003170:	635a      	str	r2, [r3, #52]	; 0x34
 8003172:	e034      	b.n	80031de <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	695b      	ldr	r3, [r3, #20]
 8003178:	3305      	adds	r3, #5
 800317a:	d111      	bne.n	80031a0 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800317c:	4b69      	ldr	r3, [pc, #420]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800317e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003180:	4b68      	ldr	r3, [pc, #416]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003182:	2104      	movs	r1, #4
 8003184:	438a      	bics	r2, r1
 8003186:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003188:	4b66      	ldr	r3, [pc, #408]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800318a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318c:	22f8      	movs	r2, #248	; 0xf8
 800318e:	4393      	bics	r3, r2
 8003190:	0019      	movs	r1, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	00da      	lsls	r2, r3, #3
 8003198:	4b62      	ldr	r3, [pc, #392]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800319a:	430a      	orrs	r2, r1
 800319c:	635a      	str	r2, [r3, #52]	; 0x34
 800319e:	e01e      	b.n	80031de <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80031a0:	4b60      	ldr	r3, [pc, #384]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 80031a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031a4:	4b5f      	ldr	r3, [pc, #380]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 80031a6:	2104      	movs	r1, #4
 80031a8:	430a      	orrs	r2, r1
 80031aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80031ac:	4b5d      	ldr	r3, [pc, #372]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 80031ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b0:	4b5c      	ldr	r3, [pc, #368]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 80031b2:	2101      	movs	r1, #1
 80031b4:	438a      	bics	r2, r1
 80031b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b8:	f7ff f87c 	bl	80022b4 <HAL_GetTick>
 80031bc:	0003      	movs	r3, r0
 80031be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80031c2:	f7ff f877 	bl	80022b4 <HAL_GetTick>
 80031c6:	0002      	movs	r2, r0
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e0a2      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80031d4:	4b53      	ldr	r3, [pc, #332]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 80031d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d8:	2202      	movs	r2, #2
 80031da:	4013      	ands	r3, r2
 80031dc:	d1f1      	bne.n	80031c2 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d100      	bne.n	80031e8 <HAL_RCC_OscConfig+0x4e8>
 80031e6:	e097      	b.n	8003318 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e8:	4b4e      	ldr	r3, [pc, #312]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	220c      	movs	r2, #12
 80031ee:	4013      	ands	r3, r2
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d100      	bne.n	80031f6 <HAL_RCC_OscConfig+0x4f6>
 80031f4:	e06b      	b.n	80032ce <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a1b      	ldr	r3, [r3, #32]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d14c      	bne.n	8003298 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fe:	4b49      	ldr	r3, [pc, #292]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4b48      	ldr	r3, [pc, #288]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003204:	494a      	ldr	r1, [pc, #296]	; (8003330 <HAL_RCC_OscConfig+0x630>)
 8003206:	400a      	ands	r2, r1
 8003208:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7ff f853 	bl	80022b4 <HAL_GetTick>
 800320e:	0003      	movs	r3, r0
 8003210:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003214:	f7ff f84e 	bl	80022b4 <HAL_GetTick>
 8003218:	0002      	movs	r2, r0
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e079      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003226:	4b3f      	ldr	r3, [pc, #252]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	049b      	lsls	r3, r3, #18
 800322e:	4013      	ands	r3, r2
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003232:	4b3c      	ldr	r3, [pc, #240]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	220f      	movs	r2, #15
 8003238:	4393      	bics	r3, r2
 800323a:	0019      	movs	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003240:	4b38      	ldr	r3, [pc, #224]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003242:	430a      	orrs	r2, r1
 8003244:	62da      	str	r2, [r3, #44]	; 0x2c
 8003246:	4b37      	ldr	r3, [pc, #220]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	4a3a      	ldr	r2, [pc, #232]	; (8003334 <HAL_RCC_OscConfig+0x634>)
 800324c:	4013      	ands	r3, r2
 800324e:	0019      	movs	r1, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	431a      	orrs	r2, r3
 800325a:	4b32      	ldr	r3, [pc, #200]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800325c:	430a      	orrs	r2, r1
 800325e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003260:	4b30      	ldr	r3, [pc, #192]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 8003266:	2180      	movs	r1, #128	; 0x80
 8003268:	0449      	lsls	r1, r1, #17
 800326a:	430a      	orrs	r2, r1
 800326c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326e:	f7ff f821 	bl	80022b4 <HAL_GetTick>
 8003272:	0003      	movs	r3, r0
 8003274:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003278:	f7ff f81c 	bl	80022b4 <HAL_GetTick>
 800327c:	0002      	movs	r2, r0
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e047      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800328a:	4b26      	ldr	r3, [pc, #152]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	2380      	movs	r3, #128	; 0x80
 8003290:	049b      	lsls	r3, r3, #18
 8003292:	4013      	ands	r3, r2
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x578>
 8003296:	e03f      	b.n	8003318 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003298:	4b22      	ldr	r3, [pc, #136]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b21      	ldr	r3, [pc, #132]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 800329e:	4924      	ldr	r1, [pc, #144]	; (8003330 <HAL_RCC_OscConfig+0x630>)
 80032a0:	400a      	ands	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a4:	f7ff f806 	bl	80022b4 <HAL_GetTick>
 80032a8:	0003      	movs	r3, r0
 80032aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ae:	f7ff f801 	bl	80022b4 <HAL_GetTick>
 80032b2:	0002      	movs	r2, r0
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e02c      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c0:	4b18      	ldr	r3, [pc, #96]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	049b      	lsls	r3, r3, #18
 80032c8:	4013      	ands	r3, r2
 80032ca:	d1f0      	bne.n	80032ae <HAL_RCC_OscConfig+0x5ae>
 80032cc:	e024      	b.n	8003318 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d101      	bne.n	80032da <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e01f      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80032da:	4b12      	ldr	r3, [pc, #72]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80032e0:	4b10      	ldr	r3, [pc, #64]	; (8003324 <HAL_RCC_OscConfig+0x624>)
 80032e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	025b      	lsls	r3, r3, #9
 80032ec:	401a      	ands	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d10e      	bne.n	8003314 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	220f      	movs	r2, #15
 80032fa:	401a      	ands	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003300:	429a      	cmp	r2, r3
 8003302:	d107      	bne.n	8003314 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	23f0      	movs	r3, #240	; 0xf0
 8003308:	039b      	lsls	r3, r3, #14
 800330a:	401a      	ands	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	0018      	movs	r0, r3
 800331c:	46bd      	mov	sp, r7
 800331e:	b008      	add	sp, #32
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	40021000 	.word	0x40021000
 8003328:	00001388 	.word	0x00001388
 800332c:	efffffff 	.word	0xefffffff
 8003330:	feffffff 	.word	0xfeffffff
 8003334:	ffc2ffff 	.word	0xffc2ffff

08003338 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0b3      	b.n	80034b4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800334c:	4b5b      	ldr	r3, [pc, #364]	; (80034bc <HAL_RCC_ClockConfig+0x184>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2201      	movs	r2, #1
 8003352:	4013      	ands	r3, r2
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d911      	bls.n	800337e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335a:	4b58      	ldr	r3, [pc, #352]	; (80034bc <HAL_RCC_ClockConfig+0x184>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2201      	movs	r2, #1
 8003360:	4393      	bics	r3, r2
 8003362:	0019      	movs	r1, r3
 8003364:	4b55      	ldr	r3, [pc, #340]	; (80034bc <HAL_RCC_ClockConfig+0x184>)
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800336c:	4b53      	ldr	r3, [pc, #332]	; (80034bc <HAL_RCC_ClockConfig+0x184>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2201      	movs	r2, #1
 8003372:	4013      	ands	r3, r2
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d001      	beq.n	800337e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e09a      	b.n	80034b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2202      	movs	r2, #2
 8003384:	4013      	ands	r3, r2
 8003386:	d015      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2204      	movs	r2, #4
 800338e:	4013      	ands	r3, r2
 8003390:	d006      	beq.n	80033a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003392:	4b4b      	ldr	r3, [pc, #300]	; (80034c0 <HAL_RCC_ClockConfig+0x188>)
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <HAL_RCC_ClockConfig+0x188>)
 8003398:	21e0      	movs	r1, #224	; 0xe0
 800339a:	00c9      	lsls	r1, r1, #3
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a0:	4b47      	ldr	r3, [pc, #284]	; (80034c0 <HAL_RCC_ClockConfig+0x188>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	22f0      	movs	r2, #240	; 0xf0
 80033a6:	4393      	bics	r3, r2
 80033a8:	0019      	movs	r1, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	689a      	ldr	r2, [r3, #8]
 80033ae:	4b44      	ldr	r3, [pc, #272]	; (80034c0 <HAL_RCC_ClockConfig+0x188>)
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2201      	movs	r2, #1
 80033ba:	4013      	ands	r3, r2
 80033bc:	d040      	beq.n	8003440 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d107      	bne.n	80033d6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b3e      	ldr	r3, [pc, #248]	; (80034c0 <HAL_RCC_ClockConfig+0x188>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	029b      	lsls	r3, r3, #10
 80033ce:	4013      	ands	r3, r2
 80033d0:	d114      	bne.n	80033fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e06e      	b.n	80034b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033de:	4b38      	ldr	r3, [pc, #224]	; (80034c0 <HAL_RCC_ClockConfig+0x188>)
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	049b      	lsls	r3, r3, #18
 80033e6:	4013      	ands	r3, r2
 80033e8:	d108      	bne.n	80033fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e062      	b.n	80034b4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ee:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <HAL_RCC_ClockConfig+0x188>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2202      	movs	r2, #2
 80033f4:	4013      	ands	r3, r2
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e05b      	b.n	80034b4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033fc:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <HAL_RCC_ClockConfig+0x188>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2203      	movs	r2, #3
 8003402:	4393      	bics	r3, r2
 8003404:	0019      	movs	r1, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	4b2d      	ldr	r3, [pc, #180]	; (80034c0 <HAL_RCC_ClockConfig+0x188>)
 800340c:	430a      	orrs	r2, r1
 800340e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003410:	f7fe ff50 	bl	80022b4 <HAL_GetTick>
 8003414:	0003      	movs	r3, r0
 8003416:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003418:	e009      	b.n	800342e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800341a:	f7fe ff4b 	bl	80022b4 <HAL_GetTick>
 800341e:	0002      	movs	r2, r0
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	4a27      	ldr	r2, [pc, #156]	; (80034c4 <HAL_RCC_ClockConfig+0x18c>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e042      	b.n	80034b4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <HAL_RCC_ClockConfig+0x188>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	220c      	movs	r2, #12
 8003434:	401a      	ands	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	429a      	cmp	r2, r3
 800343e:	d1ec      	bne.n	800341a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003440:	4b1e      	ldr	r3, [pc, #120]	; (80034bc <HAL_RCC_ClockConfig+0x184>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2201      	movs	r2, #1
 8003446:	4013      	ands	r3, r2
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d211      	bcs.n	8003472 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <HAL_RCC_ClockConfig+0x184>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2201      	movs	r2, #1
 8003454:	4393      	bics	r3, r2
 8003456:	0019      	movs	r1, r3
 8003458:	4b18      	ldr	r3, [pc, #96]	; (80034bc <HAL_RCC_ClockConfig+0x184>)
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003460:	4b16      	ldr	r3, [pc, #88]	; (80034bc <HAL_RCC_ClockConfig+0x184>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2201      	movs	r2, #1
 8003466:	4013      	ands	r3, r2
 8003468:	683a      	ldr	r2, [r7, #0]
 800346a:	429a      	cmp	r2, r3
 800346c:	d001      	beq.n	8003472 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e020      	b.n	80034b4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2204      	movs	r2, #4
 8003478:	4013      	ands	r3, r2
 800347a:	d009      	beq.n	8003490 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800347c:	4b10      	ldr	r3, [pc, #64]	; (80034c0 <HAL_RCC_ClockConfig+0x188>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4a11      	ldr	r2, [pc, #68]	; (80034c8 <HAL_RCC_ClockConfig+0x190>)
 8003482:	4013      	ands	r3, r2
 8003484:	0019      	movs	r1, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <HAL_RCC_ClockConfig+0x188>)
 800348c:	430a      	orrs	r2, r1
 800348e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003490:	f000 f820 	bl	80034d4 <HAL_RCC_GetSysClockFreq>
 8003494:	0001      	movs	r1, r0
 8003496:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <HAL_RCC_ClockConfig+0x188>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	091b      	lsrs	r3, r3, #4
 800349c:	220f      	movs	r2, #15
 800349e:	4013      	ands	r3, r2
 80034a0:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <HAL_RCC_ClockConfig+0x194>)
 80034a2:	5cd3      	ldrb	r3, [r2, r3]
 80034a4:	000a      	movs	r2, r1
 80034a6:	40da      	lsrs	r2, r3
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <HAL_RCC_ClockConfig+0x198>)
 80034aa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80034ac:	2000      	movs	r0, #0
 80034ae:	f7fe febb 	bl	8002228 <HAL_InitTick>
  
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b004      	add	sp, #16
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	40022000 	.word	0x40022000
 80034c0:	40021000 	.word	0x40021000
 80034c4:	00001388 	.word	0x00001388
 80034c8:	fffff8ff 	.word	0xfffff8ff
 80034cc:	08003fa0 	.word	0x08003fa0
 80034d0:	20000090 	.word	0x20000090

080034d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d4:	b590      	push	{r4, r7, lr}
 80034d6:	b08f      	sub	sp, #60	; 0x3c
 80034d8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80034da:	2314      	movs	r3, #20
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	4a2b      	ldr	r2, [pc, #172]	; (800358c <HAL_RCC_GetSysClockFreq+0xb8>)
 80034e0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80034e2:	c313      	stmia	r3!, {r0, r1, r4}
 80034e4:	6812      	ldr	r2, [r2, #0]
 80034e6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	4a29      	ldr	r2, [pc, #164]	; (8003590 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034ec:	ca13      	ldmia	r2!, {r0, r1, r4}
 80034ee:	c313      	stmia	r3!, {r0, r1, r4}
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034f8:	2300      	movs	r3, #0
 80034fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fc:	2300      	movs	r3, #0
 80034fe:	637b      	str	r3, [r7, #52]	; 0x34
 8003500:	2300      	movs	r3, #0
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003504:	2300      	movs	r3, #0
 8003506:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8003508:	4b22      	ldr	r3, [pc, #136]	; (8003594 <HAL_RCC_GetSysClockFreq+0xc0>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003510:	220c      	movs	r2, #12
 8003512:	4013      	ands	r3, r2
 8003514:	2b04      	cmp	r3, #4
 8003516:	d002      	beq.n	800351e <HAL_RCC_GetSysClockFreq+0x4a>
 8003518:	2b08      	cmp	r3, #8
 800351a:	d003      	beq.n	8003524 <HAL_RCC_GetSysClockFreq+0x50>
 800351c:	e02d      	b.n	800357a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800351e:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003520:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003522:	e02d      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	0c9b      	lsrs	r3, r3, #18
 8003528:	220f      	movs	r2, #15
 800352a:	4013      	ands	r3, r2
 800352c:	2214      	movs	r2, #20
 800352e:	18ba      	adds	r2, r7, r2
 8003530:	5cd3      	ldrb	r3, [r2, r3]
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003534:	4b17      	ldr	r3, [pc, #92]	; (8003594 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	220f      	movs	r2, #15
 800353a:	4013      	ands	r3, r2
 800353c:	1d3a      	adds	r2, r7, #4
 800353e:	5cd3      	ldrb	r3, [r2, r3]
 8003540:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003544:	2380      	movs	r3, #128	; 0x80
 8003546:	025b      	lsls	r3, r3, #9
 8003548:	4013      	ands	r3, r2
 800354a:	d009      	beq.n	8003560 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800354c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800354e:	4812      	ldr	r0, [pc, #72]	; (8003598 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003550:	f7fc fdda 	bl	8000108 <__udivsi3>
 8003554:	0003      	movs	r3, r0
 8003556:	001a      	movs	r2, r3
 8003558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355a:	4353      	muls	r3, r2
 800355c:	637b      	str	r3, [r7, #52]	; 0x34
 800355e:	e009      	b.n	8003574 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003562:	000a      	movs	r2, r1
 8003564:	0152      	lsls	r2, r2, #5
 8003566:	1a52      	subs	r2, r2, r1
 8003568:	0193      	lsls	r3, r2, #6
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	185b      	adds	r3, r3, r1
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8003574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003576:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003578:	e002      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800357a:	4b07      	ldr	r3, [pc, #28]	; (8003598 <HAL_RCC_GetSysClockFreq+0xc4>)
 800357c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800357e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b00f      	add	sp, #60	; 0x3c
 8003588:	bd90      	pop	{r4, r7, pc}
 800358a:	46c0      	nop			; (mov r8, r8)
 800358c:	08003f58 	.word	0x08003f58
 8003590:	08003f68 	.word	0x08003f68
 8003594:	40021000 	.word	0x40021000
 8003598:	007a1200 	.word	0x007a1200

0800359c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e01e      	b.n	80035ec <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	223d      	movs	r2, #61	; 0x3d
 80035b2:	5c9b      	ldrb	r3, [r3, r2]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d107      	bne.n	80035ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	223c      	movs	r2, #60	; 0x3c
 80035be:	2100      	movs	r1, #0
 80035c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f7fe fa6d 	bl	8001aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	223d      	movs	r2, #61	; 0x3d
 80035ce:	2102      	movs	r1, #2
 80035d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3304      	adds	r3, #4
 80035da:	0019      	movs	r1, r3
 80035dc:	0010      	movs	r0, r2
 80035de:	f000 fa27 	bl	8003a30 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	223d      	movs	r2, #61	; 0x3d
 80035e6:	2101      	movs	r1, #1
 80035e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	0018      	movs	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	b002      	add	sp, #8
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2101      	movs	r1, #1
 8003608:	430a      	orrs	r2, r1
 800360a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2207      	movs	r2, #7
 8003614:	4013      	ands	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b06      	cmp	r3, #6
 800361c:	d007      	beq.n	800362e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2101      	movs	r1, #1
 800362a:	430a      	orrs	r2, r1
 800362c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	0018      	movs	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	b004      	add	sp, #16
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2202      	movs	r2, #2
 8003648:	4013      	ands	r3, r2
 800364a:	2b02      	cmp	r3, #2
 800364c:	d124      	bne.n	8003698 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2202      	movs	r2, #2
 8003656:	4013      	ands	r3, r2
 8003658:	2b02      	cmp	r3, #2
 800365a:	d11d      	bne.n	8003698 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2203      	movs	r2, #3
 8003662:	4252      	negs	r2, r2
 8003664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2203      	movs	r2, #3
 8003674:	4013      	ands	r3, r2
 8003676:	d004      	beq.n	8003682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	0018      	movs	r0, r3
 800367c:	f000 f9c0 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 8003680:	e007      	b.n	8003692 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	0018      	movs	r0, r3
 8003686:	f000 f9b3 	bl	80039f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	0018      	movs	r0, r3
 800368e:	f000 f9bf 	bl	8003a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	2204      	movs	r2, #4
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d125      	bne.n	80036f2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	2204      	movs	r2, #4
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d11e      	bne.n	80036f2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2205      	movs	r2, #5
 80036ba:	4252      	negs	r2, r2
 80036bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699a      	ldr	r2, [r3, #24]
 80036ca:	23c0      	movs	r3, #192	; 0xc0
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4013      	ands	r3, r2
 80036d0:	d004      	beq.n	80036dc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	0018      	movs	r0, r3
 80036d6:	f000 f993 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 80036da:	e007      	b.n	80036ec <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	0018      	movs	r0, r3
 80036e0:	f000 f986 	bl	80039f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	0018      	movs	r0, r3
 80036e8:	f000 f992 	bl	8003a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2208      	movs	r2, #8
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d124      	bne.n	800374a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2208      	movs	r2, #8
 8003708:	4013      	ands	r3, r2
 800370a:	2b08      	cmp	r3, #8
 800370c:	d11d      	bne.n	800374a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2209      	movs	r2, #9
 8003714:	4252      	negs	r2, r2
 8003716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2204      	movs	r2, #4
 800371c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	2203      	movs	r2, #3
 8003726:	4013      	ands	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	0018      	movs	r0, r3
 800372e:	f000 f967 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 8003732:	e007      	b.n	8003744 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	0018      	movs	r0, r3
 8003738:	f000 f95a 	bl	80039f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	0018      	movs	r0, r3
 8003740:	f000 f966 	bl	8003a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2210      	movs	r2, #16
 8003752:	4013      	ands	r3, r2
 8003754:	2b10      	cmp	r3, #16
 8003756:	d125      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2210      	movs	r2, #16
 8003760:	4013      	ands	r3, r2
 8003762:	2b10      	cmp	r3, #16
 8003764:	d11e      	bne.n	80037a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2211      	movs	r2, #17
 800376c:	4252      	negs	r2, r2
 800376e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2208      	movs	r2, #8
 8003774:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69da      	ldr	r2, [r3, #28]
 800377c:	23c0      	movs	r3, #192	; 0xc0
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4013      	ands	r3, r2
 8003782:	d004      	beq.n	800378e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	0018      	movs	r0, r3
 8003788:	f000 f93a 	bl	8003a00 <HAL_TIM_IC_CaptureCallback>
 800378c:	e007      	b.n	800379e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	0018      	movs	r0, r3
 8003792:	f000 f92d 	bl	80039f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	0018      	movs	r0, r3
 800379a:	f000 f939 	bl	8003a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2201      	movs	r2, #1
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d10f      	bne.n	80037d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d108      	bne.n	80037d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2202      	movs	r2, #2
 80037c6:	4252      	negs	r2, r2
 80037c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 f907 	bl	80039e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2280      	movs	r2, #128	; 0x80
 80037da:	4013      	ands	r3, r2
 80037dc:	2b80      	cmp	r3, #128	; 0x80
 80037de:	d10f      	bne.n	8003800 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2280      	movs	r2, #128	; 0x80
 80037e8:	4013      	ands	r3, r2
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d108      	bne.n	8003800 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2281      	movs	r2, #129	; 0x81
 80037f4:	4252      	negs	r2, r2
 80037f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	0018      	movs	r0, r3
 80037fc:	f000 fa88 	bl	8003d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2240      	movs	r2, #64	; 0x40
 8003808:	4013      	ands	r3, r2
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d10f      	bne.n	800382e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	2240      	movs	r2, #64	; 0x40
 8003816:	4013      	ands	r3, r2
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	d108      	bne.n	800382e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2241      	movs	r2, #65	; 0x41
 8003822:	4252      	negs	r2, r2
 8003824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	0018      	movs	r0, r3
 800382a:	f000 f8f9 	bl	8003a20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	2220      	movs	r2, #32
 8003836:	4013      	ands	r3, r2
 8003838:	2b20      	cmp	r3, #32
 800383a:	d10f      	bne.n	800385c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2220      	movs	r2, #32
 8003844:	4013      	ands	r3, r2
 8003846:	2b20      	cmp	r3, #32
 8003848:	d108      	bne.n	800385c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2221      	movs	r2, #33	; 0x21
 8003850:	4252      	negs	r2, r2
 8003852:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	0018      	movs	r0, r3
 8003858:	f000 fa52 	bl	8003d00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800385c:	46c0      	nop			; (mov r8, r8)
 800385e:	46bd      	mov	sp, r7
 8003860:	b002      	add	sp, #8
 8003862:	bd80      	pop	{r7, pc}

08003864 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	223c      	movs	r2, #60	; 0x3c
 8003872:	5c9b      	ldrb	r3, [r3, r2]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_TIM_ConfigClockSource+0x18>
 8003878:	2302      	movs	r3, #2
 800387a:	e0ab      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x170>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	223c      	movs	r2, #60	; 0x3c
 8003880:	2101      	movs	r1, #1
 8003882:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	223d      	movs	r2, #61	; 0x3d
 8003888:	2102      	movs	r1, #2
 800388a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2277      	movs	r2, #119	; 0x77
 8003898:	4393      	bics	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a4f      	ldr	r2, [pc, #316]	; (80039dc <HAL_TIM_ConfigClockSource+0x178>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2b40      	cmp	r3, #64	; 0x40
 80038b2:	d100      	bne.n	80038b6 <HAL_TIM_ConfigClockSource+0x52>
 80038b4:	e06b      	b.n	800398e <HAL_TIM_ConfigClockSource+0x12a>
 80038b6:	d80e      	bhi.n	80038d6 <HAL_TIM_ConfigClockSource+0x72>
 80038b8:	2b10      	cmp	r3, #16
 80038ba:	d100      	bne.n	80038be <HAL_TIM_ConfigClockSource+0x5a>
 80038bc:	e077      	b.n	80039ae <HAL_TIM_ConfigClockSource+0x14a>
 80038be:	d803      	bhi.n	80038c8 <HAL_TIM_ConfigClockSource+0x64>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d100      	bne.n	80038c6 <HAL_TIM_ConfigClockSource+0x62>
 80038c4:	e073      	b.n	80039ae <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80038c6:	e07c      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80038c8:	2b20      	cmp	r3, #32
 80038ca:	d100      	bne.n	80038ce <HAL_TIM_ConfigClockSource+0x6a>
 80038cc:	e06f      	b.n	80039ae <HAL_TIM_ConfigClockSource+0x14a>
 80038ce:	2b30      	cmp	r3, #48	; 0x30
 80038d0:	d100      	bne.n	80038d4 <HAL_TIM_ConfigClockSource+0x70>
 80038d2:	e06c      	b.n	80039ae <HAL_TIM_ConfigClockSource+0x14a>
      break;
 80038d4:	e075      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80038d6:	2b70      	cmp	r3, #112	; 0x70
 80038d8:	d00e      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0x94>
 80038da:	d804      	bhi.n	80038e6 <HAL_TIM_ConfigClockSource+0x82>
 80038dc:	2b50      	cmp	r3, #80	; 0x50
 80038de:	d036      	beq.n	800394e <HAL_TIM_ConfigClockSource+0xea>
 80038e0:	2b60      	cmp	r3, #96	; 0x60
 80038e2:	d044      	beq.n	800396e <HAL_TIM_ConfigClockSource+0x10a>
      break;
 80038e4:	e06d      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 80038e6:	2280      	movs	r2, #128	; 0x80
 80038e8:	0152      	lsls	r2, r2, #5
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d068      	beq.n	80039c0 <HAL_TIM_ConfigClockSource+0x15c>
 80038ee:	2280      	movs	r2, #128	; 0x80
 80038f0:	0192      	lsls	r2, r2, #6
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d017      	beq.n	8003926 <HAL_TIM_ConfigClockSource+0xc2>
      break;
 80038f6:	e064      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6818      	ldr	r0, [r3, #0]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	6899      	ldr	r1, [r3, #8]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f000 f982 	bl	8003c10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2277      	movs	r2, #119	; 0x77
 8003918:	4313      	orrs	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	609a      	str	r2, [r3, #8]
      break;
 8003924:	e04d      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	6899      	ldr	r1, [r3, #8]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685a      	ldr	r2, [r3, #4]
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f000 f96b 	bl	8003c10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2180      	movs	r1, #128	; 0x80
 8003946:	01c9      	lsls	r1, r1, #7
 8003948:	430a      	orrs	r2, r1
 800394a:	609a      	str	r2, [r3, #8]
      break;
 800394c:	e039      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6818      	ldr	r0, [r3, #0]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	6859      	ldr	r1, [r3, #4]
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	001a      	movs	r2, r3
 800395c:	f000 f8de 	bl	8003b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2150      	movs	r1, #80	; 0x50
 8003966:	0018      	movs	r0, r3
 8003968:	f000 f938 	bl	8003bdc <TIM_ITRx_SetConfig>
      break;
 800396c:	e029      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6818      	ldr	r0, [r3, #0]
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	6859      	ldr	r1, [r3, #4]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	001a      	movs	r2, r3
 800397c:	f000 f8fc 	bl	8003b78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2160      	movs	r1, #96	; 0x60
 8003986:	0018      	movs	r0, r3
 8003988:	f000 f928 	bl	8003bdc <TIM_ITRx_SetConfig>
      break;
 800398c:	e019      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	001a      	movs	r2, r3
 800399c:	f000 f8be 	bl	8003b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2140      	movs	r1, #64	; 0x40
 80039a6:	0018      	movs	r0, r3
 80039a8:	f000 f918 	bl	8003bdc <TIM_ITRx_SetConfig>
      break;
 80039ac:	e009      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	0019      	movs	r1, r3
 80039b8:	0010      	movs	r0, r2
 80039ba:	f000 f90f 	bl	8003bdc <TIM_ITRx_SetConfig>
      break;
 80039be:	e000      	b.n	80039c2 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 80039c0:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	223d      	movs	r2, #61	; 0x3d
 80039c6:	2101      	movs	r1, #1
 80039c8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	223c      	movs	r2, #60	; 0x3c
 80039ce:	2100      	movs	r1, #0
 80039d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	0018      	movs	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b004      	add	sp, #16
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	ffff00ff 	.word	0xffff00ff

080039e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a18:	46c0      	nop			; (mov r8, r8)
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b002      	add	sp, #8
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b002      	add	sp, #8
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a2f      	ldr	r2, [pc, #188]	; (8003b00 <TIM_Base_SetConfig+0xd0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_Base_SetConfig+0x20>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a2e      	ldr	r2, [pc, #184]	; (8003b04 <TIM_Base_SetConfig+0xd4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d108      	bne.n	8003a62 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2270      	movs	r2, #112	; 0x70
 8003a54:	4393      	bics	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a26      	ldr	r2, [pc, #152]	; (8003b00 <TIM_Base_SetConfig+0xd0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <TIM_Base_SetConfig+0x62>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a25      	ldr	r2, [pc, #148]	; (8003b04 <TIM_Base_SetConfig+0xd4>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00f      	beq.n	8003a92 <TIM_Base_SetConfig+0x62>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a24      	ldr	r2, [pc, #144]	; (8003b08 <TIM_Base_SetConfig+0xd8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00b      	beq.n	8003a92 <TIM_Base_SetConfig+0x62>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a23      	ldr	r2, [pc, #140]	; (8003b0c <TIM_Base_SetConfig+0xdc>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <TIM_Base_SetConfig+0x62>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a22      	ldr	r2, [pc, #136]	; (8003b10 <TIM_Base_SetConfig+0xe0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_Base_SetConfig+0x62>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a21      	ldr	r2, [pc, #132]	; (8003b14 <TIM_Base_SetConfig+0xe4>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d108      	bne.n	8003aa4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a20      	ldr	r2, [pc, #128]	; (8003b18 <TIM_Base_SetConfig+0xe8>)
 8003a96:	4013      	ands	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2280      	movs	r2, #128	; 0x80
 8003aa8:	4393      	bics	r3, r2
 8003aaa:	001a      	movs	r2, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689a      	ldr	r2, [r3, #8]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a0c      	ldr	r2, [pc, #48]	; (8003b00 <TIM_Base_SetConfig+0xd0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00b      	beq.n	8003aea <TIM_Base_SetConfig+0xba>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a0d      	ldr	r2, [pc, #52]	; (8003b0c <TIM_Base_SetConfig+0xdc>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <TIM_Base_SetConfig+0xba>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a0c      	ldr	r2, [pc, #48]	; (8003b10 <TIM_Base_SetConfig+0xe0>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_Base_SetConfig+0xba>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a0b      	ldr	r2, [pc, #44]	; (8003b14 <TIM_Base_SetConfig+0xe4>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d103      	bne.n	8003af2 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2201      	movs	r2, #1
 8003af6:	615a      	str	r2, [r3, #20]
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b004      	add	sp, #16
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40012c00 	.word	0x40012c00
 8003b04:	40000400 	.word	0x40000400
 8003b08:	40002000 	.word	0x40002000
 8003b0c:	40014000 	.word	0x40014000
 8003b10:	40014400 	.word	0x40014400
 8003b14:	40014800 	.word	0x40014800
 8003b18:	fffffcff 	.word	0xfffffcff

08003b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	2201      	movs	r2, #1
 8003b34:	4393      	bics	r3, r2
 8003b36:	001a      	movs	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	22f0      	movs	r2, #240	; 0xf0
 8003b46:	4393      	bics	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	220a      	movs	r2, #10
 8003b58:	4393      	bics	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	621a      	str	r2, [r3, #32]
}
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b006      	add	sp, #24
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b086      	sub	sp, #24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	2210      	movs	r2, #16
 8003b8a:	4393      	bics	r3, r2
 8003b8c:	001a      	movs	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	4a0d      	ldr	r2, [pc, #52]	; (8003bd8 <TIM_TI2_ConfigInputStage+0x60>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	031b      	lsls	r3, r3, #12
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	22a0      	movs	r2, #160	; 0xa0
 8003bb4:	4393      	bics	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b006      	add	sp, #24
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	ffff0fff 	.word	0xffff0fff

08003bdc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2270      	movs	r2, #112	; 0x70
 8003bf0:	4393      	bics	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	2207      	movs	r2, #7
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	609a      	str	r2, [r3, #8]
}
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b004      	add	sp, #16
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
 8003c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	4a09      	ldr	r2, [pc, #36]	; (8003c4c <TIM_ETR_SetConfig+0x3c>)
 8003c28:	4013      	ands	r3, r2
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	021a      	lsls	r2, r3, #8
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	609a      	str	r2, [r3, #8]
}
 8003c44:	46c0      	nop			; (mov r8, r8)
 8003c46:	46bd      	mov	sp, r7
 8003c48:	b006      	add	sp, #24
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	ffff00ff 	.word	0xffff00ff

08003c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	223c      	movs	r2, #60	; 0x3c
 8003c5e:	5c9b      	ldrb	r3, [r3, r2]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e041      	b.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	223c      	movs	r2, #60	; 0x3c
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	223d      	movs	r2, #61	; 0x3d
 8003c74:	2102      	movs	r1, #2
 8003c76:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2270      	movs	r2, #112	; 0x70
 8003c8c:	4393      	bics	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a13      	ldr	r2, [pc, #76]	; (8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d009      	beq.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a11      	ldr	r2, [pc, #68]	; (8003cf8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a10      	ldr	r2, [pc, #64]	; (8003cfc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d10c      	bne.n	8003cda <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	2280      	movs	r2, #128	; 0x80
 8003cc4:	4393      	bics	r3, r2
 8003cc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	68ba      	ldr	r2, [r7, #8]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	223d      	movs	r2, #61	; 0x3d
 8003cde:	2101      	movs	r1, #1
 8003ce0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	223c      	movs	r2, #60	; 0x3c
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	b004      	add	sp, #16
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40012c00 	.word	0x40012c00
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40014000 	.word	0x40014000

08003d00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d08:	46c0      	nop			; (mov r8, r8)
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <calloc>:
 8003d20:	b510      	push	{r4, lr}
 8003d22:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <calloc+0x10>)
 8003d24:	000a      	movs	r2, r1
 8003d26:	0001      	movs	r1, r0
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	f000 f83f 	bl	8003dac <_calloc_r>
 8003d2e:	bd10      	pop	{r4, pc}
 8003d30:	2000009c 	.word	0x2000009c

08003d34 <__errno>:
 8003d34:	4b01      	ldr	r3, [pc, #4]	; (8003d3c <__errno+0x8>)
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	4770      	bx	lr
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	2000009c 	.word	0x2000009c

08003d40 <__libc_init_array>:
 8003d40:	b570      	push	{r4, r5, r6, lr}
 8003d42:	2600      	movs	r6, #0
 8003d44:	4d0c      	ldr	r5, [pc, #48]	; (8003d78 <__libc_init_array+0x38>)
 8003d46:	4c0d      	ldr	r4, [pc, #52]	; (8003d7c <__libc_init_array+0x3c>)
 8003d48:	1b64      	subs	r4, r4, r5
 8003d4a:	10a4      	asrs	r4, r4, #2
 8003d4c:	42a6      	cmp	r6, r4
 8003d4e:	d109      	bne.n	8003d64 <__libc_init_array+0x24>
 8003d50:	2600      	movs	r6, #0
 8003d52:	f000 f8f5 	bl	8003f40 <_init>
 8003d56:	4d0a      	ldr	r5, [pc, #40]	; (8003d80 <__libc_init_array+0x40>)
 8003d58:	4c0a      	ldr	r4, [pc, #40]	; (8003d84 <__libc_init_array+0x44>)
 8003d5a:	1b64      	subs	r4, r4, r5
 8003d5c:	10a4      	asrs	r4, r4, #2
 8003d5e:	42a6      	cmp	r6, r4
 8003d60:	d105      	bne.n	8003d6e <__libc_init_array+0x2e>
 8003d62:	bd70      	pop	{r4, r5, r6, pc}
 8003d64:	00b3      	lsls	r3, r6, #2
 8003d66:	58eb      	ldr	r3, [r5, r3]
 8003d68:	4798      	blx	r3
 8003d6a:	3601      	adds	r6, #1
 8003d6c:	e7ee      	b.n	8003d4c <__libc_init_array+0xc>
 8003d6e:	00b3      	lsls	r3, r6, #2
 8003d70:	58eb      	ldr	r3, [r5, r3]
 8003d72:	4798      	blx	r3
 8003d74:	3601      	adds	r6, #1
 8003d76:	e7f2      	b.n	8003d5e <__libc_init_array+0x1e>
 8003d78:	08003fb0 	.word	0x08003fb0
 8003d7c:	08003fb0 	.word	0x08003fb0
 8003d80:	08003fb0 	.word	0x08003fb0
 8003d84:	08003fb4 	.word	0x08003fb4

08003d88 <free>:
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	4b03      	ldr	r3, [pc, #12]	; (8003d98 <free+0x10>)
 8003d8c:	0001      	movs	r1, r0
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	f000 f81a 	bl	8003dc8 <_free_r>
 8003d94:	bd10      	pop	{r4, pc}
 8003d96:	46c0      	nop			; (mov r8, r8)
 8003d98:	2000009c 	.word	0x2000009c

08003d9c <memset>:
 8003d9c:	0003      	movs	r3, r0
 8003d9e:	1812      	adds	r2, r2, r0
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d100      	bne.n	8003da6 <memset+0xa>
 8003da4:	4770      	bx	lr
 8003da6:	7019      	strb	r1, [r3, #0]
 8003da8:	3301      	adds	r3, #1
 8003daa:	e7f9      	b.n	8003da0 <memset+0x4>

08003dac <_calloc_r>:
 8003dac:	434a      	muls	r2, r1
 8003dae:	b570      	push	{r4, r5, r6, lr}
 8003db0:	0011      	movs	r1, r2
 8003db2:	0014      	movs	r4, r2
 8003db4:	f000 f852 	bl	8003e5c <_malloc_r>
 8003db8:	1e05      	subs	r5, r0, #0
 8003dba:	d003      	beq.n	8003dc4 <_calloc_r+0x18>
 8003dbc:	0022      	movs	r2, r4
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	f7ff ffec 	bl	8003d9c <memset>
 8003dc4:	0028      	movs	r0, r5
 8003dc6:	bd70      	pop	{r4, r5, r6, pc}

08003dc8 <_free_r>:
 8003dc8:	b570      	push	{r4, r5, r6, lr}
 8003dca:	0005      	movs	r5, r0
 8003dcc:	2900      	cmp	r1, #0
 8003dce:	d010      	beq.n	8003df2 <_free_r+0x2a>
 8003dd0:	1f0c      	subs	r4, r1, #4
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	da00      	bge.n	8003dda <_free_r+0x12>
 8003dd8:	18e4      	adds	r4, r4, r3
 8003dda:	0028      	movs	r0, r5
 8003ddc:	f000 f8ae 	bl	8003f3c <__malloc_lock>
 8003de0:	4a1d      	ldr	r2, [pc, #116]	; (8003e58 <_free_r+0x90>)
 8003de2:	6813      	ldr	r3, [r2, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d105      	bne.n	8003df4 <_free_r+0x2c>
 8003de8:	6063      	str	r3, [r4, #4]
 8003dea:	6014      	str	r4, [r2, #0]
 8003dec:	0028      	movs	r0, r5
 8003dee:	f000 f8a6 	bl	8003f3e <__malloc_unlock>
 8003df2:	bd70      	pop	{r4, r5, r6, pc}
 8003df4:	42a3      	cmp	r3, r4
 8003df6:	d909      	bls.n	8003e0c <_free_r+0x44>
 8003df8:	6821      	ldr	r1, [r4, #0]
 8003dfa:	1860      	adds	r0, r4, r1
 8003dfc:	4283      	cmp	r3, r0
 8003dfe:	d1f3      	bne.n	8003de8 <_free_r+0x20>
 8003e00:	6818      	ldr	r0, [r3, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	1841      	adds	r1, r0, r1
 8003e06:	6021      	str	r1, [r4, #0]
 8003e08:	e7ee      	b.n	8003de8 <_free_r+0x20>
 8003e0a:	0013      	movs	r3, r2
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	2a00      	cmp	r2, #0
 8003e10:	d001      	beq.n	8003e16 <_free_r+0x4e>
 8003e12:	42a2      	cmp	r2, r4
 8003e14:	d9f9      	bls.n	8003e0a <_free_r+0x42>
 8003e16:	6819      	ldr	r1, [r3, #0]
 8003e18:	1858      	adds	r0, r3, r1
 8003e1a:	42a0      	cmp	r0, r4
 8003e1c:	d10b      	bne.n	8003e36 <_free_r+0x6e>
 8003e1e:	6820      	ldr	r0, [r4, #0]
 8003e20:	1809      	adds	r1, r1, r0
 8003e22:	1858      	adds	r0, r3, r1
 8003e24:	6019      	str	r1, [r3, #0]
 8003e26:	4282      	cmp	r2, r0
 8003e28:	d1e0      	bne.n	8003dec <_free_r+0x24>
 8003e2a:	6810      	ldr	r0, [r2, #0]
 8003e2c:	6852      	ldr	r2, [r2, #4]
 8003e2e:	1841      	adds	r1, r0, r1
 8003e30:	6019      	str	r1, [r3, #0]
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	e7da      	b.n	8003dec <_free_r+0x24>
 8003e36:	42a0      	cmp	r0, r4
 8003e38:	d902      	bls.n	8003e40 <_free_r+0x78>
 8003e3a:	230c      	movs	r3, #12
 8003e3c:	602b      	str	r3, [r5, #0]
 8003e3e:	e7d5      	b.n	8003dec <_free_r+0x24>
 8003e40:	6821      	ldr	r1, [r4, #0]
 8003e42:	1860      	adds	r0, r4, r1
 8003e44:	4282      	cmp	r2, r0
 8003e46:	d103      	bne.n	8003e50 <_free_r+0x88>
 8003e48:	6810      	ldr	r0, [r2, #0]
 8003e4a:	6852      	ldr	r2, [r2, #4]
 8003e4c:	1841      	adds	r1, r0, r1
 8003e4e:	6021      	str	r1, [r4, #0]
 8003e50:	6062      	str	r2, [r4, #4]
 8003e52:	605c      	str	r4, [r3, #4]
 8003e54:	e7ca      	b.n	8003dec <_free_r+0x24>
 8003e56:	46c0      	nop			; (mov r8, r8)
 8003e58:	20000180 	.word	0x20000180

08003e5c <_malloc_r>:
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	b570      	push	{r4, r5, r6, lr}
 8003e60:	1ccd      	adds	r5, r1, #3
 8003e62:	439d      	bics	r5, r3
 8003e64:	3508      	adds	r5, #8
 8003e66:	0006      	movs	r6, r0
 8003e68:	2d0c      	cmp	r5, #12
 8003e6a:	d21e      	bcs.n	8003eaa <_malloc_r+0x4e>
 8003e6c:	250c      	movs	r5, #12
 8003e6e:	42a9      	cmp	r1, r5
 8003e70:	d81d      	bhi.n	8003eae <_malloc_r+0x52>
 8003e72:	0030      	movs	r0, r6
 8003e74:	f000 f862 	bl	8003f3c <__malloc_lock>
 8003e78:	4a25      	ldr	r2, [pc, #148]	; (8003f10 <_malloc_r+0xb4>)
 8003e7a:	6814      	ldr	r4, [r2, #0]
 8003e7c:	0021      	movs	r1, r4
 8003e7e:	2900      	cmp	r1, #0
 8003e80:	d119      	bne.n	8003eb6 <_malloc_r+0x5a>
 8003e82:	4c24      	ldr	r4, [pc, #144]	; (8003f14 <_malloc_r+0xb8>)
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <_malloc_r+0x36>
 8003e8a:	0030      	movs	r0, r6
 8003e8c:	f000 f844 	bl	8003f18 <_sbrk_r>
 8003e90:	6020      	str	r0, [r4, #0]
 8003e92:	0029      	movs	r1, r5
 8003e94:	0030      	movs	r0, r6
 8003e96:	f000 f83f 	bl	8003f18 <_sbrk_r>
 8003e9a:	1c43      	adds	r3, r0, #1
 8003e9c:	d12b      	bne.n	8003ef6 <_malloc_r+0x9a>
 8003e9e:	230c      	movs	r3, #12
 8003ea0:	0030      	movs	r0, r6
 8003ea2:	6033      	str	r3, [r6, #0]
 8003ea4:	f000 f84b 	bl	8003f3e <__malloc_unlock>
 8003ea8:	e003      	b.n	8003eb2 <_malloc_r+0x56>
 8003eaa:	2d00      	cmp	r5, #0
 8003eac:	dadf      	bge.n	8003e6e <_malloc_r+0x12>
 8003eae:	230c      	movs	r3, #12
 8003eb0:	6033      	str	r3, [r6, #0]
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	bd70      	pop	{r4, r5, r6, pc}
 8003eb6:	680b      	ldr	r3, [r1, #0]
 8003eb8:	1b5b      	subs	r3, r3, r5
 8003eba:	d419      	bmi.n	8003ef0 <_malloc_r+0x94>
 8003ebc:	2b0b      	cmp	r3, #11
 8003ebe:	d903      	bls.n	8003ec8 <_malloc_r+0x6c>
 8003ec0:	600b      	str	r3, [r1, #0]
 8003ec2:	18cc      	adds	r4, r1, r3
 8003ec4:	6025      	str	r5, [r4, #0]
 8003ec6:	e003      	b.n	8003ed0 <_malloc_r+0x74>
 8003ec8:	684b      	ldr	r3, [r1, #4]
 8003eca:	428c      	cmp	r4, r1
 8003ecc:	d10d      	bne.n	8003eea <_malloc_r+0x8e>
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	0030      	movs	r0, r6
 8003ed2:	f000 f834 	bl	8003f3e <__malloc_unlock>
 8003ed6:	0020      	movs	r0, r4
 8003ed8:	2207      	movs	r2, #7
 8003eda:	300b      	adds	r0, #11
 8003edc:	1d23      	adds	r3, r4, #4
 8003ede:	4390      	bics	r0, r2
 8003ee0:	1ac3      	subs	r3, r0, r3
 8003ee2:	d0e7      	beq.n	8003eb4 <_malloc_r+0x58>
 8003ee4:	425a      	negs	r2, r3
 8003ee6:	50e2      	str	r2, [r4, r3]
 8003ee8:	e7e4      	b.n	8003eb4 <_malloc_r+0x58>
 8003eea:	6063      	str	r3, [r4, #4]
 8003eec:	000c      	movs	r4, r1
 8003eee:	e7ef      	b.n	8003ed0 <_malloc_r+0x74>
 8003ef0:	000c      	movs	r4, r1
 8003ef2:	6849      	ldr	r1, [r1, #4]
 8003ef4:	e7c3      	b.n	8003e7e <_malloc_r+0x22>
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	1cc4      	adds	r4, r0, #3
 8003efa:	439c      	bics	r4, r3
 8003efc:	42a0      	cmp	r0, r4
 8003efe:	d0e1      	beq.n	8003ec4 <_malloc_r+0x68>
 8003f00:	1a21      	subs	r1, r4, r0
 8003f02:	0030      	movs	r0, r6
 8003f04:	f000 f808 	bl	8003f18 <_sbrk_r>
 8003f08:	1c43      	adds	r3, r0, #1
 8003f0a:	d1db      	bne.n	8003ec4 <_malloc_r+0x68>
 8003f0c:	e7c7      	b.n	8003e9e <_malloc_r+0x42>
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	20000180 	.word	0x20000180
 8003f14:	20000184 	.word	0x20000184

08003f18 <_sbrk_r>:
 8003f18:	2300      	movs	r3, #0
 8003f1a:	b570      	push	{r4, r5, r6, lr}
 8003f1c:	4c06      	ldr	r4, [pc, #24]	; (8003f38 <_sbrk_r+0x20>)
 8003f1e:	0005      	movs	r5, r0
 8003f20:	0008      	movs	r0, r1
 8003f22:	6023      	str	r3, [r4, #0]
 8003f24:	f7fe f910 	bl	8002148 <_sbrk>
 8003f28:	1c43      	adds	r3, r0, #1
 8003f2a:	d103      	bne.n	8003f34 <_sbrk_r+0x1c>
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d000      	beq.n	8003f34 <_sbrk_r+0x1c>
 8003f32:	602b      	str	r3, [r5, #0]
 8003f34:	bd70      	pop	{r4, r5, r6, pc}
 8003f36:	46c0      	nop			; (mov r8, r8)
 8003f38:	20000290 	.word	0x20000290

08003f3c <__malloc_lock>:
 8003f3c:	4770      	bx	lr

08003f3e <__malloc_unlock>:
 8003f3e:	4770      	bx	lr

08003f40 <_init>:
 8003f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f42:	46c0      	nop			; (mov r8, r8)
 8003f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f46:	bc08      	pop	{r3}
 8003f48:	469e      	mov	lr, r3
 8003f4a:	4770      	bx	lr

08003f4c <_fini>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	46c0      	nop			; (mov r8, r8)
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr
